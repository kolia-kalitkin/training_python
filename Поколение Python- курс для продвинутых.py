

# –ù–∞ easy
# 34 828
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ aa –∏ bb. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç:
#
#   —Å—É–º–º—É —á–∏—Å–µ–ª aa –∏ bb;
#    —Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª aa –∏ bb;
#    –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª aa –∏ bb;
#    —á–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª aa –∏ bb;
#    —Ü–µ–ª—É—é —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ aa –Ω–∞ bb;
#    –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ aa –Ω–∞ bb;
#    –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —Å—É–º–º—ã –∏—Ö 1010-—Ö —Å—Ç–µ–ø–µ–Ω–µ–π: a10+b10a10+b10

import re
from functools import reduce
import math
from math import sqrt
import random as r
import turtle as t
from math import factorial
from fractions import Fraction as F
import string
from random import randrange as r
import random as rnd
from random import randint
import random
from string import *
from random import sample
from random import choice
from random import choice, shuffle
import antygravity

a = int(input())
b = int(input())

sum = a + b
dif = a - b
mul = a * b
div = a / b
div2 = a // b
div3 = a % b
sq = (a ** 10 + b ** 10) ** 0.5

print(sum)
print(dif)
print(mul)
print(div)
print(div2)
print(div3)
print(sq)
# ---------------------------------------------------------------
# _______________________________________________________________


# –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
# 32 691
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢) —á–µ–ª–æ–≤–µ–∫–∞.

mass = float(input())
hei = float(input())

ind_mt = mass / hei ** 2

if 18.5 <= ind_mt <= 25:
    print("–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞")
elif ind_mt < 18.5:
    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞")
elif ind_mt > 25:
    print("–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞")


# ---------------------------------------------------------------
# _______________________________________________________________


# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
# 32 083
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ,
# —á—Ç–æ –æ–¥–∏–Ω –ª—é–±–æ–π —Å–∏–º–≤–æ–ª (–≤ —Ç–æ–º —á–∏—Å–ª–µ –ø—Ä–æ–±–µ–ª) —Å—Ç–æ–∏—Ç 6060 –∫–æ–ø–µ–µ–∫.
# –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–ø–µ–π–∫–∞—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.

s = input()
n = len(s)
sum = 60 * n
print(sum // 100, '—Ä.', sum % 100, '–∫–æ–ø.')
# ---------------------------------------------------------------
# _______________________________________________________________


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
# 31 266
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
# –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.

print(len(input().split()))


# ---------------------------------------------------------------
# _______________________________________________________________


# –ó–æ–¥–∏–∞–∫
# 29 658
# –ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã–º –≥–æ–¥—ã –≤ 1212-–ª–µ—Ç–Ω–µ–º —Ü–∏–∫–ª–µ.
# –û–¥–∏–Ω 1212-–ª–µ—Ç–Ω–∏–π —Ü–∏–∫–ª –ø–æ–∫–∞–∑–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∏–∂–µ.
# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, 20122012 –≥–æ–¥ –±—É–¥–µ—Ç –æ—á–µ—Ä–µ–¥–Ω—ã–º –≥–æ–¥–æ–º –¥—Ä–∞–∫–æ–Ω–∞.

year_enter = int(input())

animal = ['–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞', '–û–±–µ–∑—å—è–Ω–∞',
          '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞', '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü']

if year_enter % 12 == 8:
    print(animal[0])
elif year_enter % 12 == 9:
    print(animal[1])
elif year_enter % 12 == 10:
    print(animal[2])
elif year_enter % 12 == 11:
    print(animal[3])
elif year_enter % 12 == 0:
    print(animal[4])
elif year_enter % 12 == 1:
    print(animal[5])
elif year_enter % 12 == 2:
    print(animal[6])
elif year_enter % 12 == 3:
    print(animal[7])
elif year_enter % 12 == 4:
    print(animal[8])
elif year_enter % 12 == 5:
    print(animal[9])
elif year_enter % 12 == 6:
    print(animal[10])
elif year_enter % 12 == 7:
    print(animal[11])
# ---------------------------------------------------------------
year = int(input())
animals = ['–û–±–µ–∑—å—è–Ω–∞', '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞',
           '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü', '–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞']

print(animals[year % 12])
# _______________________________________________________________


# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —á–∏—Å–ª–∞
# 28 171
# –î–∞–Ω–æ –ø—è—Ç–∏–∑–Ω–∞—á–Ω–æ–µ –∏–ª–∏ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –ø–æ—Ä—è–¥–æ–∫ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—è—Ç–∏ —Ü–∏—Ñ—Ä –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π.

n = input()
s = n[-5:]
if len(n) == 5:
    print(int(s[::-1]))
elif len(n) == 6:
    print(int(n[0] + s[::-1]))

# ---------------------------------------------------------------
n = input()
new_n = int(n[:-5] + n[-5:][::-1])

print(new_n)
# _______________________________________________________________


# Standard American Convention
# 26 500
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É,
# –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—è—Ç—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
# –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –æ –∑–∞–ø—è—Ç—ã—Ö –≤ –±–æ–ª—å—à–∏—Ö —á–∏—Å–ª–∞—Ö.

n = list(input())

if len(n) > 3:
    for i in range(-3, -(len(n) + len(n) // 3 - 1), -4):
        n.insert(i, ',')

# for i in range(len(x) - 3, 0, -3):
#    x.insert(i, ',')
#

print(''.join(n))


# ---------------------------------------------------------------
print(f'{int(input()):,}')
# ---------------------------------------------------------------


seq = list(input())
new_s = ""

while len(seq) >= 3:
    # –æ—Ç—Ä—ã–≤–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –∏ —Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –Ω–∏—Ö –∑–∞–ø—è—Ç—É—é
    new_s += seq.pop(-1) + seq.pop(-1) + seq.pop(-1) + ","

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è (–∏—Ö 1 –∏–ª–∏ 2)
new_s += "".join(seq[::-1])

new_s = new_s[::-1]  # –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∏–¥
new_s = new_s.lstrip(",")  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∑–∞–ø—è—Ç—É—é

print(new_s)
# _______________________________________________________________


# –ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
# 20 878
# n —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–∞–º–∏ –æ—Ç 11 –¥–æ nn, —Å—Ç–æ—è—Ç –≤ –∫—Ä—É–≥—É. –û–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è, –∫–∞–∂–¥—ã–π kk-–π –ø–æ —Å—á–µ—Ç—É —á–µ–ª–æ–≤–µ–∫ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∫—Ä—É–≥–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–∏–º —á–µ–ª–æ–≤–µ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∫—Ä—É–≥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º.

n = int(input())
k = int(input())

l = []

for i in range(1, n + 1):  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç 1 –¥–æ (n + 1)
    l. append(i)

while len(l) > 1:           # –ø–æ–∫–∞ –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ 1
    for i in range(k - 1):
        # –í—ã—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        l.append(l.pop(0))
        if k == len(l):     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–∏–∫–ª–∞ —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞, —Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ–º –µ—ë –Ω–∞ 0
            k = 0
    l.pop(0)    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞

print(*l)


# ---------------------------------------------------------------
# _______________________________________________________________


# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
# 23 853
# –î–∞–Ω –Ω–∞–±–æ—Ä —Ç–æ—á–µ–∫ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫, –ª–µ–∂–∞—â–∏—Ö –≤ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏.

amount = int(input())
coordinate = []

cnt1, cnt2, cnt3, cnt4 = 0, 0, 0, 0

for i in range(0, amount * 2, 2):
    coordinate += input().split()

    if int(coordinate[i]) > 0 and int(coordinate[i + 1]) > 0:
        cnt1 += 1
    elif int(coordinate[i]) < 0 and int(coordinate[i + 1]) > 0:
        cnt2 += 1
    elif int(coordinate[i]) < 0 and int(coordinate[i + 1]) < 0:
        cnt3 += 1
    elif int(coordinate[i]) > 0 and int(coordinate[i + 1]) < 0:
        cnt4 += 1
#   0 -1
#   1 2
#   0 9
#   -9 -5


print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', cnt1)
print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', cnt2)
print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å:', cnt3)
print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', cnt4)
# ---------------------------------------------------------------
n = int(input())
count = [0, 0, 0, 0]
names = ['–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', '–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:',
         '–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å:', '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:']

for _ in range(n):
    x, y = [int(num) for num in input().split()]
    if x > 0 and y > 0:
        count[0] += 1
    elif x < 0 and y > 0:
        count[1] += 1
    elif x < 0 and y < 0:
        count[2] += 1
    elif x > 0 and y < 0:
        count[3] += 1
# _______________________________________________________________


# –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
# 23 822
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
# –ò–∑ –Ω–µ—ë —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥—Å—á–µ—Ç–∞
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–º –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ —á–∏—Å–ª–∞.

s = input().split()
s.append('0')

cnt = 0

for i in range(len(s)):
    if int(s[i + 1]) > int(s[i]):
        cnt += 1
print(cnt)

# 1 2 3 4 5

# ---------------------------------------------------------------
numbers = [int(n) for n in input().split()]
counter = 0

for i in range(1, len(numbers)):
    if numbers[i] > numbers[i - 1]:
        counter += 1

print(counter)
# _______________________________________________________________


# –ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
# 23 092
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (a[0] c a[1], a[2] c a[3] –∏ —Ç.–¥.). –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ.

num = [int(n) for n in input().split()]  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª

if len(num) % 2 == 1:
    for i in range(len(num) - 1, 2):
        num[i], num[i + 1] = num[i + 1], num[i]

else:
    for i in range(0, len(num), 2):
        num[i], num[i + 1] = num[i + 1], num[i]

print(*num)
# ---------------------------------------------------------------
numbers = input().split()

for i in range(0, len(numbers) - 1, 2):
    numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]

print(*numbers)
# _______________________________________________________________


# –°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏
# 22 705
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–æ, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤—ã–º, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–ø–µ—Ä–µ–¥, –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤.

num = [int(n) for n in input().split()]     # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª

num.insert(0, num[-1])
num.pop(-1)

print(*num)
# ---------------------------------------------------------------
seq = input().split()
new_seq = [seq[-1]] + seq[:-1]

print(*new_seq)
# _______________________________________________________________


# –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# 22 590
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é. –ò–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.

num = [int(n) for n in input().split()]
el = []

for c in num:   # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª
    if c not in el:   # –µ—Å–ª–∏ c –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ el
        el.append(c)  # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ el

print(len(el))  # –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

# 2 2 5 5 5 5 8 10 10

# ----------------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------------
numbers = input().split()
counter = 1

for i in range(len(numbers) - 1):      # –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    if numbers[i] != numbers[i + 1]:
        counter += 1

print(counter)
# _______________________________________________________________


# –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
# 21 240
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –¥–≤—É—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –≤—ã–≤–æ–¥—è—â—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ—Ç–≤–µ—Ç–∞ ¬´–î–ê¬ª –∏–ª–∏ ¬´–ù–ï–¢¬ª.

n = int(input())
mul = []

for _ in range(n):      # seq = [int(input()) for _ in range(n)]
    mul.append(int(input()))    #

prod = int(input())

cnt = 0
for i in range(0, len(mul)):
    for j in range(i + 1, len(mul)):
        print(mul[i], mul[j])
        if prod == mul[i] * mul[j]:
            cnt += 1

if cnt > 0:
    print('–î–ê')
else:
    print('–ù–ï–¢')
#   5
#   1
#   999
#   87
#   33
#   325
#   999


# ---------------------------------------------------------------
# _______________________________________________________________


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
# 21 468
# –¢–∏–º—É—Ä –∏ –†—É—Å–ª–∞–Ω –ø—ã—Ç–∞—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –∫—É—Ä—Å—É "Python –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤". –î–ª—è —ç—Ç–æ–≥–æ –æ–Ω–∏ —Ä–µ—à–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏ –±—É–º–∞–≥—É. –ü–æ–º–æ–≥–∏—Ç–µ —Ä–µ–±—è—Ç–∞–º –±—Ä–æ—Å–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –∂—Ä–µ–±–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π –º–æ–¥—É–ª—å –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞.

s1, s2 = input(), input()

if s1 == s2:
    print('–Ω–∏—á—å—è')
elif s1 == '–Ω–æ–∂–Ω–∏—Ü—ã' and s2 == '–±—É–º–∞–≥–∞' or s1 == '–∫–∞–º–µ–Ω—å' and s2 == '–Ω–æ–∂–Ω–∏—Ü—ã' or s1 == '–±—É–º–∞–≥–∞' and s2 == '–∫–∞–º–µ–Ω—å':
    print('–¢–∏–º—É—Ä')

else:
    print('–†—É—Å–ª–∞–Ω')


# ---------------------------------------------------------------
options = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
results = ["–Ω–∏—á—å—è", "–†—É—Å–ª–∞–Ω", "–¢–∏–º—É—Ä"]

timur_move = input()
ruslan_move = input()

case = options.index(timur_move) - options.index(ruslan_move)
res = results[case]

print(res)
# _______________________________________________________________


# –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ üå∂Ô∏è
# 19 447
# –ü—Ä–æ–∏–≥—Ä–∞–≤ 1010 —Ä–∞–∑ –¢–∏–º—É—Ä—É, –†—É—Å–ª–∞–Ω –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–∞–∫ –¥–µ–ª–æ –¥–∞–ª—å—à–µ –Ω–µ –ø–æ–π–¥–µ—Ç, –∏ —Ä–µ—à–∏–ª —É—Å–ª–æ–∂–Ω–∏—Ç—å –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –¢–∏–º—É—Ä –∏ –†—É—Å–ª–∞–Ω –∏–≥—Ä–∞—é—Ç –≤ –∏–≥—Ä—É –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫. –ü–æ–º–æ–≥–∏—Ç–µ —Ä–µ–±—è—Ç–∞–º –≤–Ω–æ–≤—å –±—Ä–æ—Å–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –∂—Ä–µ–±–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å –≤ –Ω–æ–≤–æ–º –∫—É—Ä—Å–µ.

#   a, b = input(), input()
#   print('–Ω–∏—á—å—è' if a == b else '–¢–∏–º—É—Ä' if a + b in ('–∫–∞–º–µ–Ω—å–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã–±—É–º–∞–≥–∞') else '–†—É—Å–ª–∞–Ω')


# ---------------------------------------------------------------
# _______________________________________________________________


# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
# 20 769
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†". –ë—É–∫–≤–∞ "–û" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –û—Ä–ª–∞, –∞ –±—É–∫–≤–∞ "–†" - –≤—ã–ø–∞–¥–µ–Ω–∏—é –†–µ—à–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.

s = input().split('–û')

if len(max(s)) == 0:
    print(0)
elif len(max(s)) == 1:
    print(1)
elif len(max(s)) > 1:
    print(len(max(s)))
# ---------------------------------------------------------------
s = input()
seq = s.split("–û")  # —É–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –æ—Ä–ª–æ–≤ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—à–µ–∫

mx = 0  # –º–∞–∫—Å–∏–º—É–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Ä–µ—à–µ–∫
for el in seq:
    mx = max(mx, el.count("–†"))

print(mx)
# _______________________________________________________________


# –ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
# 18 251
# –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ê–Ω—Ç–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–∏–ª—Ñ–æ–π–ª–æ–º, –≤–∑–ª–æ–º–∞–ª —Å–µ—Ç—å —É–º–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ "–ü–µ–≥–æ–≥–æ –¥—É–¥–æ—á–Ω–∏–∫–∞". –ü–æ–º–æ–≥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ñ–∏—Ä–º—ã –æ—Ç—ã—Å–∫–∞—Ç—å –≤—Å–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏.
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∏ –µ—Å–ª–∏ –≤ –Ω–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–æ "anton" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤—ã, –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤), —Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ä–∞–∂–µ–Ω –∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã

word = ['a', 'n', 't', 'o', 'n']
n = int(input())


l1 = []
l2 = []
for i in range(n):
    l1.append(input())

for i in range(1, len(l1) + 1):

    # –†–µ—à–µ–Ω–∏–µ –≤ –ø–∞—Ä—É —Å—Ç—Ä–æ—á–µ–∫, –µ—Å–ª–∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫ find(), rfind()  –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±—É–∫–≤...
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º, —á—Ç–æ —É —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –ø–æ–∏—Å–∫–∞.
    a = l1[i].find('a')
    n = l1[i].find('n', a)
    t = l1[i].find('t', n)
    o = l1[i].find('o', t)
    n2 = l1[i].rfind('n')

    if a < n < t < o < n2:
        l2.append(i)


print(*l2)
# ---------------------------------------------------------------
n = int(input())
for i in range(n):
    seq = ["a", "n", "t", "o", "n"]
    s = list(input())

    while seq and s:  # –ø–æ–∫–∞ —É –Ω–∞—Å –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–æ–∫ –∏–∑ –±—É–∫–≤ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞ "anton"

        if seq[0] == s[0]:  # –µ—Å–ª–∏ –±—É–∫–≤—ã —Ä–∞–≤–Ω—ã, —Ç–æ –≤—ã—Ä—ã–≤–∞–µ–º –∏ —Ç–∞–º, –∏ —Ç–∞–º
            seq.pop(0)
            s.pop(0)
        else:  # –∏–Ω–∞—á–µ –≤—ã—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –±—É–∫–≤ —Å—Ç—Ä–æ–∫–∏
            s.pop(0)

    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±—É–∫–≤ —Å–ª–æ–≤–∞ "anton" –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –≤—ã—Ä–≤–∞–ª–∏ –≤—Å–µ –±—É–∫–≤—ã,
    # –∑–Ω–∞—á–∏—Ç –≤ —Å—Ç—Ä–æ–∫–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –≤—Å–µ —ç—Ç–∏ –±—É–∫–≤—ã –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–º –ø–æ—Ä—è–¥–∫–µ
    if not seq:
        print(i + 1, end=" ")
# _______________________________________________________________


# –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞ üå∂Ô∏èüå∂Ô∏è
# 17 671
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏. –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â—É—é –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±—É–∫–≤—É,
# –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞, –∞ –æ—á–µ—Ä–µ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–∂–µ –±–µ–∑ —ç—Ç–æ–π –±—É–∫–≤—ã.

s = input()
s += ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
word = list(s)
word.sort()
word.append(None)
l = []

for i in range(len(word) - 1):
    if word[i] != word[i + 1]:
        l.append(word[i])
l.pop(0)


for i in range(len(l)):
    print(s, l[i])
    s = s.replace(l[i], '')
    s = s.replace('  ', ' ')
    s = s.strip()
    if len(s) == 0:
        break


# —Ä–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä

# ---------------------------------------------------------------
word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
alpha = [chr(i) for i in range(1072, 1104)]

for letter in alpha:
    if letter in word:
        print(word, letter)
        word = word.replace(letter, '').replace('  ', ' ').strip()
# ----------------------------------------------------------------
word = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
for c in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä–æ—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è':
    if c in word:
        print(word, c)
        word = word.replace(c, '').strip().replace('  ', ' ')
# _______________________________________________________________


# –ü—Ä–µ–¥–∏–∫–∞—Ç –¥–µ–ª–∏–º–æ—Å—Ç–∏
# 23 149
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func(num1, num2), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ num1 –∏ num2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —á–∏—Å–ª–æ num1 –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ —á–∏—Å–ª–æ num2 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–¥–µ–ª–∏—Ç—Å—è" (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è func() –≤–µ—Ä–Ω—É–ª–∞ True) –∏ "–Ω–µ –¥–µ–ª–∏—Ç—Å—è" (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è func() –≤–µ—Ä–Ω—É–ª–∞ False).

# —Ñ-—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞
def func(num1, num2):
    return num1 % num2 == 0


n1, n2 = int(input()), int(input())

if func(n1, n2):
    print('–¥–µ–ª–∏—Ç—Å—è')
else:
    print('–Ω–µ –¥–µ–ª–∏—Ç—Å—è')

# ---------------------------------------------------------------
# _______________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é max(), —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–æ–¥–∏–ª –æ–¥–∏–Ω –æ–±—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ list1.
#  22 448
#
list1 = [[1, 7, 8], [9, 7, 102], [6, 106, 105], [100, 99, 98, 103], [1, 2, 3]]
maximum = -1

for el in list1:

    if max(el) > maximum:
        maximum = max(el)


print(maximum)

# ---------------------------------------------------------------
# _______________________________________________________________


#
# 22 647
#
list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105],
         [100, 99, 98, 103], [1, 2, 3]]

for li in list1:
    li.reverse()

print(list1)

# ---------------------------------------------------------------
# _______________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–æ–¥–∏–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–∫–∞ list1 —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—É—é –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —á–∏—Å–µ–ª.
# 22 459
#
list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105],
         [100, 99, 98, 103], [1, 2, 3]]
total = 0
counter = 0

for li in list1:
    for el in li:
        total += el
        counter += 1

print(total/counter)

# ---------------------------------------------------------------
list1 = [[1, 7, 8], [9, 7, 102], [102, 106, 105],
         [100, 99, 98, 103], [1, 2, 3]]
total = 0
counter = 0

for li in list1:
    total += sum(li)
    counter += len(li)

print(total / counter)
# _______________________________________________________________


#  –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 1
# 21 669
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ nn —Å–ø–∏—Å–∫–æ–≤

n = int(input())
result = []

for _ in range(n):
    result.append(list(range(1, n + 1)))

print(*result, sep='\n')

# ---------------------------------------------------------------
# _______________________________________________________________


# –°–ø–∏—Å–æ–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É 2
# 21 339
#  –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ nn —Å–ø–∏—Å–∫–æ–≤ [[1], [1, 2], [1, 2, 3], ..., [1, 2, ..., n]].

n = int(input())
l1 = []

for i in range(1, n + 1):
    l1.append(list(range(1, i + 1)))

print(*l1, sep='\n')


# ---------------------------------------------------------------
# _______________________________________________________________


# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 1 üå∂Ô∏è
# 18 290
#
n = int(input())
l1 = []

for i in range(n + 1):
    # —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–∞—Å–∫–∞–ª—è
    l1.append(list([1] + [0] * n))


for i in range(1, n + 1):
    # i+1, –∞ –Ω–µ n+1 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Ç—Ä–∏—Ü—ã
    for j in range(1, i + 1):
        l1[i][j] = l1[i - 1][j - 1] + l1[i - 1][j]


print(l1[n])

# ---------------------------------------------------------------
# -------------------–§–£–ù–ö–¶–ò–Ø-------------------


def pascal(n):
    triangle = [[1]]

    for i in range(n):
        row = [1]
        for j in range(1, len(triangle[i])):
            row += [sum(triangle[i][j - 1: j + 1])]
        row += [1]
        triangle.append(row.copy())

    return triangle[n]


# --------------------–í–´–ó–û–í--------------------
print(pascal(int(input())))
# _______________________________________________________________


# –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è 2
# 17 861
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ nn —Å—Ç—Ä–æ–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ü–∞—Å–∫–∞–ª—è.

# —Ñ-—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–π–≥–æ–ª—å–Ω–∏–∫–∞ –ø–∞—Å–∫–∞–ª—è
def pascal_triangle(n):

    l1 = []

    for i in range(n + 1):
        # —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–∞—Å–∫–∞–ª—è
        l1.append(list([1] + [0] * n))

    for i in range(1, n + 1):
        # i+1, –∞ –Ω–µ n+1 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Ç—Ä–∏—Ü—ã c –Ω—É–ª—è–º–∏
        for j in range(1, i + 1):
            l1[i][j] = l1[i - 1][j - 1] + l1[i - 1][j]

    return l1[n]    # —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏–∂–Ω—é—é —Å—Ç–æ—Ä–æ–∫—É(—É—Ä–æ–≤–µ–Ω—å) —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞


# –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π
m = int(input())

# –≤—ã–∑–æ–≤ —Ñ-–∏–∏
for i in range(m):
    # –≤—ã–≤–æ–¥–∏–º –ø–æ—Å—Ç–æ—Ä–æ—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏—é pascal_triangle, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç 0 –¥–æ n
    print(*pascal_triangle(i))


# ---------------------------------------------------------------
# -------------------–§–£–ù–ö–¶–ò–Ø-------------------
def pascal(n):
    triangle = [[1]]

    for i in range(n - 1):
        row = [1]
        for j in range(1, len(triangle[i])):
            row += [sum(triangle[i][j - 1: j + 1])]
        row += [1]
        triangle.append(row.copy())

    return triangle


# --------------------–í–´–ó–û–í--------------------
[print(*row) for row in pascal(int(input()))]
# _______________________________________________________________


# –£–ø–∞–∫–æ–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –ø–æ–¥—Å–ø–∏—Å–∫–∏.
# 17 418

s = input().split()
l1 = []
# —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫(—Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞) –≤ —Å–ø–∏—Å–∫–µ –ª1
l1.append(list(s[0]))


cnt = 0
for i in range(1, len(s)):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—â–µ–≥–æ

    if s[i - 1] != s[i]:              # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç S —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É
        # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –û–°–ù–û–í–ù–û–ì–û —Å–ø–∏—Å–∫–∞ S –≤ –Ω–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫
        l1.append(list(s[i]))

    elif s[i - 1] == s[i]:         # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è,
        # —Ç–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —ç–ª-—Ç
        l1[i - 1 - cnt] = list(l1[i - 1 - cnt])
        l1[i - 1 - cnt].append(s[i])
        cnt += 1                            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ '–æ—à–∏–±–∫–∏', —Ç–∫ –∫–æ–ª-–≤–æ —ç–ª-—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö —É–∂–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É –ø–æ–≤—Ç–æ—Ä–æ–≤

print(l1)
# ---------------------------------------------------------------
char_list = []
a = []
for char in input().split():  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã —Å—Ç—Ä–æ–∫–∏
    if not a:  # –µ—Å–ª–∏ –≤ –∞ –ø—É—Å—Ç–æ, —Ç–æ
        a.append(char)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª char –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞
    else:  # –µ—Å–ª–∏ –≤ –∞ –Ω–µ –ø—É—Å—Ç–æ, —Ç–æ
        if a[-1] == char:  # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∞ —Ä–∞–≤–µ–Ω —Å–∏–º–≤–æ–ª—É char, —Ç–æ
            a.append(char)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞ —ç–ª–µ–º–µ–Ω—Ç char
        else:  # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∞ –Ω–µ —Ä–∞–≤–µ–Ω —Å–∏–º–≤–æ–ª—É char, —Ç–æ
            char_list.append(a)  # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü char_list —Å–ø–∏—Å–æ–∫ –∞
            a = []  # –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞
            a.append(char)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞ —ç–ª–µ–º–µ–Ω—Ç char
if a:  # –µ—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –∞ —á—Ç–æ - —Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ char_list –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞
    char_list.append(a)
print(char_list)  # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞ —Å–ø–∏—Å–æ–∫ char_list. –ò ,—á—ë—Ä—Ç, –º—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫–∏!
# ---------------------------------------------------------------
# –ó–ê–í–û–†–ê–ß–ò–í–ê–ï–ú –í –§–£–ù–ö–¶–ò–Æ
# ---------------------------------------------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ-–∏–∏ –ø–æ–¥—Å—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤


def repeat_simbol(m):
    l1 = []
    # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫(—Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞) –≤ —Å–ø–∏—Å–∫–µ –ª1
    l1.append(list(s[0]))

    cnt = 0
    for i in range(1, len(s)):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—â–µ–≥–æ

        if s[i - 1] != s[i]:              # –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç S —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É
            # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –û–°–ù–û–í–ù–û–ì–û —Å–ø–∏—Å–∫–∞ S –≤ –Ω–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫
            l1.append(list(s[i]))

        elif s[i - 1] == s[i]:         # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è,
            # —Ç–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —ç–ª-—Ç
            l1[i - 1 - cnt] = list(l1[i - 1 - cnt])
            l1[i - 1 - cnt].append(s[i])
            cnt += 1                            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ '–æ—à–∏–±–∫–∏', —Ç–∫ –∫–æ–ª-–≤–æ —ç–ª-—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö —É–∂–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É –ø–æ–≤—Ç–æ—Ä–æ–≤

    return l1


# –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
s = input().split()

# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
print(repeat_simbol(s))

# _______________________________________________________________


# –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ üå∂Ô∏è
# 17 160
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞ –æ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª—ã, –Ω–∞ –¥—Ä—É–≥–æ–π —á–∏—Å–ª–æ nn. –ò–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫.
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é chunked(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ –∏ —á–∏—Å–ª–æ, –∑–∞–¥–∞—é—â–µ–µ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–∫—É—Å–∫–∞), –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∞–Ω–∫–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.

s = input()
n = int(input())

l = [list(['']) * (n - 1)]
for el in s:
    for i in range(n - 1):
        l[el].append(el)
print(l)
# a b c d e f
# 3

# ---------------------------------------------------------------
# _______________________________________________________________

# —Ñ—É–Ω–∫—Ü–∏—è  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —á–∞–Ω–∫–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.


def chunked(s, n):

    if len(s) < n:      # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ s –º–µ–Ω—å—à–µ n
        l1 = [[0 for _ in range(len(s))]]  # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤
        for i in range(len(s)):
            l1[0][i] = s[i]
        return l1

    elif len(s) % n == 0:  # –µ—Å–ª–∏ –∫–æ–ª-–≤–æ —ç–ª-—Ç–æ–≤ –∫—Ä–∞—Ç–Ω–æ n

        # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤
        l1 = [[0] * n for _ in range(len(s) // n)]

        cnt = 0
        for i in range(len(s) // n):
            for j in range(n):
                l1[i][j] = s[cnt]
                cnt += 1
        return l1

    elif len(s) % n != 0:  # –µ—Å–ª–∏ –∫–æ–ª-–≤–æ —ç–ª-—Ç–æ–≤ –Ω–µ –∫—Ä–∞—Ç–Ω–æ n
        # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤
        l1 = [[0] * n for _ in range(len(s) // n)]

        cnt = 0
        for i in range(len(s) // n):
            for j in range(n):
                l1[i][j] = s[cnt]
                cnt += 1

        l1.append(s[cnt:])    # —Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π –≤–ª–æ–∂–µ–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return l1


# –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
s1 = input().split()
n1 = int(input())


# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(chunked(s1, n1))
# ----------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------------------


def chunked(symbols, n):
    result = []
    for i in range(0, len(symbols), n):
        result.append(symbols[i:i + n])
    return result


symbols = input().split()
n = int(input())

print(chunked(symbols, n))

# --------------------------–∏–∑ –∫–æ–º–µ–Ω—Ç–æ–≤-----------------------------


def chunked(symb, n):
    symb = symb.split()
    list1 = []
    n = int(n)
    for i in range(len(symb)):
        if i % n == 0:
            list1.append([symb[i]])
        elif i % n != 0:
            list1[-1].extend(symb[i])
    return list1


print(chunked(input(), input()))

# --------------------------–∏–∑ –∫–æ–º–µ–Ω—Ç–æ–≤ 2-----------------------------


def chunked(a, n):
    s = []
    for i in range(0, len(a), n):
        s.append(list(a[i:i+n]))
    return (s)


print(chunked(input().split(), int(input())))
# --------------------------–∏–∑ –∫–æ–º–µ–Ω—Ç–æ–≤-----------------------------


# –ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞ üå∂Ô∏èüå∂Ô∏è
# 14 879
#


# ---------------------------------------------------------------
# _______________________________________________________________


# –ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞?
#
#
n = 5
a = [[19, 21, 33, 78, 99],
     [41, 53, 66, 98, 76],
     [79, 80, 90, 60, 20],
     [33, 11, 45, 67, 90],
     [45, 67, 12, 98, 23]]

maximum = -1
minimum = 100

for i in range(n):
    if a[i][i] > maximum:
        maximum = a[i][i]
    if a[i][n - i - 1] < minimum:
        minimum = a[i][n - i - 1]
print(minimum + maximum)

# ---------------------------------------------------------------
# _______________________________________________________________


# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 1
# 18 209
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ.
# –î–∞–ª–µ–µ –≤–≤–æ–¥—è—Ç—Å—è —Å–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã ‚Äî —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ; –ø–æ–¥—Ä—è–¥ –∏–¥—É—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π, –∏ —Ç.–¥.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã.

row = int(input())
col = int(input())

# –ß—Ç–æ–±—ã –°–û–ó–î–ê–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–û –ú–ê–¢–†–ò–¶–£, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∞ –∑–∞—Ç–µ–º –≤ —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫ –Ω–µ–º—É –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ append().
matrix = [[0] * col for i in range(row)]

# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
for i in range(row):
    for j in range(col):
        matrix[i][j] = input()

# –¢–ê–ë–õ–ò–ß–ù–´–ô –í–´–í–û–î –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ —ç–∫—Ä–∞–Ω
for i in range(len(matrix)):         # len(matrix) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ –ê
    # len(matrix[i]) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ i
    for j in range(len(matrix[i])):
        print(matrix[i][j], end=' ')
    print()                     # –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

# ---------------------------------------------------------------


def input_matrix(rows, cols):
    matrix = [[input() for _ in range(cols)] for _ in range(rows)]
    return matrix


def print_matrix(matrix):
    for r in range(len(matrix)):
        print(*matrix[r])
    return None


n, m = int(input()), int(input())
print_matrix(input_matrix(n, m))

# _______________________________________________________________


# –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É 2
# 17 298
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ. –î–∞–ª–µ–µ –≤–≤–æ–¥—è—Ç—Å—è —Å–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã ‚Äî —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ; –ø–æ–¥—Ä—è–¥ –∏–¥—É—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π, –∏ —Ç.–¥.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã, –≤—ã–≤–æ–¥–∏—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∏ —Å–Ω–æ–≤–∞ —Ç—É –∂–µ –º–∞—Ç—Ä–∏—Ü—É, –Ω–æ —É–∂–µ –ø–æ–º–µ–Ω—è–≤ –º–µ—Å—Ç–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

row = int(input())
col = int(input())

# –ß—Ç–æ–±—ã –°–û–ó–î–ê–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–û –ú–ê–¢–†–ò–¶–£, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∞ –∑–∞—Ç–µ–º –≤ —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫ –Ω–µ–º—É –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ append().
matrix = [[0] * col for i in range(row)]

# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
for i in range(row):
    for j in range(col):
        matrix[i][j] = input()

# –¢–ê–ë–õ–ò–ß–ù–´–ô –í–´–í–û–î –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ —ç–∫—Ä–∞–Ω
for r in range(row):
    for c in range(col):
        print(matrix[r][c], end=' ')
    print()

print()

for c in range(col):
    for r in range(row):
        print(matrix[r][c], end=' ')
    print()


# ---------------------------------------------------------------
# _______________________________________________________________


# –°–ª–µ–¥ –º–∞—Ç—Ä–∏—Ü—ã
#  17 292
# –°–ª–µ–¥–æ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.

row = int(input())    # —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –∫–≤.–º–∞—Ç—Ä–∏—Ü—ã
col = row
matrix = [[0] * col for i in range(row)]   # —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É


# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
for i in range(row):
    matrix[i] = input().split()

# —Å—É–º–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
total = 0
for i in range(row):
    total += int(matrix[i][i])

print(total)
# ---------------------------------------------------------------
# _______________________________________________________________


# –ë–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
# 16 878
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, –±–æ–ª—å—à–∏—Ö —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.


row = int(input())
col = row
matrix = [[0] * col for i in range(row)]   # —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É

# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# for i in range(row):
#        matrix[i] = input().split()
#        matrix[i] = list(map(int, matrix[i]))     # –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è map() –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
matrix = [list(map(int, input().split())) for i in range(row)]

mean = []
cnt = 0
# –≤—ã—á–∏—Å–ª—è–µ–º  —Å—Ä.–∞—Ä–∏—Ñ–º –≤ —Å—Ç—Ä–æ–∫
for i in range(row):
    mean.append(sum(matrix[i]) / len(matrix[i]))
    for j in range(row):
        if matrix[i][j] > mean[i]:
            cnt += 1
    print(cnt)
    cnt = 0

# ---------------------------------------------------------------
# _______________________________________________________________


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 1
# 16 668
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.


row = int(input())
col = row

# –°–û–ó–î–ê–ï–ú –ú–ê–¢–†–ò–¶–£ (–∑–∞–ø–æ–ª–Ω–µ–Ω—É—é –Ω—É–ª—è–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç—Ä–∏—Ü—ã)
matrix = [[0] * col for i in range(row)]

# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è map() –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
matrix = [list(map(int, input().split())) for i in range(row)]

mx = -1000000
# –≤—ã—á–∏—Å–ª—è–µ–º  —Å—Ä.–∞—Ä–∏—Ñ–º –≤ —Å—Ç—Ä–æ–∫
for i in range(row):
    for j in range(i + 1):
        if matrix[i][j] > mx:
            mx = matrix[i][j]
print(mx)

# -------------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞--------------------------------------
n = int(input())
matrix = []

for _ in range(n):
    row = [int(i) for i in input().split()]
    matrix.append(row)

largest = matrix[0][0]

for i in range(n):
    for j in range(n):
        if i >= j and matrix[i][j] > largest:
            largest = matrix[i][j]

print(largest)
# _______________________________________________________________

#  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2 üå∂Ô∏è
#  16 108
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
n = int(input())
matrix = []

for _ in range(n):
    row = [int(i) for i in input().split()]
    matrix.append(row)

mx = -10000000000
for i in range(n):
    for j in range(n):
        if (i >= j and i + j + 1 <= n) or (i <= j and i + j + 1 >= n):
            if matrix[i][j] > mx:
                mx = matrix[i][j]

print(mx)
# ---------------------------------------------------------------

# _______________________________________________________________


# –°—É–º–º—ã —á–µ—Ç–≤–µ—Ä—Ç–µ–π
# 15 559
# –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–µ—Ç—ã—Ä–µ —á–µ—Ç–≤–µ—Ä—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π –∏ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏: –≤–µ—Ä—Ö–Ω—é—é, –Ω–∏–∂–Ω—é—é, –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é.

n = int(input())
matrix = []

for _ in range(n):
    row = [int(i) for i in input().split()]
    matrix.append(row)


sum1, sum2, sum3, sum4 = 0, 0, 0, 0

mx = matrix[0][0]
for i in range(n):
    for j in range(n):
        if (i < j and i + j + 1 < n):
            sum1 += matrix[i][j]

        elif (i < j and i + j + 1 > n):
            sum2 += matrix[i][j]

        elif (i > j and i + j + 1 > n):
            sum3 += matrix[i][j]

        elif (i > j and i + j + 1 < n):
            sum4 += matrix[i][j]


print('–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum1)
print('–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum2)
print('–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum3)
print('–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum4)


# --------------------- –æ—Ç –ø—Ä–µ–ø–æ–¥–∞------------------------------------------
n = int(input())
matrix = []
quadrants = [['–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', 0],
             ['–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', 0],
             ['–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', 0],
             ['–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', 0]]

for _ in range(n):
    row = [int(i) for i in input().split()]
    matrix.append(row)

for i in range(n):
    for j in range(n):
        if i < j and i + j + 1 < n:
            quadrants[0][1] += matrix[i][j]
        elif i < j and i + j + 1 > n:
            quadrants[1][1] += matrix[i][j]
        elif i > j and i + j + 1 > n:
            quadrants[2][1] += matrix[i][j]
        elif i > j and i + j + 1 < n:
            quadrants[3][1] += matrix[i][j]

for i in range(4):
    print(quadrants[i][0], quadrants[i][1])

# --------------------- –æ—Ç –∫–æ–º–º–æ–≤------------------------------------------
n = int(input())
matrix = [[int(x) for x in input().split()] for _ in range(n)]
print('–í–µ—Ä—Ö–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum(matrix[i][j] for i in range(
    n) for j in range(n) if i < j and i < n-1-j))
print('–ü—Ä–∞–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum(matrix[i][j] for i in range(
    n) for j in range(n) if j > i > n-1-j))
print('–ù–∏–∂–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum(matrix[i][j] for i in range(
    n) for j in range(n) if i > j and i > n-1-j))
print('–õ–µ–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', sum(matrix[i][j]
      for i in range(n) for j in range(n) if n-1-j > i > j))

# _______________________________________________________________

# –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
# 15 895
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ç—Ä–∏—Ü—É mult —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë —Ç–∞–±–ª–∏—Ü–µ–π —É–º–Ω–æ–∂–µ–Ω–∏—è
# –ø–æ —Ñ–æ—Ä–º—É–ª–µ mult[i][j] = i * j.

row = int(input())  # —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫
col = int(input())  # —á–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤

# –°–û–ó–î–ê–ï–ú –ú–ê–¢–†–ò–¶–£ (–∑–∞–ø–æ–ª–Ω–µ–Ω—É—é –Ω—É–ª—è–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç—Ä–∏—Ü—ã)
mult = [[0] * col for i in range(row)]


# –†–ê–ë–û–¢–ê–ï–ú –° –ú–ê–¢–†–ò–¶–ï–ô (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è)
for i in range(row):
    for j in range(col):
        mult[i][j] = i * j

# –í–´–í–û–î–ò–ú –º–∞—Ç—Ä–∏—Ü—É
for i in range(row):
    for j in range(col):
        print(str(mult[i][j]).ljust(3), end=' ')
    print()
# ---------------------------------------------------------------
# –û–±—â–∞—è –∏–¥–µ—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏/—Å–ø–∏—Å–∫–∞–º–∏: —Ä–∞–∑–¥–µ–ª—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –º—É—Ö–∏ –∏ –∫–æ—Ç–ª–µ—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è.
# –ü—Ä–∏ –û–û–ü –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ–±—ä–µ–∫—Ç–æ–º, –Ω–∞—Å –∏ –≥–æ—Ç–æ–≤—è—Ç —É —Ç–∞–∫–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥—É

n, m = int(input()), int(input())
mult = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        mult[i][j] = i * j

for i in range(n):
    for j in range(m):
        print(str(mult[i][j]).ljust(3), end=' ')
    print()
# _______________________________________________________________


# –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ
# 15 494
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ –ø–æ mm —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å—ã (—Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü) –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
# –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –∞ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ —Ä–∞–≤–Ω—ã —Ç–æ —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞.

row = int(input())  # —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫
col = int(input())  # —á–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤

el_max = []

# –°–û–ó–î–ê–ï–ú –ú–ê–¢–†–ò–¶–£ (–∑–∞–ø–æ–ª–Ω–µ–Ω—É—é –Ω—É–ª—è–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç—Ä–∏—Ü—ã)
mult = [[0] * col for i in range(row)]

# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤–≤–µ–¥–µ–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞–º–∏, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
matrix = [list(map(int, input().split())) for i in range(row)]


# –†–ê–ë–û–¢–ê–ï–ú –° –ú–ê–¢–†–ò–¶–ï–ô (–∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞–ª—å–Ω–æ–≥–æ —ç–ª-—Ç–∞)
largest1 = matrix[0][0]  # –ø—Ä–∏–∏–Ω–∏–º–∞–µ–º –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

for i in range(row):
    for j in range(col):

        if matrix[i][j] >= largest1:
            largest1 = matrix[i][j]
            el_max.append([matrix[i][j], i, j])

# –∏—â–µ–º –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª-—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é
for i in range(len(el_max)):
    if el_max[i][0] == largest1:
        print(el_max[i][1], el_max[i][2])  # –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã
        break

# –º–∞–∫—Å–∏–º—É–º –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∏—Å–∫–æ–≤
# max(max(matrix, key=max))
# max(matrix, key=max) –∏—â–µ—Ç "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π" —Å–ø–∏—Å–æ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ. –£—Å–ª–æ–≤–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ -  key=max. –¢–æ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±—É–¥–µ—Ç —Ç–æ—Ç –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–∞–º–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù—É –∞ –¥–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é max() –∫ –Ω–∞—à–µ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É" —Å–ø–∏—Å–∫—É –∏ –¥–æ—Å—Ç–∞—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ


# –í–´–í–û–î–ò–ú –º–∞—Ç—Ä–∏—Ü—É
# for i in range(row):
#     for j in range(col):
#         print(str(mult[i][j]).ljust(3), end=' ')
#     print()

# -----------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞----------------------------------------
n, m = int(input()), int(input())
matrix = [[int(i) for i in input().split()] for _ in range(n)]
row, col = 0, 0

for i in range(n):
    for j in range(m):
        if matrix[i][j] > matrix[row][col]:
            row, col = i, j

print(row, col)
# _______________________________________________________________

# –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
# 15 147
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Å—Ç–æ–ª–±—Ü—ã –≤ –º–∞—Ç—Ä–∏—Ü–µ.

row = int(input())  # —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫
col = int(input())  # —á–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤

# –°–û–ó–î–ê–Ω–∏–µ –∏ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤–≤–µ–¥–µ–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞–º–∏, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
matrix = [list(map(int, input().split())) for i in range(row)]


# –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –æ–±–º–µ–Ω—É—ä
c = input().split()
c1 = int(c[0])
c2 = int(c[1])

# –†–ê–ë–û–¢–ê–ï–ú –° –ú–ê–¢–†–ò–¶–ï–ô (–∏—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞–ª—å–Ω–æ–≥–æ —ç–ª-—Ç–∞)
for i in range(row):
    for j in range(col):
        if j == c1:
            matrix[i][c1], matrix[i][c2] = matrix[i][c2], matrix[i][c1]

# –í–´–í–û–î–ò–ú –º–∞—Ç—Ä–∏—Ü—É
for i in range(row):
    for j in range(col):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# ------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞---------------------------------
n, m = int(input()), int(input())
matrix = [input().split() for _ in range(n)]
col1, col2 = [int(i) for i in input().split()]

for i in range(n):
    matrix[i][col1], matrix[i][col2] = matrix[i][col2], matrix[i][col1]

for row in matrix:
    print(*row)
# _______________________________________________________________

# –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
# 15 050
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.

n = int(input())

matrix = [[int(i) for i in input().split()] for _ in range(n)]

flag = False
flag2 = False
for i in range(n):
    for j in range(i):
        if matrix[i][j] != matrix[j][i]:
            flag = False
            flag2 = True
            print('NO')
            break
        else:
            flag = True

    if flag2:
        break


if flag:
    print('YES')

# ------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞----------------------------------
n = int(input())
matrix = [input().split() for _ in range(n)]
result = 'YES'

for i in range(n):
    for j in range(i + 1, n):
        if matrix[i][j] != matrix[j][i]:
            result = 'NO'
            break
    if result == 'NO':
        break

print(result)
# _______________________________________________________________

# –û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
# 14 581
# –î–∞–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Ç–æ—è—â–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∏ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ —Å—Ç–æ–ª–±—Ü–µ (—Ç–æ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –∏ –Ω–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏).
n = int(input())
matrix = [input().split() for _ in range(n)]

for i in range(n):
    matrix[n - i - 1][i], matrix[i][i] = matrix[i][i], matrix[n - i - 1][i]

for row in matrix:
    print(*row)
# ---------------------------------------------------------------

# _______________________________________________________________

# –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
# 14 653
# –î–∞–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ—ë —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏.
# put your python code here
n = int(input())
matrix = [input().split() for _ in range(n)]

for i in range(n // 2):
    matrix[i], matrix[n - i - 1] = matrix[n - i - 1], matrix[i]

for row in matrix:
    print(*row)

# ------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞---------------------------------
n = int(input())

matrix = [[int(item) for item in input().split()] for _ in range(n)]
matrix.reverse()

for row in matrix:
    print(*row)
# _______________________________________________________________

# –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã
#  14 119
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —á–∏—Å–µ–ª –Ω–∞ 90‚àò90‚àò –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ.

n = int(input())

# —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
matrix = [input().split() for _ in range(n)]


# –∑–µ—Ä–∫–∞–ª–∏–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
for i in range(n // 2):
    matrix[i], matrix[n - i - 1] = matrix[n - i - 1], matrix[i]

# –∑–µ—Ä–∫–∞–ª–∏–º –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
for i in range(n):
    for j in range(i):
        matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]

# –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É
for row in matrix:
    print(*row)
# ---------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞------------------------------------
# –î–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏: –≤ –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Ö–æ–¥–µ –º—ã –≤ —Å—Ç–∞—Ä–æ–π –º–∞—Ç—Ä–∏—Ü–µ —Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ–Ω—Ü–∞, –∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—á–∞–ª–∞. –ò —Ç–∞–∫ –¥–æ –∫–æ–Ω—Ü–∞. –î–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫.
# -----------------------------------------------------------------
n = int(input())
matrix = [input().split() for _ in range(n)]
result = [[0] * n for _ in range(n)]

for i in range(n):
    for j in range(n):
        result[i][j] = matrix[n - j - 1][i]

for row in result:
    print(*row)
# _______________________________________________________________
# –•–æ–¥—ã –∫–æ–Ω—è
# 13 225
# –ù–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ 8√ó88√ó8 —Å—Ç–æ–∏—Ç –∫–æ–Ω—å. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—è –Ω–∞ –¥–æ—Å–∫–µ –∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç –∫–æ–Ω—å. –ö–ª–µ—Ç–∫—É, –≥–¥–µ —Å—Ç–æ–∏—Ç –∫–æ–Ω—å, –æ—Ç–º–µ—Ç—å—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –±—É–∫–≤–æ–π N, –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç –∫–æ–Ω—å, –æ—Ç–º–µ—Ç—å—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ *, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ—á–∫–∞–º–∏.


# ---------------------------------------------------------------

# _______________________________________________________________

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1
# 13 253
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë —á–∏—Å–ª–∞–º–∏ –æ—Ç 11 –¥–æ n‚ãÖmn‚ãÖm –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.

n, m = [int(i) for i in input().split()]

# —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
matrix = [[0] * m for _ in range(n)]

cnt = 0
for i in range(n):
    for j in range(m):
        matrix[i][j] = cnt
        cnt += 1

# –í–´–í–û–î–ò–ú –º–∞—Ç—Ä–∏—Ü—É
for i in range(row):
    for j in range(col):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# ---------------------------------------------------------------
n, m = [int(i) for i in input().split()]
matrix = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix[i][j] = i * m + j + 1    #

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# _______________________________________________________________


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
# 13 273
n, m = [int(i) for i in input().split()]

matrix = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix[i][j] = j * m + i + 1    #

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ i –∏ j, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º i + j + 1 = n (–∏–ª–∏ j = n - i - 1), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.
# ---------------------------------------------------------------

# _______________________________________________________________

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 3
# 13 233
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ónn√ón, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
n = int(input())

matrix = [[0] * n for _ in range(n)]

for i in range(n):                     # –∑–∞–ø–æ–ª–Ω—è–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å 1, –∏ –ø–æ–±–æ—á–Ω—É—é 1
    matrix[i][i] = 1
    matrix[i][n-i-1] = 1

for i in range(n):
    for j in range(n):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# ---------------------------------------------------------------

# _______________________________________________________________

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 4
#  13 057
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ónn√ón, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
n = int(input())

matrix = [[0] * n for _ in range(n)]

for i in range(n):
    for j in range(n):
        if (i <= j and i <= n - 1 - j) or ((i >= j and i >= n - 1 - j)):
            matrix[i][j] = 1   #


for i in range(n):
    for j in range(n):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# ---------------------------------------------------------------

# _______________________________________________________________

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 5 üå∂Ô∏è
# 12 629
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.

n, m = [int(i) for i in input().split()]
matrix = [[0] * m for _ in range(n)]

matrix[0] = list(range(1, m + 1))
for i in range(1, n):

    matrix[i] = matrix[i - 1][1:] + matrix[i - 1][:1]


for row in matrix:
    print(*row)

# ---------------------------------------------------------------
n, m = [int(i) for i in input().split()]
matrix = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix[i][j] = (i + j) % m + 1

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# _______________________________________________________________


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π
# 12 698
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë "–∑–º–µ–π–∫–æ–π" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.

# —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n, m = [int(i) for i in input().split()]

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –º–∞—Ç—Ä–∏—Ü—ã
matrix = [[0] * m for _ in range(n)]

# –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º
for i in range(n):
    for j in range(m):

        if i % 2 == 0:  # –µ—Å–ª–∏ —á–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            matrix[i][j] = i * m + j + 1
        elif i % 2:    # –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            matrix[i][j] = i * m - j + m

            # –∏–ª–∏ –±–µ–∑ if-elif
            # t[i][j] = m * i + ((i + 1) % 2) * (j + 1) + (i % 2) * (m - j)
            # matrix[i].reverse()
            # —Ç–∞–∫ –∂–µ –†–µ–≤–µ—Ä—Å –ø–æ —á—ë—Ç–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ [::(-1)** i ] )
            # [::i%2*-2+1] —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–æ–±–æ—Ä–æ—Ç –ø—Ä–∏ –Ω–µ—á–µ—Ç–Ω–æ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ i

# –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# --------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞------------------------------------
n, m = [int(i) for i in input().split()]
matrix = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        matrix[i][j] = i * m + j + 1
    if i % 2:
        matrix[i].reverse()

for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()

# _______________________________________________________________

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏ üå∂Ô∏è
# 11 210
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë "–¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.

# —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n, m = [int(i) for i in input().split()]

# —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –º–∞—Ç—Ä–∏—Ü—ã
matrix = [[0] * m for _ in range(n)]

# –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º
cnt = 1
for k in range(1, n + m + 1):
    for i in range(n):
        for j in range(m):
            if i + j + 1 == k:
                matrix[i][j] = cnt
                cnt += 1

# –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()

# ---------------------------------------------------------------

# _______________________________________________________________


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üòàüòà
# 9 611
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ nn –∏ mm. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ómn√óm, –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë "—Å–ø–∏—Ä–∞–ª—å—é" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.

# ---------------------------------------------------------------
# put your python code here
n, m = [int(i) for i in input().split()]


# —Å–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
matrix = [[0] * m for _ in range(n)]

# –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏ —à–∞–≥–∞
i, j = 0, 0
di, dj = 0, 1


# –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ n * m

for number in range(1, n * m + 1):
    matrix[i][j] = number
    if matrix[(i + di) % n][(j + dj) % m]:
        di, dj = dj, -di

    i += di
    j += dj

# –≤—ã–≤–æ–¥–∏–º –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω

# –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
for i in range(n):
    for j in range(m):
        print(str(matrix[i][j]).ljust(3), end=' ')
    print()
# _______________________________________________________________

# –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
# 12 414
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü.

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n, m = [int(i) for i in input().split()]

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã
matrix1 = [[int(item) for item in input().split()] for _ in range(n)]
input()
matrix2 = [[int(item) for item in input().split()] for _ in range(n)]

# —Å–æ–∑–¥–∞–µ–º –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–£–Æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
result = [[0] * m for _ in range(n)]

# —Å–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
for i in range(n):
    for j in range(m):

        result[i][j] = matrix1[i][j] + matrix2[i][j]


# –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
for i in range(n):
    for j in range(m):
        print(str(result[i][j]).ljust(3), end=' ')
    print()
# ---------------------------------------------------------------

# _______________________________________________________________


# –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è
# 11 394
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã.


# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n, m1 = [int(i) for i in input().split()]

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–µ—Ä–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
matrix1 = [[int(item) for item in input().split()] for _ in range(n)]
input()

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ m –∏ k —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
m2, k = [int(i) for i in input().split()]
# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Ç–æ—Ä—É—é –º–∞—Ç—Ä–∏—Ü—É
matrix2 = [[int(item) for item in input().split()] for _ in range(m2)]


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏—è
if m1 == m2:

    # —Å–æ–∑–¥–∞–µ–º –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–£–Æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
    result = [[0] * k for _ in range(n)]

    # –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    sum = 0
    for i in range(n):
        for j in range(n):
            for r in range(m1):

                sum += matrix1[i][r] * matrix2[r][j]
            result[i][j] = sum
            sum = 0

    # –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
    for i in range(n):
        for j in range(k):
            print(str(result[i][j]).ljust(3), end=' ')
        print()


else:
    print('–î–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç—å')


# ---------------------------------------------------------------

# _______________________________________________________________

# –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å üå∂Ô∏è
# 10 785
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤–æ–¥–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ mm-—É—é —Å—Ç–µ–ø–µ–Ω—å.

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n = int(input())

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—Ç—Ä–∏—Ü—É
matrix1 = [[int(item) for item in input().split()] for _ in range(n)]

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–µ–ø–µ–Ω—å
exp = int(input())

matrix2 = matrix1.copy()


# —Ü–∏–∫–ª –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å
for k in range(2, exp + 1):

    # —Å–æ–∑–¥–∞–µ–º –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–£–Æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
    result = [[0] * n for _ in range(n)]

    # —Ü–∏–∫–ª—ã –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
    sum = 0
    for i in range(n):
        for j in range(n):
            for r in range(n):

                sum += matrix1[i][r] * matrix2[r][j]
            result[i][j] = sum
            sum = 0

    matrix2 = result.copy()

# –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã
for i in range(n):
    for j in range(n):
        print(str(result[i][j]).ljust(3), end=' ')
    print()


# ----------------------–û–¢ –ü–†–ï–ü–û–î–ê-----------------------------------
def square_matrix_mult(matrixA, matrixB, size):
    matrixC = [[0] * size for _ in range(size)]
    for i in range(size):
        for j in range(size):
            for q in range(size):
                matrixC[i][j] += matrixA[i][q] * matrixB[q][j]
    return matrixC


n = int(input())
matrix = [[int(i) for i in input().split()] for _ in range(n)]
m = int(input())
powered_matrix = matrix.copy()

for _ in range(m - 1):
    powered_matrix = square_matrix_mult(matrix, powered_matrix, n)

for row in powered_matrix:
    print(*row)


# --------------------–≠ –ö –ó –ê –ú –ï –ù----------------------------

# _______________________________________________________________


# –ö–∞–∂–¥—ã–π n-—ã–π —ç–ª–µ–º–µ–Ω—Ç
# 9 914
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã –∏ —á–∏—Å–ª–æ nn. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–ø–∏—Å–∫–∏ —Ç–∞–∫, —á—Ç–æ nn –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ä–∞–∑–Ω—ã–º –ø–æ–¥—Å–ø–∏—Å–∫–∞–º.

s = [int(i) for i in input().split()]
n = int(input())

l = [[] * len(s) // n + [] * len(s) % n]


# _______________________________________________________________

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2
# 9 880
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
n = int(input())

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–≤–µ –º–∞—Ç—Ä–∏—Ü—ã
matrix = [[int(item) for item in input().split()] for _ in range(n)]

#
mx = matrix[0][0]

for i in range(n):
    for j in range(n):
        if (i >= j and i >= n - 1 - j) or (i <= j and i >= n - 1 - j):
            if matrix[i][j] > mx:
                mx = matrix[i][j]

print(mx)
# ---------------------------------------------------------------
n = int(input())
mtr = [[int(i) for i in input().split()] for _ in range(n)]
mx = mtr[0][-1]

for i in range(n):
    for j in range(n - 1 - i, n):
        if mx < mtr[i][j]:
            mx = mtr[i][j]

print(mx)
# _______________________________________________________________
# –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
# 9 997
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É.

n = int(input())
# —Å—á–∏—Ç—ã–≤–∞–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞—Ç—Ä–∏—Üe
matrix = [[int(item) for item in input().split()] for _ in range(n)]


# —Å–æ–∑–¥–∞–µ–º –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–£–Æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏
res = [[0] * n for _ in range(n)]

for i in range(n):
    for j in range(n):
        # res[i][j] = matrix[i][n-1-j]   # —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥
        res[i][j] = matrix[j][i]

for i in range(n):
    for j in range(n):
        print(str(res[i][j]).ljust(3), end=' ')
    print()


# ---------------------------------------------------------------

# _______________________________________________________________

# –°–Ω–µ–∂–∏–Ω–∫–∞
# 9 885
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ónn√ón –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë —Å–∏–º–≤–æ–ª–∞–º–∏ . . –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ * —Å—Ä–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü –º–∞—Ç—Ä–∏—Ü—ã, –≥–ª–∞–≤–Ω—É—é –∏ –ø–æ–±–æ—á–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å –º–∞—Ç—Ä–∏—Ü—ã. –í—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–±–µ–ª–∞–º–∏.


# ---------------------------------------------------------------

# _______________________________________________________________


#
# —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–æ—Ä—Ç–µ–∂–∏
#
tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'),
          (1,), (), (), ('d',), ('', ''), ()]
non_empty_tuples = [i for i in tuples if i]

print(non_empty_tuples)

# _______________________________________________________________

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è new_tuples, —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ tuples —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 100100.
# 14 835
#  –ó–ê–ú–ï–ù–ê –≠–õ–ï–ú–ï–ù–¢–ê –í –ö–û–†–¢–ï–ñ–ï
tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90),
          (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
new_tuples = [i[:-1] + (100,) for i in tuples]
print(new_tuples)
# ---------------------------------------------------------------


#  –ó–ê–ú–ï–ù–ê –≠–õ–ï–ú–ï–ù–¢–ê –í –ö–û–†–¢–ï–ñ–ï
tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90),
          (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
for i in range(len(tuples)):
    tuples[i] = list(tuples[i])
    tuples[i][-1] = 100
    tuples[i] = tuple(tuples[i])
print(tuples)
# ---------------------------------------------------------------

# _______________________________________________________________
#
# 14 632
# –æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ä–µ–¥–Ω–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–æ—Ä—Ç–µ–∂–µ –∫–æ—Ä—Ç–µ–∂–µ–π numbers.
numbers = ((10, 10, 10, 12), (30, 45, 56, 45),
           (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
numbers = list(numbers)
for i in range(len(numbers)):
    numbers[i] = sum(numbers[i]) / len(numbers[i])


print(numbers)
# ---------------------------------------------------------------

# _______________________________________________________________

# –í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã
# 14 086
# –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–±–æ–ª—ã –∏–º–µ–µ—Ç –≤–∏–¥ y =ax2+bx+cy , –≥–¥–µ a‚â†0. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º a,b,c –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤–µ—Ä—à–∏–Ω—É –ø–∞—Ä–∞–±–æ–ª—ã.

a = int(input())
b = int(input())
c = int(input())

parabola = [int(input()) for i in range(3)]

vertex = ((- parabola[1]) / (2 * parabola[0]), (4 * parabola[0]
          * parabola[2] - parabola[1] ** 2) / (4 * parabola[0]))
print(vertex)


# ---------------------------------------------------------------
def parabola_vertex(a, b, c):
    x = -(b / (2 * a))
    y = (4 * a * c - b**2) / (4 * a)
    return x, y


print(parabola_vertex(int(input()), int(input()), int(input())))
# _______________________________________________________________


# –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä
# 13 819
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ö–æ—Ä–æ—à–∏—Å—Ç–æ–≤ –∏ –æ—Ç–ª–∏—á–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ.

n = int(input())
pupil = [tuple(input().split()) for i in range(n)]
for el in pupil:
    print(*el)

print()

excellent_pupil = []
for i in range(len(pupil)):
    if int(pupil[i][1]) > 3:
        excellent_pupil.append(pupil[i])

for el in excellent_pupil:
    print(*el)

# ---------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-------------------------------
students = [tuple(input().split()) for _ in range(int(input()))]

for student in students:
    print(*student)

print()

for name, grade in students:
    if int(grade) > 3:
        print(name, grade)
# _______________________________________________________________


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¢—Ä–∏–±–æ–Ω–∞—á—á–∏
# 13 571
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ nn —á–∏—Å–µ–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢—Ä–∏–±–æ–Ω–∞—á—á–∏.
n = int(input())
f1, f2, f3 = 1, 1, 1
a, b = 0, 0
for i in range(n):
    print(f1, end=' ')
    f1, f2, f3 = f2, f3, f1 + f2 + f3


a, b, *c = range(7)
# __________________________________________________________


# –¢–∏–º—É—Ä –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞
# 12 454
# –ù–∞ –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª–∞—Ö –¢–∏–º—É—Ä –∏ —É—á–µ–Ω–∏–∫–∏ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK —Ä–µ—à–∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ nn —É—á–µ–Ω–∏–∫–æ–≤ —à–∫–æ–ª—ã –ø–æ–µ—Ö–∞–ª–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ –º–æ—Ä–µ, mm —É—á–µ–Ω–∏–∫–æ–≤ —Å—ä–µ–∑–¥–∏–ª–∏ –≤ –¥–µ—Ä–µ–≤–Ω—é, –∞ kk —É—á–µ–Ω–∏–∫–æ–≤ —Å—Ö–æ–¥–∏–ª–∏ –≤ –≥–æ—Ä—ã. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –∏ –≤ –¥–µ—Ä–µ–≤–Ω–µ, –∏ –Ω–∞ –º–æ—Ä–µ –±—ã–ª–∏ xx —É—á–µ–Ω–∏–∫–æ–≤, –∞ –≤ –¥–µ—Ä–µ–≤–Ω–µ –∏ –≤ –≥–æ—Ä–∞—Ö ‚Äî yy —É—á–µ–Ω–∏–∫–æ–≤. –ü–æ–±—ã–≤–∞—Ç—å –∏ –≤ –≥–æ—Ä–∞—Ö, –∏ –Ω–∞ –º–æ—Ä–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–º—É.

n, m, k, x, y, z = [int(input()) for i in range(6)]
print(n + m - x + k + - y + z)


# __________________________________________________________


# –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ üå∂Ô∏è
# 10 547
#

n, m, k, x, y, z, t, a = (int(input()) for i in range(8))
s1 = n + m - x - t
s2 = m + k - y - t
s3 = n + k - z - t
s = (n - s1 - s3 - t) + (m - s1 - s2 - t) + (k - s2 - s3 - t)
print(s)
print(s1 + s2 + s3)
print(a - s - s1 - s2 - s3 - t)
# __________________________________________________________


#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ numbers
# 13 698

numbers = {9089, -67, -32, 1, 78, 23, -65, 99,
           9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
l = [0] * len(numbers)
cnt = 0
for el in numbers:
    l[cnt] = el ** 2
    cnt += 1

sum1 = sum(l)
print(sum1)
# __________________________________________________________


# __________________________________________________________


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
# 13 668
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.

text = set(input())
print(len(text))


# __________________________________________________________


# __________________________________________________________


# –ù–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã
# 13 551
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ü–∏—Ñ—Ä. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –≤ –µ–µ –∑–∞–ø–∏—Å–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–∏—Ñ—Ä –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è?

s = input()
s1 = set(s)
if len(s) == len(s1):
    print('YES')
else:
    print('NO')

# ---------------------------------------------------------
a = input()
print(('NO', 'YES')[len(a) == len(set(a))])
# __________________________________________________________


# __________________________________________________________


# –í—Å–µ 10 —Ü–∏—Ñ—Ä
# 13 309
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –¥–µ—Å—è—Ç—å —Ü–∏—Ñ—Ä?

s1 = input()
s2 = input()

a = list(s1) + list(s2)

b = set(a)


if len(b) == 10:
    print('YES')
else:
    print('NO')

# __________________________________________________________

print(('NO', 'YES')[len(set(input() + input())) == 10])

# ------------------------------------------------------------------
print('YES' if set('0123456789') == set(input() + input()) else 'NO')
# __________________________________________________________


# –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
# 13 358
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ü–∏—Ñ—Ä. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Ü–∏—Ñ—Ä?

s1 = input()
s2 = input()

a = set(s1)
b = set(s2)

if a == b:
    print('YES')
else:
    print('NO')

# __________________________________________________________


# __________________________________________________________


# –¢—Ä–∏ —Å–ª–æ–≤–∞
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä–µ—Ö —Å–ª–æ–≤. –í–µ—Ä–Ω–æ –ª–∏, —á—Ç–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å–ª–æ–≤ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –±—É–∫–≤?
# 13 234

s = input().split()
flag = False

for el in s:
    if set(el) != set(s[0]):
        flag = True
        break

if flag:
    print('NO')
else:
    print('YES')


# ----------------------------------------------------------

y = [set(i) for i in input().split()]
print('YES' if y.count(y[0]) == len(y) else 'NO')
# __________________________________________________________


# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 1
# 13 237
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.

n = int(input())
word_set = set()

for i in range(n):
    word = input().lower()

    for el in word:
        word_set.add((el))
    print(len(word_set))
    word_set.clear()
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 2
# 13 086
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞.

n = int(input())

letter_set = []

for i in range(n):
    word = input().lower()
    letter_set.append(word)

letter_set = set(letter_set)
print(len(letter_set))


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
s = set()
for i in range(int(input())):
    s |= set(input().lower())
print(len(s))
# __________________________________________________________


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞.
# 12 645

text = input().lower()

for el in '.,;:-?!':
    text = text.replace(el, "")

text = text.split()
text = set(text)

print(len(text))


# –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:
# words = re.sub(r'[.,;:-?-!]', '', input())

# (–≥–¥–µ re.sub(pattern, replacement, original_string)
# pattern: –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —à–∞–±–ª–æ–Ω –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –∑–∞–º–µ–Ω–∏—Ç—å.
# replacement: —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å —à–∞–±–ª–æ–Ω.)))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
words = [word.lower().strip('.,;:-?!') for word in input().split()]

print(len(set(words)))
# __________________________________________________________


# –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ —Ä–∞–Ω—å—à–µ?
# 12 463
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —á–∏—Å–ª–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ YES (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ),
# –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ —Ä–∞–Ω–µ–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ NO, –µ—Å–ª–∏ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å.

num = [int(i) for i in input().split()]

repeat_set = set()

for el in num:
    if el not in repeat_set:
        repeat_set.add(el)
        print('NO')
    else:
        print('YES')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö
# 12 776
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —á–∏—Å–ª–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∏ –≤–æ –≤—Ç–æ—Ä–æ–π.

s1 = set([int(i) for i in input().split()])
s2 = set([int(i) for i in input().split()])

s3 = s1 & s2

print(len(s3))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–±—â–∏–µ —á–∏—Å–ª–∞
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è,
# –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∏ –≤–æ –≤—Ç–æ—Ä–æ–π.
# 12 631

s1 = set([int(i) for i in input().split()])
s2 = set([int(i) for i in input().split()])


s3 = s1 & s2
sort_set = sorted(s3)
print(*sort_set, end=' ')

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())

print(*sorted(set1 & set2))
# __________________________________________________________


# –ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
# 12 650
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Ç–æ—Ä–æ–π.

set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())


s3 = sorted(set1 - set2)
print(*s3)
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã
# 12 024
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ–±—â–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —É –≤—Å–µ—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.

n = int(input())
l = []
set1 = set()
set2 = set()

for i in range(n):
    s = list(input())

    set2 = set1

print(*set1)


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã.
# 12 269
n1 = set(input())
n2 = set(input())

if n1.isdisjoint(n2):
    print('NO')
else:
    print('YES')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
print(("YES", "NO")[set(input()).isdisjoint(input())])
# __________________________________________________________


# –í—Å–µ —Ü–∏—Ñ—Ä—ã
# 12 330
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤—Ö–æ–¥—è—Ç –ª–∏ –≤ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –≤—Å–µ —Ü–∏—Ñ—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ—Å—è –≤ –∑–∞–ø–∏—Å–∏ –≤—Ç–æ—Ä–æ–≥–æ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞, —Ç–æ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä) —á–∏—Å–ª–∞ –∏–ª–∏ –Ω–µ—Ç.

n1 = set(input())
n2 = set(input())

if not n1.issuperset(n2):
    print('NO')
else:
    print('YES')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
print(['NO', 'YES'][set(input()) >= set(input())])
# __________________________________________________________


# –£—Ä–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
# –î–∞–Ω—ã –ø–æ 1010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ —É –ø–µ—Ä–≤–æ–≥–æ –∏ —É –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤, –Ω–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞.
# 12 109

grades1 = set(int(i) for i in input().split())
grades2 = set(int(i) for i in input().split())
grades3 = set(int(i) for i in input().split())

grades4 = (grades1.intersection(grades2))
grades4.difference_update(grades3)

print(*sorted(grades4, reverse=True))


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())
set3 = set(int(i) for i in input().split())

print(*sorted(set1 & set2 - set3, reverse=True))
# __________________________________________________________


# –£—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
# 11 663
# –î–∞–Ω—ã –æ—Ü–µ–Ω–∫–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —Ç—Ä—ë—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≤ 1010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ, —á–µ–º —É –¥–≤—É—Ö —É—á–µ–Ω–∏–∫–æ–≤.
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())
set3 = set(int(i) for i in input().split())

set4 = (set1 | set2 | set3) - (set1 & set2 & set3)


print(*sorted(set4))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –£—Ä–æ–∫ —Ñ–∏–∑–∏–∫–∏
# 11 774
# –î–∞–Ω—ã –ø–æ 1010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–∏ —É –ø–µ—Ä–≤–æ–≥–æ, –Ω–∏ —É –≤—Ç–æ—Ä–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())
set3 = set(int(i) for i in input().split())

set4 = set3 - set2 - set1


print(*sorted(set4, reverse=True))


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –£—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏
# 11 684
# –î–∞–Ω—ã –ø–æ 1010-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫, –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤.
set1 = set(int(i) for i in input().split())
set2 = set(int(i) for i in input().split())
set3 = set(int(i) for i in input().split())

set4 = set(range(11)) - (set1 | set2 | set3)


print(*sorted(set4))


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


#  –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å–ø–∏—Å–∫–∞ words. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# 12 049
#
words = ['Plum', 'Grapefruit', 'apple', 'orange', 'pomegranate', 'Cranberry', 'lime',
         'Lemon', 'grapes', 'persimmon', 'tangerine', 'Watermelon', 'currant', 'Almond']

words2 = {el[0].lower() for el in words}

print(*sorted(words2))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Å—Ç—Ä–æ–∫–∏ sentence. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# 11 722
#
sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
l = sentence.split()

text = {word.lower().strip('.,;:-?!()') for word in l}
print(*sorted(text))
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''
a = {i.strip(':,.!?();').lower() for i in sentence.split()}
print(*sorted(a))
# __________________________________________________________


# –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞  —Å—Ç—Ä–æ–∫–∏ sentence –¥–ª–∏–Ω–æ—é –º–µ–Ω—å—à–µ 44 —Å–∏–º–≤–æ–ª–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# 11 665
#
sentence = '''My very photogenic mother died in a freak accident (picnic, lightning) when I was three, and, save for a pocket of warmth in the darkest past, nothing of her subsists within the hollows and dells of memory, over which, if you can still stand my style (I am writing under observation), the sun of my infancy had set: surely, you all know those redolent remnants of day suspended, with the midges, about some hedge in bloom or suddenly entered and traversed by the rambler, at the bottom of a hill, in the summer dusk; a furry warmth, golden midges.'''

word = {el.lower().strip('.,;:-?!()')
        for el in sentence.split() if len(el.strip('.,;:-?!()')) < 4}
print(*sorted(word))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—ã–±—Ä–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ files —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ c —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π. –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤—ã–≤–µ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
#  11 699
#
files = ['python.png', 'qwerty.py', 'stepik.png', 'beegeek.org', 'windows.pnp', 'pen.txt', 'phone.py', 'book.txT', 'board.pNg',
         'keyBoard.jpg', 'Python.PNg', 'apple.jpeg', 'png.png', 'input.tXt', 'split.pop', 'solution.Py', 'stepik.org', 'kotlin.ko', 'github.git']

files_png = {el.lower().strip('.,;:-?!()')
             for el in files if '.png' in el.lower().strip(',;:-?!()')}
print(*sorted(files_png))
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
files = ['python.png', 'qwerty.py', 'stepik.png', 'beegeek.org', 'windows.pnp', 'pen.txt', 'phone.py', 'book.txT', 'board.pNg',
         'keyBoard.jpg', 'Python.PNg', 'apple.jpeg', 'png.png', 'input.tXt', 'split.pop', 'solution.Py', 'stepik.org', 'kotlin.ko', 'github.git']
result = {c.lower() for c in files if c.lower().endswith('.png')}

print(*sorted(result))
# __________________________________________________________


# –ë—É–¥—É—á–∏ –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏, –æ–±—ã—á–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤. –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º–∏, –∞ –∑–Ω–∞—á–∏—Ç –º–æ–≥—É—Ç –±—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.
sentence = 'The cat in the hat had two sidekicks, thing one and thing two.'

words = sentence.lower().replace('.', '').replace(',', '').split()
vowels = ['a', 'e', 'i', 'o', 'u']
consonants = {frozenset(
    {letter for letter in word if letter not in vowels}) for word in words}

print(*consonants, sep='\n')
# __________________________________________________________


# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
# –£—á–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–µ –∏ –ø–æ–ª—É—á–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã:
# –∏–∑ nn —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —É mm –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—ä–µ–ª–∞ —Å–æ–±–∞–∫–∞, —É kk –æ—Ç–∫–ª—é—á–∏–ª–∏ —Å–≤–µ—Ç, –∞ pp —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ—Å—Ç–∏–≥–ª–∏ –æ–±–∞ –Ω–µ—Å—á–∞—Å—Ç—å—è.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã–ø–æ–ª–Ω–∏–ª–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
# 9 784

n, m, k, p = [int(input()) for i in range(4)]

print(n - ((m - p) + (k - p) + p))
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –í–æ—Å—Ö–æ–¥
# 9 816
# –ù–∞ —Å–ø—É—Ç–Ω–∏–∫–µ ¬´–í–æ—Å—Ö–æ–¥¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—é –ø–æ –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è. –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å–ø—É—Ç–Ω–∏–∫–∞, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.

results = [int(i) for i in input().split()]

set_result = set(results)

dif = len(results) - len(set_result)
print(dif)


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ì–æ—Ä–æ–¥–∞
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å—á–∏—Ç—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ —Å–æ–æ–±—â–∞—é—â—É—é —Ä–µ–±—è—Ç–∞–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥–Ω–æ–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤,
# –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö nn —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º, —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∑–≤–∞–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ OK, –µ—Å–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –µ—â—ë –Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏, –∏ REPEAT, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –Ω–∞–∑–≤–∞–Ω.

n = int(input())
citys = [input() for i in range(n)]
set_citys = set(citys)

a = len(set_citys)

city_end = input()
set_citys.update(city_end)

b = len(set_citys)

if (b) == (a):
    print('OK')
else:
    print('REPEAT')
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ
# 9 679
# –†—É—Å–ª–∞–Ω –ø–æ–ª—É—á–∏–ª –≤ –∫–æ–Ω—Ü–µ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –ª–µ—Ç–æ. –¢–µ–ø–µ—Ä—å –µ–º—É –Ω–∞–¥–æ –≤—ã—è—Å–Ω–∏—Ç—å, –∫–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É –Ω–µ–≥–æ –µ—Å—Ç—å. –£ –†—É—Å–ª–∞–Ω–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –µ–≥–æ –¥–æ–º–∞—à–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ, –µ—Å—Ç—å –æ–Ω–∞ —É –†—É—Å–ª–∞–Ω–∞ –∏–ª–∏ –Ω–µ—Ç.
m = int(input())
n = int(input())

librari_home = [input() for i in range(m)]
librari_school = [input() for i in range(n)]

for book in librari_school:
    if book in librari_home:
        print('YES')
    else:
        print('NO')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
m, n = int(input()), int(input())
libr = {input() for _ in range(m)}

for _ in range(n):
    if input() in libr:
        print('YES')
    else:
        print('NO')
# __________________________________________________________


# –°—Ç—Ä–∞–Ω–Ω–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ
#
# –ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ª—é–¥–∏. –ù–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –¢–∏–º—É—Ä ‚Äî –∞–≤—Ç–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¢–∏–º—É—Ä —Ä–µ—à–∞–µ—Ç —Ä–æ–≤–Ω–æ –¥–≤–µ —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. –†–µ—à–∞—è –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–æ—á–∫–µ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è. –î–∞–ª–µ–µ –æ–Ω –¥–µ–ª–∞–µ—Ç –ø–∞—É–∑—É –∏ –±–µ—Ä–µ—Ç—Å—è –∑–∞ –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É. –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–º –ª–∏—Å—Ç–æ—á–∫–µ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–π –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –±–µ—Ä–µ—Ç –µ—â–µ –æ–¥–∏–Ω –ª–∏—Å—Ç–æ–∫ –∏ –≤—ã–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ –≤—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —á–∏—Å–ª–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ª–∏—Å—Ç–æ—á–∫–æ–≤. –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —á–∏—Å–ª–∞ –µ—Å—Ç—å, –¥–µ–Ω—å —É–¥–∞–ª—Å—è, –µ—Å–ª–∏ –æ–±—â–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç, –¢–∏–º—É—Ä —Å—á–∏—Ç–∞–µ—Ç –¥–µ–Ω—å –Ω–µ—É–¥–∞—á–Ω—ã–º.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–µ —á–∏—Å–ª–∞ –¥–≤—É—Ö –ª–∏—Å—Ç–æ—á–∫–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –¥–µ–Ω—å –Ω–µ —É–¥–∞–ª—Å—è üòè
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞, –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–µ—Å—è –Ω–∞ –æ–±–æ–∏—Ö –ª–∏—Å—Ç–∫–∞—Ö –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ä—è–¥–∫–µ, –ª–∏–±–æ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ BAD DAY, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª –Ω–µ—Ç.

l1 = {int(i) for i in input().split()}
l2 = {int(i) for i in input().split()}

set3 = l1 & l2

if len(set3) > 0:
    print(*sorted(set3, reverse=True))
else:
    print('BAD DAY')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 1
#
# –ü—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É BEEGEEK –µ—ë —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–æ –∏ –µ–≥–æ –ø–∞–º—è—Ç—å.

# –ö–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–Ω–∞–¥–æ–ª–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –∑–∞—Ç–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–ª–∂–µ–Ω –∏—Ö –Ω–∞–∑–≤–∞—Ç—å. –ü—Ä–∏—á–µ–º –Ω–µ–≤–∞–∂–Ω–æ, –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –æ–Ω –∏—Ö –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç, –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ–Ω –∏–ª–∏ –Ω–µ—Ç, –≥–ª–∞–≤–Ω–æ–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∑–≤–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –ª–∏—à–Ω–∏—Ö.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–æ—à–µ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏.

l1 = {int(i) for i in input().split()}
l2 = {int(i) for i in input().split()}

if l2.issuperset(l1) and len(l2) <= len(l1):
    print('YES')
else:
    print('NO')

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
print(('NO', 'YES')[set(input().split()) == set(input().split())])
# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 2
# 9 695
#
m, n = int(input()), int(input())

mat = {input() for _ in range(m)}
inf = {input() for _ in range(n)}

print(len(mat - inf))


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 3
# 9 535
# –ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫, –æ–±—É—á–∞—é—â–∏–π—Å—è –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK –∏–∑—É—á–∞–µ—Ç –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –æ–±–∞ —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞. –£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —à–∫–æ–ª—ã –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ –∏–∑—É—á–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–∑–≤–æ–ª—è—é—â—É—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.
m, n = int(input()), int(input())

mat = {input() for _ in range(m)}
inf = {input() for _ in range(n)}

if len(mat - inf) > 0:
    print(len(mat - inf))
else:
    print('NO')

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 4
#
# –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–ø–∏—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤ –∏—Ö —à–∫–æ–ª—ã.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –≤—Å–µ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–ø–æ–º–Ω–∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫.

l1 = {i for i in input().split()}
l2 = {i for i in input().split()}

set3 = l1 | l2
print(*sorted(set3))

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 5 üå∂Ô∏è
# 9 442
# –ö–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫, –æ–±—É—á–∞—é—â–∏–π—Å—è –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK –∏–∑—É—á–∞–µ—Ç –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫—É, –ª–∏–±–æ –æ–±–∞ —ç—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞. –£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —à–∫–æ–ª—ã –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç. –°–ª—É—á–∞–π–Ω–æ —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–ª–∏—Å—å.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –≤—ã—è—Å–Ω–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.
m, n = int(input()), int(input())

mat_inf = [input() for _ in range(m + n) if input()]

mat_inf.sort()
l = []
i = 0
while i < len(mat_inf):
    # for i in range(len(mat_inf) - 1):
    if mat_inf[i] == mat_inf[i + 1]:
        mat_inf.pop(i)
        mat_inf.pop(i + 1)
    i += 1

print(len(mat_inf))
# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤-----------------------------
m, n = int(input()), int(input())
a = [input() for _ in range(m+n)]
k = set(a)
l = len(k) - (len(a) - len(k))
if l > 0:
    print(l)
else:
    print("NO")

# -------------------------------------------------
lst = [input() for _ in range(int(input()) + int(input()))]
print(len(set(lst)) - (len(lst) - len(set(lst))) or 'NO')
# __________________________________________________________


# –û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ BEEGEEK 6 üå∂Ô∏è
#
# –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –∏–∑ –µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –µ—Å—Ç—å –ª–∏—Å—Ç–æ–∫ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–∞—Ö.

n = int(input())
res = {input() for i in range(int(input()))}

for i in range(n - 1):
    res &= {input() for j in range(int(input()))}

print(*sorted(res), sep='\n')
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# 12 608
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —á–µ–π –Ω–æ–º–µ—Ä –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 88.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.

users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
         {'name': 'Helga', 'phone': '555-1618', 'email': 'helga@mail.net'},
         {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
         {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
         {'name': 'Ruslan', 'phone': '422-145-9098',
             'email': 'rus-lan.cha@yandex.ru'},
         {'name': 'John', 'phone': '233-421-32', 'email': ''},
         {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
         {'name': 'Alina', 'phone': '+7948-799-2434', 'email': 'ali.ch.b@gmail.com'},
         {'name': 'Robert', 'phone': '420-2011', 'email': ''},
         {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
         {'name': 'Khabib', 'phone': '+7995-600-9080',
             'email': 'kh.nurmag@gmail.com'},
         {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
         {'name': 'Roman', 'phone': '+7459-145-8059', 'email': 'roma988@mail.ru'},
         {'name': 'Maria', 'phone': '12-129-3148',
             'email': 'm.sharapova@gmail.com'},
         {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
         {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]

l = []

for el in users:
    if el['phone'][-1] == '8':
        l.append(el['name'])

l.sort()
print(*l, end=' ')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

result = [user['name'] for user in users if user['phone'].endswith('8')]

print(*sorted(result))
# __________________________________________________________


#
# 12 340
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ), —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–ª—é—á email –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
users = [{'name': 'Todd', 'phone': '551-1414', 'email': 'todd@gmail.com'},
         {'name': 'Helga', 'phone': '555-1618'},
         {'name': 'Olivia', 'phone': '449-3141', 'email': ''},
         {'name': 'LJ', 'phone': '555-2718', 'email': 'lj@gmail.net'},
         {'name': 'Ruslan', 'phone': '422-145-9098',
             'email': 'rus-lan.cha@yandex.ru'},
         {'name': 'John', 'phone': '233-421-32', 'email': ''},
         {'name': 'Lara', 'phone': '+7998-676-2532', 'email': 'g.lara89@gmail.com'},
         {'name': 'Alina', 'phone': '+7948-799-2434'},
         {'name': 'Robert', 'phone': '420-2011', 'email': ''},
         {'name': 'Riyad', 'phone': '128-8890-128', 'email': 'r.mahrez@mail.net'},
         {'name': 'Khabib', 'phone': '+7995-600-9080',
             'email': 'kh.nurmag@gmail.com'},
         {'name': 'Olga', 'phone': '6449-314-1213', 'email': ''},
         {'name': 'Roman', 'phone': '+7459-145-8059'},
         {'name': 'Maria', 'phone': '12-129-3148',
             'email': 'm.sharapova@gmail.com'},
         {'name': 'Fedor', 'phone': '+7445-341-0545', 'email': ''},
         {'name': 'Tim', 'phone': '242-449-3141', 'email': 'timm.ggg@yandex.ru'}]

result = [user['name']
          for user in users if ('email' not in user) or user['email'] == '']
print(*sorted(result), sep=' ')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
# 12 223
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤ —á–∏—Å–ª–µ –Ω–∞ —Å–ª–æ–≤–∞:

dict1 = {
    0: 'zero',
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine'}

res = [int(i) for i in input()]

for el in res:
    print(dict1[el], end=' ')

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö
# 12 211
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –Ω–æ–º–µ—Ä—É –∫—É—Ä—Å–∞ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –∫—É—Ä—Å–µ.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞, –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ format() –∏–ª–∏ f-—Å—Ç—Ä–æ–∫–∏.


dict1 = {'CS101': [3004, '–•–∞–π–Ω—Å', '8:00'],
         'CS102': [4501, '–ê–ª—å–≤–∞—Ä–∞–¥–æ', '9:00'],
         'CS103': [6755, '–†–∏—á', '10:00'],
         'NT110': [1244, '–ë–µ—Ä–∫', '11:00'],
         'CM241': [1411, '–õ–∏', '13:00']
         }


n = input()
print(n, ": {}, {}, {}".format(dict1[n][0], dict1[n][1], dict1[n][2]), sep='')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
courses = {
    "CS101": (3004, '–•–∞–π–Ω—Å', '8:00'),
    "CS102": (4501, '–ê–ª—å–≤–∞—Ä–∞–¥–æ', '9:00'),
    "CS103": (6755, '–†–∏—á', '10:00'),
    "NT110": (1244, '–ë–µ—Ä–∫', '11:00'),
    "CM241": (1411, '–õ–∏', '13:00')
}

s = input()
print('{}: {}, {}, {}'.format(s, *courses[s]))

# -----------------–∏–∑ –∫–æ–º–º–æ–≤, —á–µ—Ä–µ–∑ f-—Å—Ç—Ä–æ–∫–∏ -----------------------------
num = {
    "CS101": "3004, –•–∞–π–Ω—Å, 8:00",
    "CS102": "4501, –ê–ª—å–≤–∞—Ä–∞–¥–æ, 9:00",
    "CS103": "6755, –†–∏—á, 10:00",
    "NT110": "1244, –ë–µ—Ä–∫, 11:00",
    "CM241": "1411, –õ–∏, 13:00"
}
s = input()
print(f'{s}: {num[s]}')
# __________________________________________________________


# –ù–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# 11 622
# –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ—á–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –ø–æ–º–æ—â—å—é —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ü–æ—Å–∫–æ–ª—å–∫—É —Å –∫–∞–∂–¥–æ–π –∫–ª–∞–≤–∏—à–µ–π —Å–≤—è–∑–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–≤, –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±—É–∫–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à. –ü—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ —Ü–∏—Ñ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª, —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–ª—è —ç—Ç–æ–π –∫–ª–∞–≤–∏—à–∏. –ù–∞–∂–∞—Ç–∏–µ —Ü–∏—Ñ—Ä—ã 2,3,42,3,4 –∏–ª–∏ 55 —Ä–∞–∑ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä–æ–π, —Ç—Ä–µ—Ç–∏–π, —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∏–ª–∏ –ø—è—Ç—ã–π —Å–∏–º–≤–æ–ª –∫–ª–∞–≤–∏—à–∏. T9 –¢9
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–π –≤—ã—à–µ —Ç–∞–±–ª–∏—Ü–µ.
dict1 = {
    1: '.,?!:',
    2: 'ABC',
    3: 'DEF',
    4: 'GHI',
    5: 'JKL',
    6: 'MNO',
    7: 'PQRS',
    8: 'TUV',
    9: 'WXYZ',
    0: ' '}


l = list(input().replace('"', '').upper())
cnt = 1
for el in l:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ l
    for i in dict1:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        if el in dict1[i]:
            s1 = dict1[i]
            while el != s1[0]:
                cnt += 1
                s1 = s1[1:]
            button = i
    for _ in range(cnt):
        print(button, end='')
    cnt = 1

# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 1-----------------------------
keyboard = {
    "1": ".,?!:",
    "2": "ABC",
    "3": "DEF",
    "4": "GHI",
    "5": "JKL",
    "6": "MNO",
    "7": "PQRS",
    "8": "TUV",
    "9": "WXYZ",
    "0": " "
}
word = input().upper()
for letter in word:
    for key, val in keyboard.items():
        print(key*(val.find(letter) + 1), end='')
# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 2-----------------------------
num = {".": '1', ",": '11', "?": '111', "!": '1111', ":": '11111',
       "A": '2', "B": '22', "C": '222',
       "D": '3', "E": '33', "F": '333',
       "G": '4', "H": '44', "I": '444',
       "J": '5', "K": '55', "L": '555',
       "M": '6', "N": '66', "O": '666',
       "P": '7', "Q": '77', "R": '777', "S": '7777',
       "T": '8', "U": '88', "V": '888',
       "W": '9', "X": '99', "Y": '999', "Z": '9999',
       " ": '0'}

for i in input().upper():
    print(num.get(i, ''), end='')

# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è d. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª i –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ,
# –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
# –¢–µ–ø–µ—Ä—å –∫–æ–¥ —Å—Ç–∞–ª –±–æ–ª–µ–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–≤–æ–¥–æ–≤.

# v2.
# s = input().upper()
# for i in s:
#    if i in d:
#        print(d[i], end='')
# __________________________________________________________


# –ö–æ–¥ –ú–æ—Ä–∑–µ
# 11 494
# –ö–æ–¥ –ú–æ—Ä–∑–µ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∏—Ä–µ –∏ —Ç–æ—á–∫–∏.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–¥–æ–º –ú–æ—Ä–∑–µ.

letters = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789']
morse = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...',
         '-', '..-', '...-', '.--', '-..-', '-.--', '--..', '-----', '.----', '..---', '...--', '....-', '.....', '-....', '--...', '---..', '----.']

dict1 = dict(zip(letters, morse))  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ

s = input().upper()  # –≤–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
s1 = tuple(c for c in s if c.isalnum())

for el in s1:
    print(dict1[el],  end=' ')


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
letters = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789']
morse = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...',
         '-', '..-', '...-', '.--', '-..-', '-.--', '--..', '-----', '.----', '..---', '...--', '....-', '.....', '-....', '--...', '---..', '----.']
mydict = dict(zip(letters, morse))
word = input().upper()

for c in word:
    if c in mydict:
        print(mydict[c], end=' ')

# __________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–∏ ‚Äì —á–∏—Å–ª–∞ –æ—Ç 11 –¥–æ 1515 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∫–≤–∞–¥—Ä–∞—Ç—ã –∫–ª—é—á–µ–π.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.
# 11 786
#
result = {}
for i in range(1, 16):
    result[i] = i * i

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------

# __________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –æ–±—ä–µ–¥–∏–Ω–∏–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π dict1 –∏ dict2 –ø–æ –∫–ª—é—á–∞–º, —Å–∫–ª–∞–¥—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –∫–ª—é—á—É, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ä—è—Ö. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result.
# 11 226
#
dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45,
         'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777,
         'c': 12, 'p': 123, 'w': 111, 'z': 666}
result = {}
result = dict1.copy()

for key, value in dict2.items():
    if key in dict1:
        result[key] += value
    else:
        result.update({key: value})

print(result)
# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
dict1 = {'a': 100, 'z': 333, 'b': 200, 'c': 300, 'd': 45,
         'e': 98, 't': 76, 'q': 34, 'f': 90, 'm': 230}
dict2 = {'a': 300, 'b': 200, 'd': 400, 't': 777,
         'c': 12, 'p': 123, 'w': 111, 'z': 666}

result = dict1.copy()
for key, value in dict2.items():
    result[key] = result.get(key, 0) + value
# __________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏ text –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π.
# –ø—É—Å—Ç—å –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª text , –≥–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ. –ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ –∏–∑ —á–∏—Å–µ–ª. gjdnjhz.obtcz xbckf
#
text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'

result = {}

text1 = set(text)
text1 = ''.join(list(text))

for el in text1:
    result[el] = text.count(el)

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
text = 'footballcyberpunkextraterritorialityconversationalistblockophthalmoscopicinterdependencemamauserfff'

result = {}
for c in text:
    result[c] = result.get(c, 0) + 1
# __________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ s. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–æ —Ç–æ, —á—Ç–æ –º–µ–Ω—å—à–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
# 11 129
#

s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'
s = s.split()
l = []
result = {}
for word in s:
    result[word] = result.get(word, 0) + 1

for key, values in sorted(result.items(), reverse=True):
    if values == max(result.values()):
        l.append(key)

print(l[-1])

# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
s = 'orange strawberry barley gooseberry apple apricot barley currant orange melon pomegranate banana banana orange barley apricot plum grapefruit banana quince strawberry barley grapefruit banana grapes melon strawberry apricot currant currant gooseberry raspberry apricot currant orange lime quince grapefruit barley banana melon pomegranate barley banana orange barley apricot plum banana quince lime grapefruit strawberry gooseberry apple barley apricot currant orange melon pomegranate banana banana orange apricot barley plum banana grapefruit banana quince currant orange melon pomegranate barley plum banana quince barley lime grapefruit pomegranate barley'

num = {}
for w in s.split():
    num[w] = num.get(w, 0) + 1
print(min(num, key=lambda x: (-num[x], x)))
# __________________________________________________________


# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ pets, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–∞–∫–∞—Ö –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö.
# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ ‚Äì —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –≤–∏–¥–∞ (–∫–ª–∏—á–∫–∞ —Å–æ–±–∞–∫–∏, –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, —Ñ–∞–º–∏–ª–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤–æ–∑—Ä–∞—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞).
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ö—Ä–∞–Ω–∏–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –µ–≥–æ —Å–æ–±–∞–∫–∏.
#
# –ö–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≤–æ–∑—Ä–∞—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ –∫–ª–∏—á–µ–∫ —Å–æ–±–∞–∫ (—Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: –∫–æ—Ä—Ç–µ–∂–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å –∫–ª—é—á–∞–º–∏ —Å–ª–æ–≤–∞—Ä—è.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±–∞–∫.
# 10 582
#
pets = [('Hatiko', 'Parker', 'Wilson', 50),
        ('Rusty', 'Josh', 'King', 25),
        ('Fido', 'John', 'Smith', 28),
        ('Butch', 'Jake', 'Smirnoff', 18),
        ('Odi', 'Emma', 'Wright', 18),
        ('Balto', 'Josh', 'King', 25),
        ('Barry', 'Josh', 'King', 25),
        ('Snape', 'Hannah', 'Taylor', 40),
        ('Horry', 'Martha', 'Robinson', 73),
        ('Giro', 'Alex', 'Martinez', 65),
        ('Zooma', 'Simon', 'Nevel', 32),
        ('Lassie', 'Josh', 'King', 25),
        ('Chase', 'Martha', 'Robinson', 73),
        ('Ace', 'Martha', 'Williams', 38),
        ('Rocky', 'Simon', 'Nevel', 32)]

result = {}

l = []
num = []  # —Å–ø–∏—Å–æ–∫  –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–±–∞–∫–æ–≤–æ–¥–æ–≤


for i in range(len(pets)):
    a = (pets[i][1], pets[i][2])  # –∫–æ—Ä—Ç–µ–∂ –∏–º—è_—Ñ–∞–º–∏–ª–∏—è

    if a not in num:
        num.append(a)
        # —Ü–∏–∫–ª —Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±–∞–∫
        for j in range(i, len(pets)):
            if (pets[i][1] and pets[i][2]) in pets[j]:
                l.append(pets[j][0])

        result[pets[i]] = l.copy()
        l.clear()

# –≤—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –≤ —Å—Ç–æ–ª–±–∏–∫ (–∫–ª—é—á : –∑–Ω–∞—á–µ–Ω–∏–µ)
for key, value in result.items():
    print("{0}: {1}".format(key, value))


# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 1-------—á–µ—Ä–µ–∑ setdefault()----------------------
# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 1-----------------------------
result = {}
for pet in pets:
    result.setdefault(pet[1:], []).append(pet[0])

# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 3----—á–µ—Ä–µ–∑ get()-------------------------
# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 3-----------------------------
result = {}
for data in pets:
    result[tuple(data[1:])] = result.get(tuple(data[1:]), []) + [data[0]]

# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 2-----------------------------
# -----------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤ 2-----------------------------
result = {}
for i in pets:
    result[i[-3:]] = result.get(i[-3:], []) + list(i[:-3])
# __________________________________________________________
# __________________________________________________________
result = {}

for i in pets:
    key = i[-3:]
    value = i[0]
    result[key] = result.get(key, []) + [value]


# –°–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ üå∂Ô∏è
# 10 427
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–∂–µ –≤—Å–µ–≥–æ, –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–≤–µ–¥–∏—Ç–µ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ–Ω—å—à–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.

# —Å–æ–∑–¥–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
word = [el.lower().strip('.,;:-?!()') for el in input().split()]

dict1 = {}

for key in word:
    # –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    dict1[key] = dict1.get(key, 0) + 1

l = []
# –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ,
for key, value in sorted(dict1.items()):
    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑–∏ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ l
    if value == min(dict1.values()):
        l.append(key)

# –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–∞—á–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ - –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
print(l[0])


# -----------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
s = sorted([i.strip('.,!?:;-') for i in input().lower().split()])
result = {}
for el in s:
    result[el] = result.get(el, 0) + 1
for key, value in result.items():
    if value == min(result.values()):
        print(key)
        break
# __________________________________________________________

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è
# 10 154
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å—Ç—Ä–æ–∫–∏-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –ø–æ—Å—Ç—Ñ–∏–∫—Å _n, –≥–¥–µ n ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è.

text = [word for word in input().split()]
# —Å–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª*
text1 = text.copy()
dict1 = {}

i = 0
for key in text:
    if key not in dict1:
        dict1[key] = dict1.get(key, 0) + 1
        print(key, end=' ')

    else:
        text1[i] = '{}{}{}'.format(key, '_', dict1[key])
        print(text1[i], end=' ')
        dict1[key] += 1

    i += 1

# a b c a a d c

# ---------------------------------------------------------------
result[n + '_' + str(result.get(n))] = result.get(n)
# _______________________________________________________________

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞
# 10 403
# –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, –∫–∞–∫ –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∞—Ç—Å—è, –∞ –≤ –æ–±—â–µ–Ω–∏–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–µ—Å—å–º–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫. –ß—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø–æ–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–µ–∫—Å–∏–∫–æ–Ω, –º—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å–ª–µ–Ω–≥–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–µ—Ä—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—Ç–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –í —Å–ª–µ–¥—É—é—â–∏—Ö nn —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã —Å–ª–æ–≤–∞ –∏ –∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –∏ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞. –í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ mm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤, —á—å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏. –í —Å–ª–µ–¥—É—é—â–∏—Ö mm —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã —Å–∞–º–∏ —Å–ª–æ–≤–∞, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ú–∏–Ω–∏-—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–º —Å–ª–æ–≤–µ –∏–ª–∏ —Ñ—Ä–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ (:), —Å–ª–µ–¥–æ–º –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –∏–¥—ë—Ç –ø—Ä–æ–±–µ–ª.

dict1 = {}
n = int(input())
for _ in range(n):
    word1 = input().strip().split(':')
    dict1[word1[0].lower().strip(' .,!?:;-')] = word1[1].strip(' .,!?:;-')

m = int(input())

word2 = [input().lower() for i in range(m)]

for key in word2:
    if key in dict1:
        print(dict1[key])
    else:
        print('–ù–µ –Ω–∞–π–¥–µ–Ω–æ')

# ----------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞----------------------------------
mydict = {}

for _ in range(int(input())):
    key, value = input().split(': ')  # –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –µ—â–µ 1 –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é. input().split(': ', 1)
    mydict[key.lower()] = value

for _ in range(int(input())):
    print(mydict.get(input().lower(), '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'))
# _______________________________________________________________

# –ê–Ω–∞–≥—Ä–∞–º–º—ã 1
# 10 494
# –ê–Ω–∞–≥—Ä–∞–º–º–∞ ‚Äì —Å–ª–æ–≤–æ (—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ), –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—É—Ç—ë–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–∫–≤, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ (–∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ). –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ evil –∏ live ‚Äì —ç—Ç–æ –∞–Ω–∞–≥—Ä–∞–º–º—ã.
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏.

word1 = list(input())
word2 = list(input())
word1.sort()
word2.sort()
if word1 == word2:
    print('YES')
else:
    print('NO')


# ---------------------------------------------------------------
num = {}
for c in input().lower():
    num[c] = num.get(c, 0) + 1
for c in input().lower():
    num[c] = num.get(c, 0) - 1

print(('NO', 'YES')[set(num.values()) == {0}])
# _______________________________________________________________

# –ê–Ω–∞–≥—Ä–∞–º–º—ã 2
#  10 264
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –æ–Ω–∏ –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ –∏–ª–∏ –Ω–µ—Ç. –í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä —Å–∏–º–≤–æ–ª–æ–≤, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã.

# –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–£–Æ 1—é –°–¢–†–û–ö–£ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
word1 = ''.join(c.lower() for c in input() if c.isalpha())
# –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–£–Æ 2—é –°–¢–†–û–ö–£ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
word2 = ''.join(c.lower() for c in input() if c.isalpha())

dict1 = {}

for key in word1:
    dict1[key] = dict1.get(key, 0) + 1

for key in word2:
    dict1[key] = dict1.get(key, 0) - 1

if set(dict1.values()) == {0}:
    print('YES')
else:
    print('NO')
# ---------------------------------------------------------------
# –°–¥–µ–ª–∞–ª —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–∏—Å–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ –¥–ª—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫


def s(word):
    res = {}
    for i in word.lower():
        if i.isalpha():
            res[i] = res.get(i, 0) + 1
    return res


print(("NO", "YES")[s(input()) == s(input())])
# _______________________________________________________________


# –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
# 10 143
# –í–∞–º –¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –ø–∞—Ä —Å–ª–æ–≤-—Å–∏–Ω–æ–Ω–∏–º–æ–≤. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–∏–Ω–æ–Ω–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.

n = int(input())
dict1 = {}  # –º–æ–∂–Ω–æ –≤—Å—ë –≤ –æ–¥–Ω–æ–º –¥–µ–ª–∞—Ç—å
dict2 = {}

synonyms = [word.capitalize() for _ in range(n) for word in input().split()]


# –∑–∞–≤–æ–¥–º–∏ —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
for i in range(0, len(synonyms), 2):
    dict1[synonyms[i]] = synonyms[i + 1]

# –∑–∞–≤–æ–¥–º–∏ —Å–ª–æ–≤–∞—Ä—å –Ω–∞–æ–±–æ—Ä–æ—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ-–∫–ª—é—á)
for i in range(0, len(synonyms), 2):
    dict1[synonyms[i + 1]] = synonyms[i]


m = input()

if m in dict1.values():
    print(dict1[m])
else:
    print(dict2[m])

# -------------------–∏–∑ –∫–æ–º–º–µ–Ω—Ç–æ–≤--------------------------------------
words = {}
for _ in range(int(input())):
    a, b = input().split()
    words[a], words[b] = b, a
print(words[input()])
# _______________________________________________________________

# –°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞
# 10 102
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã. –ó–∞—Ç–µ–º –¥–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã–≤–æ–¥–∏—Ç, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è.

dict1 = {}
l1 = []

n = int(input())
for i in range(n):
    for word in input().split():
        l1.append(word.capitalize())

    dict1[l1[0]] = tuple(l1[1:])
    l1.clear()


m = int(input())
for _ in range(m):
    city = input()
    for key, value in dict1.items():
        if city in value:
            print(key)

# ---------------------------------------------------------------
num = {}
for _ in range(int(input())):
    country, *cities = input().split()

    # –ú–µ—Ç–æ–¥ update() –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.
    # –ú–µ—Ç–æ–¥ fromkeys() —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    num.update(dict.fromkeys(cities, country))

for _ in range(int(input())):
    print(num[input()])
# _______________________________________________________________

# –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞
# 9 704
# –¢–∏–º—É—Ä –∑–∞–ø–∏—Å–∞–ª —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.
# –£ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –¥—Ä—É–∑–µ–π –¢–∏–º—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –¢–∏–º—É—Ä—É –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ–ª–µ—Ñ–æ–Ω—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã–≤–æ–¥–∏—Ç–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É mm.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥, –∞ –∏–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. –ó–∞–ø–∏—Å–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.

dict1 = {}

n = int(input())
for _ in range(n):
    a, b = input().split()
    dict1[a] = b.capitalize().strip()

m = int(input())
name = []
for _ in range(m):
    name.append(input().capitalize().strip())

l1 = []
for i in range(len(name)):
    for key, value in dict1.items():
        if value == name[i]:
            l1.append(key)
        elif name[i] not in dict1.values():
            print('–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', end='')
            break
    print(*l1, sep=' ', end='\n')
    l1.clear()
# ---------------------------------------------------------------


dct = {}
for _ in range(int(input())):
    phone, name = input().lower().split()
    # etdefault(key, []) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫(–≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ –ø—É—Å—Ç–æ–π) –∏ –∫ –Ω–µ–º—É –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è append()
    dct.setdefault(name, []).append(phone)
for _ in range(int(input())):
    print(*dct.get(input().lower(), ['–∞–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω']))
# _______________________________________________________________

# –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
# 9 488
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ—Ç–æ–¥–æ–º —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

str_coder = input()

dict1 = {}
dict2 = {}

n = int(input())
for _ in range(n):
    letter, total = input().split(': ')
    dict1.setdefault(letter, []).append(total)

for c in str_coder:
    dict2[c] = dict2.get(c, 0) + 1


mydict = dict(zip(dict2, dict1))

for c in str_coder:
    print(mydict.get(c), end='')
# ---------------------------------------------------------------

# _______________________________________________________________

#
# 10 111
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç –ø–æ–∑–∏—Ü–∏—è —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ numbers (–Ω–∞—á–∏–Ω–∞—è —Å 00), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.

numbers = [34, 10, -4, 6, 10, 23, -90, 100,
           21, -35, -95, 1, 36, -38, -19, 1, 6, 87]
result = {i: numbers[i] ** 2 for i in range(len(numbers))}
# ---------------------------------------------------------------

# _______________________________________________________________

#
# 9 991
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è colors, –∫—Ä–æ–º–µ —Ç–µ—Ö, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è None.

colors = {'c1': 'Red', 'c2': 'Grey', 'c3': None, 'c4': 'Green', 'c5': 'Yellow', 'c6': 'Pink', 'c7': 'Orange', 'c8': None, 'c9': 'White', 'c10': 'Black', 'c11': 'Violet',
          'c12': 'Gold', 'c13': None, 'c14': 'Amber', 'c15': 'Azure', 'c16': 'Beige', 'c17': 'Bronze', 'c18': None, 'c19': 'Lilac', 'c20': 'Pearl', 'c21': None, 'c22': 'Sand', 'c23': None}
result = {i: colors[i] for i in colors if colors[i] != None}
# ---------------------------------------------------------------
result = {i: colors[i] for i in colors if colors[i]}

result = {k: v for k, v in colors.items() if v}
# _______________________________________________________________


# –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä —á–∏—Å–ª–æ:—Å–ª–æ–≤–æ. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≤ –∫–æ—Ç–æ—Ä–æ–º —á–∏—Å–ª–∞ –±—É–¥—É—Ç –∫–ª—é—á–∞–º–∏, –∞ —Å–ª–æ–≤–∞ ‚Äì –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
# 9 891
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏ (–∏–º–µ—Ç—å —Ç–∏–ø int), –∑–Ω–∞—á–µ–Ω–∏—è ‚Äì —Å—Ç—Ä–æ–∫–∞–º–∏ (–∏–º–µ—Ç—å —Ç–∏–ø str).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.

s = '1:men 2:kind 90:number 0:sun 34:book 56:mountain 87:wood 54:car 3:island 88:power 7:box 17:star 101:ice'

s = s.split()
s1 = [el.split(':') for el in s]

result = {int(key): value for key, value in s1}

# ---------------------------------------------------------------
result = {int(k): v for k, v in [l.split(':') for l in s.split()]}
# _______________________________________________________________

#
# 9 719
# –ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≥–¥–µ –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ numbers, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 11.
numbers = [34, 10, 4, 6, 10, 23, 90, 100, 21, 35,
           95, 1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360]
l1 = []

for i in range(len(numbers)):
    # –∏—â–µ–º –¥–µ–ª–∏—Ç–µ–ª–∏ –¥–æ –ø–æ–ª–æ–≤–∏–Ω—ã —á–∏—Å–ª–∞
    l1.append([j for j in range(1, numbers[i] // 2 + 1) if numbers[i] % j == 0])
    # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–∏–±–∞–≤–∏—Ç—å —Å–∞–º–æ —á–∏—Å–ª–æ, –∫–∞–∫ –¥–µ–ª–∏—Ç–µ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    l1[i].append(numbers[i])

result = dict(zip(numbers, l1))


# ---------------------------------------------------------------
numbers = [34, 10, 4, 6, 10, 23, 90, 100, 21, 35,
           95, 1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360]
result = {n: [i for i in range(1, n // 2 + 1) if n %
              i == 0] + [n] for n in numbers}
# ---------------------------------------------------------------
numbers = set([34, 10, 4, 6, 10, 23, 90, 100, 21, 35, 95,
              1, 36, 38, 19, 1, 6, 87, 1000, 13456, 360])
result = {}
for i in numbers:
    for j in range(1, i + 1):
        if i % j == 0:
            result.setdefault(i, []).append(j)
# ---------------------------------------------------------------


#
# 9 742
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result , –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ ‚Äì —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ words, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–æ–≤ ASCII —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ words –∏–º–µ–ª –≤–∏–¥: words = ['yes', 'hello'], —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª –±—ã —Å–ª–æ–≤–∞—Ä—å
# result = {'yes': [121, 101, 115], 'hello': [104, 101, 108, 108, 111]}
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ASCII –∫–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ord().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è result –Ω–µ –Ω—É–∂–Ω–æ.

words = ['hello', 'bye', 'yes', 'no', 'python',
         'apple', 'maybe', 'stepik', 'beegeek']

l_ascii = []
for el in words:
    l_ascii.append([ord(c) for c in el])


result = {words[i]: l_ascii[i] for i in range(len(words))}
# ------------------------------------------------------------------

result = {k: [ord(i) for i in k] for k in words}
# __________________________________________________________________


#
#  9 810
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è letters , –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ—Ö, –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ remove_keys.

letters = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J', 10: 'K', 11: 'L', 12: 'M',
           13: 'N', 14: 'O', 15: 'P', 16: 'Q', 17: 'R', 18: 'S', 19: 'T', 20: 'U', 21: 'V', 22: 'W', 23: 'X', 24: 'Y', 26: 'Z'}
remove_keys = [1, 5, 7, 12, 17, 19, 21, 24]

result = {key: value for key, value in letters.items()
          if key not in remove_keys}

# ------------------------------------------------------------------
result = {k: letters[k] for k in set(letters) - set(remove_keys)}
# __________________________________________________________________


#   9 759
# –í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π students —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ—Å—Ç–µ (–≤ —Å–º) –∏ –≤–µ—Å–µ (–≤ –∫–≥) —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è students , –≥–¥–µ —É–∫–∞–∑–∞–Ω —Ä–æ—Å—Ç –±–æ–ª—å—à–µ 167167 —Å–º, –∞ –≤–µ—Å –º–µ–Ω—å—à–µ 7575 –∫–≥.

students = {'Timur': (170, 75), 'Ruslan': (180, 105), 'Soltan': (192, 68), 'Roman': (175, 70), 'Madlen': (160, 50), 'Stefani': (165, 70), 'Tom': (190, 90), 'Jerry': (180, 87), 'Anna': (172, 67), 'Scott': (
    168, 78), 'John': (186, 79), 'Alex': (195, 120), 'Max': (200, 110), 'Barak': (180, 89), 'Donald': (170, 80), 'Rustam': (186, 100), 'Alice': (159, 59), 'Rita': (170, 80), 'Mary': (175, 69), 'Jane': (190, 80)}
result = {key: value for key, value in students.items() if key >
          167 and value < 75}


# ------------------------------------------------------------------
result = {name: (height, weight) for name, (height, weight)
          in students.items() if height > 167 and weight < 75}
# __________________________________________________________________


#
# 9 714
# –°–ø–∏—Å–æ–∫ tuples —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ç–µ–∂–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Ç—Ä–µ—Ö —á–∏—Å–µ–ª.
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å result, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì –∫–æ—Ä—Ç–µ–∂ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18),
          (19, 20, 21), (22, 23, 24), (25, 26, 27), (28, 29, 30), (31, 32, 33), (34, 35, 36)]

result = {key: tuple(value) for (key, *value) in tuples}
# ------------------------------------------------------------------

result = {i[0]: i[1:] for i in tuples}
# __________________________________________________________________


#
#  9 407
# –î–∞–Ω—ã —Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ student_ids, student_names, student_grades, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ result, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: [{'S001': {'Camila Rodriguez': 86}}, {'S002': {'Juan Cruz': 98}},...].
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é zip().

student_ids = ['S001', 'S002', 'S003', 'S004', 'S005', 'S006',
               'S007', 'S008', 'S009', 'S010', 'S011', 'S012', 'S013']
student_names = ['Camila Rodriguez', 'Juan Cruz', 'Dan Richards', 'Sam Boyle', 'Batista Cesare', 'Francesco Totti',
                 'Khalid Hussain', 'Ethan Hawke', 'David Bowman', 'James Milner', 'Michael Owen', 'Gary Oldman', 'Tom Hardy']
student_grades = [86, 98, 89, 92, 45, 67, 89, 90, 100, 98, 10, 96, 93]

result = [{student_ids[i]: {student_names[i]: student_grades[i]}}
          for i in range(len(student_ids))]

# ------------------------------------------------------------------
result = [{x: {y: z}}
          for x, y, z in zip(student_ids, student_names, student_grades)]
# ------------------------------------------------------------------
result = [{i[0]: {i[1]: i[2]}}
          for i in zip(student_ids, student_names, student_grades)]
# __________________________________________________________________


# ------------------------------------------------------------------
# ---------------–≠–ö–ó–ê–ú–ï–ù  !!!!----------------------------------------
# ------------------------------------------------------------------
#  7 838
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è my_dict  –Ω–µ –±—ã–ª–æ —á–∏—Å–µ–ª, –±–æ–ª—å—à–∏—Ö 2020. –ü—Ä–∏ —ç—Ç–æ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—è—Ç—å—Å—è –Ω–µ –¥–æ–ª–∂–µ–Ω.

my_dict = {'C1': [10, 20, 30, 7, 6, 23, 90], 'C2': [20, 30, 40, 1, 2, 3, 90, 12], 'C3': [12, 34, 20, 21], 'C4': [22, 54, 209, 21, 7], 'C5': [
    2, 4, 29, 21, 19], 'C6': [4, 6, 7, 10, 55], 'C7': [4, 8, 12, 23, 42], 'C8': [3, 14, 15, 26, 48], 'C9': [2, 7, 18, 28, 18, 28]}

for key, value in my_dict.items():
    my_dict.update({key: [i for i in value if i <= 20]})


# ------------------------------------------------------------------
my_dict = {k: [i for i in v if i <= 20] for k, v in my_dict.items()}
# __________________________________________________________________


# 7 846
#
# –°–ª–æ–≤–∞—Ä—å emails —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–º–µ–Ω—É. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@domain.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sorted(), –ª–∏–±–æ —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ.
emails = {'nosu.edu': ['timyr', 'joseph', 'svetlana.gaeva', 'larisa.mamuk'],
          'gmail.com': ['ruslan.chaika', 'rustam.mini', 'stepik-best'],
          'msu.edu': ['apple.fruit', 'beegeek', 'beegeek.school'],
          'yandex.ru': ['surface', 'google'],
          'hse.edu': ['tomas-henders', 'cream.soda', 'zivert'],
          'mail.ru': ['angel.down', 'joanne', 'the.fame.moster']}

l = []

for key, value in emails.items():
    for i in value:
        l.append(i + '@' + key)
l.sort()
print(*l, sep='\n')

# ------------------------------------------------------------------
print(*sorted([i+'@'+k for k, v in emails.items() for i in v]), sep='\n')
# __________________________________________________________________


# –ú–∏–Ω—É—Ç–∫–∞ –≥–µ–Ω–µ—Ç–∏–∫–∏
# 7 990
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–µ—Ä–µ–≤–æ–¥—è—â—É—é —Ü–µ–ø—å –î–ù–ö –≤ —Ü–µ–ø—å –†–ù–ö.

dict1 = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}

l = []
for c in input():
    l.append(dict1[el])
print(''.join(dict1))

# ------------------------------------------------------------------
dict1 = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}

for c in input():
    print(dict1[c], end='')
# __________________________________________________________________


# –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
# 7 832
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–∞. –°–ª–æ–≤–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤, —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ, —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞. –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–µ–¥–µ—Ç 11, –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞ ‚Äî 22 –∏ —Ç. –¥.

s = input().split()

dict1 = {}

for key in s:
    dict1[key] = dict1.get(key, 0) + 1
    print(dict1[key])
# ------------------------------------------------------------------

# __________________________________________________________________


# Scrabble game
#
# –í –∏–≥—Ä–µ Scrabble –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ–≤–∞ ‚Äì —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –µ–≥–æ –±—É–∫–≤. –ß–µ–º —Ä–µ–∂–µ –±—É–∫–≤–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, —Ç–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ —Ü–µ–Ω–∏—Ç—Å—è:
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–≤ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞.

dict1 = {1: ['A', 'E', 'I', 'L', 'N', 'O', 'R', 'S', 'T', 'U'],
         2: ['D', 'G'],
         3: ['B', 'C', 'M', 'P'],
         4: ['F', 'H', 'V', 'W', 'Y'],
         5: ['K'],
         8: ['J', 'X'],
         10: ['Q', 'Z']}

total = 0
# s = list(input())
for i in list(input()):
    for key, value in dict1.items():
        if i in value:
            total += key

print(total)

# -----------------–†–ê–¶–ò–û–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï---------------------------------

# –°–ª–æ–≤–∞—Ä—å, —Ö—ç—à —Ç–∞–±–ª–∏—Ü–∞, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è.
# –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
# –¢–∞–∫ —á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–¥–µ —É –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ.
# –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞—Ä—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ O(1) –≤—Ä–µ–º—è (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ), –Ω–æ –≤–∑–∞–º–µ–Ω —Å–ª–æ–≤–∞—Ä–∏ –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞.
# –ï—Å–ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É –∏ –Ω–∞—á–∞—Ç—å —Ü–∏–∫–ª –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è —á—Ç–æ –±—ã –Ω–∞–π—Ç–∏ –±—É–∫–≤—É, —Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Ä—è–µ—Ç—Å—è!!!!!!!!!!!!!!!!!!!!
chrs = {}
chrs.update(dict.fromkeys('AEILNORSTU', 1))
chrs.update(dict.fromkeys('DG', 2))
chrs.update(dict.fromkeys('BCMP', 3))
chrs.update(dict.fromkeys('FHVWY', 4))
chrs.update(dict.fromkeys('K', 5))
chrs.update(dict.fromkeys('JX', 8))
chrs.update(dict.fromkeys('QZ', 10))

s = 0
for ch in input():
    s += chrs.get(ch)

print(s)
# __________________________________________________________________


# –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
#  7 809
# –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (query string) ‚Äî —á–∞—Å—Ç—å URL –∞–¥—Ä–µ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∫–ª—é—á–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è. –û–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –∏–¥–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∞–¥—Ä–µ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
# https://beegeek.ru?name=timur     # —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: name=timur
# –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –æ–Ω–∏ –æ—Ç–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥–∞ &:
# https://beegeek.ru?name=timur&color=green     # —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: name=timur&color=green
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é build_query_string(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

# print(build_query_string({'name': 'timur', 'age': 28}))
# print(build_query_string({'sport': 'hockey', 'game': 2, 'time': 17}))

# –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
# age=28&name=timur
# game=2&sport=hockey&time=17

def build_query_string(params):

    str1 = []
    for key, value in sorted(params.items()):
        s = key + '=' + str(value)
        str1.append(s)

    str2 = '&'.join(str1)

    return str2

# dict1 = {'name': 'timur', 'age': 28}
# build_query_string(dict1)


# ------------------------------------------------------------------
def build_query_string(params):
    return '&'.join([f'{k}={params[k]}' for k in sorted(params)])
# __________________________________________________________________


# –°–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π üå∂Ô∏è
# 7 477
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(), –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é —Å–ª–æ–≤–∞—Ä–∏ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å, –∫–∞–∂–¥—ã–π –∫–ª—é—á –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ (—Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö set) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
# result = merge([{'a': 1, 'b': 2}, {'b': 10, 'c': 100}, {'a': 1, 'b': 17, 'c': 50}, {'a': 5, 'd': 777}])
# —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
# result = {'a': {1, 5}, 'b': {2, 10, 17}, 'c': {50, 100}, 'd': {777}}
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é merge() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–∏—è–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º.

def merge(values):      # values - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    result = {}
    for d in values:
        for x in d:
            result.setdefault(x, set()).add(d[x])

    return result


# ------------------------------------------------------------------

# __________________________________________________________________


# –û–ø–∞—Å–Ω—ã–π –≤–∏—Ä—É—Å üòà
# 7 490
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ nn, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –î–∞–ª–µ–µ –∏–¥–µ—Ç nn —Å—Ç—Ä–æ–∫, –Ω–∞ –∫–∞–∂–¥–æ–π –∏–º—è —Ñ–∞–π–ª–∞ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å –Ω–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞. –í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —á–∏—Å–ª–æ mm ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ñ–∞–π–ª–∞–º, –∏ –∑–∞—Ç–µ–º mm —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–∏–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª. –û–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ —Ñ–∞–π–ª—É –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ mm –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ Access denied –∏–ª–∏ OK.


dict3 = {'write': 'W', 'read': 'R', 'execute': 'X'}

n = int(input())
dict1 = {}  # —Å—Ç—Ä–æ–∫–∏-    –∏–º—è —Ñ–∞–π–ª–∞ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å –Ω–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏
for _ in range(n):
    el = input().split()
    dict1[el[0]] = el[1:]


m = int(input())
#  —Å—Ç—Ä–æ–∫–∏-  —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤–∏–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª
for _ in range(m):
    l2 = input().split()
    l2[0] = dict3[l2[0]]
    if l2[0] not in dict1[l2[1]]:
        print('Access denied')
    else:
        print('OK')

# -------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞----------------------------------
transform = {'execute': 'X', 'write': 'W', 'read': 'R'}
mydict = {}

for _ in range(int(input())):
    name, *operations = input().split()
    mydict[name] = operations

for _ in range(int(input())):
    operation, name = input().split()
    if transform[operation] in mydict[name]:
        print('OK')
    else:
        print('Access denied')
# __________________________________________________________________


# –ü–æ–∫—É–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ üå∂Ô∏è
# 7 257
# # –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç nn —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø–∏—Å—è–º–∏ –≤–∏–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Ç–æ–≤–∞—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≥–¥–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Äî –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), —Ç–æ–≤–∞—Ä ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚Äî –¥–≤–æ–µ—Ç–æ—á–∏–µ, –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∏–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, —Ç–æ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.

dict1 = {}

n = int(input())
for _ in range(n):
    l = input().split()
    a, b, c = l[0], l[1], int(l[2])
    dict1[a] = dict1.setdefault(a, {b: c})
    dict1[a].update({b: c}),
    dict1[a][b] = dict1[a].get(b) + c


for name, sale in dict1.items():
    print('{0}{1}'.format(name, ':'))
    for key, value in sorted(sale.items()):
        print(key, value, end='\n')


# –î–ª—è —Ç–µ—Ö –∫—Ç–æ —Å–ª–µ–≥–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å.

#      1. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞ –±–∞–∑–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

#     –£ –Ω–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É (–ø–æ–¥—Å–ª–æ–≤–∞—Ä—å)
#     –£ –Ω–∞—Å –±—ã–ª —É–∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –Ω–æ –Ω–µ –±—ã–ª–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥—Å–ª–æ–≤–∞—Ä—å
#     –£ –Ω–∞—Å —É–∂–µ —ç—Ç–æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–ª –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–¥—Å–ª–æ–≤–∞—Ä–µ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)

#     2. –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö

#     –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–±–∏–≤–∞–µ–º –µ–≥–æ
#     –í—ã–≤–æ–¥–∏–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
#     –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∏–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –µ–≥–æ
#     –í—ã–≤–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

# –ü.–°. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π.

# –ü.–°.–°. –î–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–∫–∏, –Ω–æ —Ç–µ–º–∞ –≤—Å–µ –∂–µ —Å–ª–æ–≤–∞—Ä–∏.


# data.setdefault(name, {})

# data[name][product] = data[name].get(product, 0) + int(count)

# ------------------------------------------------------------------

# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –±—Ä–æ—Å–∫–∏ –º–æ–Ω–µ—Ç—ã. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤: –û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞ (–∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
# 10 440
#

n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
seq = 0, 1

for _ in range(n):
    num = random.choice(seq)
    if num == 0:
        print('–û—Ä–µ–ª')
    elif num == 1:
        print('–†–µ—à–∫–∞')


# ------------------------------------------------------------------
n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
coin = {0: '–û—Ä–µ–ª', 1: '–†–µ—à–∫–∞'}
for i in range(n):
    print(coin[random.randint(0, 1)])
# ------------------------------------------------------------------
n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
for _ in range(n):
    print(random.choice(['–û—Ä–µ–ª', '–†–µ—à–∫–∞']))
# ------------------------------------------------------------------
a = {1: '–û—Ä–µ–ª', 2: '–†–µ—à–∫–∞'}
for i in range(int(input())):
    print(a.get(randint(1, 2)))
# __________________________________________________________________

#
# 10 338
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –±—Ä–æ—Å–∫–∏ –∏–≥—Ä–∞–ª—å–Ω–æ–≥–æ –∫—É–±–∏–∫–∞ c 66 –≥—Ä–∞–Ω—è–º–∏. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤ ‚Äî –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏ –∫—É–±–∏–∫–∞ (–∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).


n = int(input())    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
for _ in range(n):
    num = random.randint(1, 6)
    print(num)

# ------------------------------------------------------------------

# __________________________________________________________________


#
# 10 018
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å,
# —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ a..z, A..Z (–≤ –Ω–∏–∂–Ω–µ–º –∏ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–∏–º–≤–æ–ª–∞–º A..Z –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞ —Å 65 –ø–æ 90 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–∏–º–≤–æ–ª–∞–º a..z –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞ —Å 97 –ø–æ 122 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é chr() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –¥–ª–∏–Ω–µ –ø–∞—Ä–æ–ª—è, —Ä–∞–≤–Ω–æ–π 1515 —Å–∏–º–≤–æ–ª–∞–º –≤–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å:


length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
l = list(range(65, 91)) + list(range(97, 123))

pasword = ''
for _ in range(length):
    pasword += chr(random.choice(l))

print(pasword)
# ------------------------------------------------------------------

length = int(input())    # –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
line = ''
i = 0
while i != length:
    num = random.randint(65, 122)
    if 65 <= num <= 90 or 97 <= num <= 122:
        line += chr(num)
        i += 1
print(line)
# __________________________________________________________________


# –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 77 —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 11 –¥–æ 4949 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 77 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
# 9 820
#

num = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –Ω–µ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
while len(num) < 7:
    num.add(random.randint(1, 49))

print(*sorted(num), end='')

# ------------------------------------------------------------------
print(*sorted(rnd.sample(range(1, 50), 7)))
# __________________________________________________________________


#
#
# IP –∞–¥—Ä–µ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 00 –¥–æ 255255 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_ip(), –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random  –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ) IP –∞–¥—Ä–µ—Å–∞:
# IP –∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0.0.0.0 –∏–ª–∏ 255.255.255.255, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è


def generate_ip():
    ip = '{0}.{1}.{2}.{3}'.format(random.randint(1, 255), random.randint(
        0, 255), random.randint(0, 255), random.randint(0, 255))
    # ip ='{}.{}.{}.{}'.format(*sample(range(256), 4))
    # ip = f'{a}.{b}.{c}.{d}'
    return ip

# ----------------jn –ø—Ä–µ–ø–æ–¥–∞----------------------------------------


def generate_ip():
    return f'{r(256)}.{r(256)}.{r(256)}.{r(256)}'
# __________________________________________________________________


#
# 9 565
# –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –õ–∞—Ç–≤–µ—Ä–∏–∏ –∏–º–µ–µ—Ç –≤–∏–¥: LetterLetterNumber_NumberLetterLetter, –≥–¥–µ Letter ‚Äì –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, Number ‚Äì —á–∏—Å–ª–æ –æ—Ç 00 –¥–æ 9999 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_index(), –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –õ–∞—Ç–≤–µ—Ä–∏–∏.


def generate_index():
    post_adresse = '{0}{1}{2}_{3}{4}{5}'.format(random.choice(string.ascii_uppercase), random.choice(string.ascii_uppercase), random.choice(
        string.digits), random.choice(string.digits), random.choice(string.ascii_uppercase), random.choice(string.ascii_uppercase))
    return post_adresse


# ------------------------------------------------------------------

# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç—Ä–∏—Ü—ã (–¥–≤—É–º–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞).
# –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–µ –Ω—É–∂–Ω–æ.
# 9 621

# import random

matrix = [[1, 2, 3, 4],
          [5, 6, 7, 8],
          [9, 10, 11, 12],
          [13, 14, 15, 16]]

l = []
for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        l.append(matrix[i][j])      # –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫


# –∑–∞–ø–∏—Ö–∏–≤–∞–µ–º ckexfqysv –æ–±—Ä–∞–∑–æ–º –æ–±—Ä–∞—Ç–Ω–æ
for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        el = random.choice(l)
        matrix[i][j] = el
        l.remove(el)          # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç el –∏–∑ —Å–ø–∏—Å–∫–∞
# ------------------------------------------------------------------
# sum(matrix, []) –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞—Ç–µ–º —Ç—É—Å—É—é—Ç—Å—è –º–µ—Ç–æ–¥–æ–º shuffle. –ü–æ—Ç–æ–º –∏–∑ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –æ–ø—è—Ç—å —Å—Ç—Ä–æ–∏—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞.
#

# import random as rnd
matrix = [[1, 2, 3, 4],
          [5, 6, 7, 8],
          [9, 10, 11, 12],
          [13, 14, 15, 16]]

n, m, lst = len(matrix), len(matrix[0]), sum(matrix, [])
rnd.shuffle(lst)
matrix = [[lst[i * m + j] for j in range(m)] for i in range(n)]
# __________________________________________________________________


#
# 9 527
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 100100 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:

# –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª–µ–π;
# –Ω–æ–º–µ—Ä –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 77 —Ü–∏—Ñ—Ä;
# –≤—Å–µ 100 –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏.

# import random

set1 = set()

while len(set1) < 100:
    num = random.randint(1000000, 9999999)
    set1.add(num)
print(*set1, sep='\n')
# ------------------------------------------------------------------

# __________________________________________________________________


#
# 9 444
# –ê–Ω–∞–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Å–ª–æ–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—É—Ç—ë–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–∫–≤, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.
# –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞ –ø–∏–ª–∞ –∏ –ª–∏–ø–∞ –∏–ª–∏ –ø–æ—Å—Ç –∏ —Å—Ç–æ–ø ‚Äì –∞–Ω–∞–≥—Ä–∞–º–º—ã.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –µ–≥–æ —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∞–≥—Ä–∞–º–º—É.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –º–µ—Ç–æ–¥ shuffle() —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º, –∞ –Ω–µ —Å–æ —Å—Ç—Ä–æ–∫–æ–π.

# import random

word = list(input())
anagramm = word.copy()
random.shuffle(anagramm)
print(*anagramm, sep='')

# ------------------------------------------------------------------

# __________________________________________________________________


# 9 023
# –¥–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º 5√ó55√ó5, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 11 –¥–æ 7575 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –ø—Ä–∏ —ç—Ç–æ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π (–æ–Ω–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º 00).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ –±–∏–Ω–≥–æ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–≤–æ–¥–∏—Ç—å –Ω–∞ –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ —Ä–æ–≤–Ω–æ 33 —Å–∏–º–≤–æ–ª–∞. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π


# import random

rng = tuple(range(1, 76))
num = random.sample(rng, 24)

# –°–û–ó–î–ê–ï–ú –ú–ê–¢–†–ò–¶–£ (–∑–∞–ø–æ–ª–Ω–µ–Ω—É—é –Ω—É–ª—è–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç—Ä–∏—Ü—ã)
row = 5     # —Å—Ç—Ä–æ–∫–∏
col = 5     # –∫–æ–ª–æ–Ω–∫–∏
mult = [[0] * col for i in range(row)]

for i in range(row):
    for j in range(col):

        if i == j == row // 2:
            mult[i][j] = 0

        else:
            rand_num = random.choice(num)
            mult[i][j] = rand_num
            num.remove(rand_num)

for i in range(row):
    for j in range(col):
        print(str(mult[i][j]).ljust(3), end=' ')
    print()
# ----------------------–ø—Ä–µ–ø–æ–¥-----------------------------------
# from random import sample

numbers = sample(list(range(1, 76)), 25)
bingo = [numbers[i:i + 5] for i in range(0, 21, 5)]
bingo[2][2] = 0

for i in range(5):
    for j in range(5):
        print(str(bingo[i][j]).ljust(3), end=' ')
    print()
# __________________________________________________________________


# –¢–∞–π–Ω—ã–π –¥—Ä—É–≥ üå∂Ô∏è
# 8 556
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É –µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö–ñ # –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn ‚Äì –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤. –î–∞–ª–µ–µ –∏–¥—É—Ç nn —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞ (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º) –∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å–æ–º.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ç–∞–π–Ω—ã–º –¥—Ä—É–≥–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ç–∞–π–Ω—ã–º –¥—Ä—É–≥–æ–º –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ—Å—Ç—ã —ç—Ç–æ –ª–∏—à—å –æ–±—Ä–∞–∑—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ —Ç–∞–π–Ω—ã—Ö –¥—Ä—É–∑–µ–π.

# import random

n = int(input())

pupil = [input() for _ in range(n)]

# –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º  —Å–ø–∏—Å–æ–∫ '—É—á–µ–Ω–∏–∫ - —Ç–∞–π–Ω—ã–π –¥—Ä—É–≥'
secret_friend = [i for i in range(n)]
# –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —á–∏—Å–ª–∞ –∏–Ω–¥–µ–∫—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞
seq = random.sample(list(range(n)), n)

# –ø—Ä–æ–≤–µ—Ä—è–µ–º # —Ç.–∫. –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Ç–∞–π–Ω—ã–º –¥—Ä—É–≥–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ, —Ç–æ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
i = 0
while i < n:
    if i != seq[i]:
        i += 1
    else:
        # –ø–æ—ç—Ç–æ–º—É –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫,
        seq = random.sample(list(range(n)), n)
        i = 0  # –∏ —Å —Å–∞–º–æ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        continue


# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω—É–∂–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–æ—Ö–æ–¥–∏–º –∏ –≤—ã–≤–æ–¥–∏–º '—Ç–∞–π–Ω—ã—Ö –¥—Ä—É–∑–µ–π'
for i in range(n):
    secret_friend[i] = '{0} - {1}'.format(pupil[i], pupil[seq[i]])
    print(secret_friend[i])

# ------------------------------------------------------------------
# –ó–∞–¥–∞—á–∞ –Ω–µ–ø—Ä–æ—Å—Ç–∞—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å –µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –£–¥–∏–≤–∏–ª–æ, —á—Ç–æ —Å—Ä–µ–¥–∏ —Ä–µ—à–µ–Ω–∏–π –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ—Ä—É—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å–¥–≤–∏–≥–∞—é—Ç –µ–≥–æ –∏ —Å–∫–ª–µ–∏–≤–∞—é—Ç —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–æ –Ω–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π. –ò –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ä–∞–Ω–¥–æ–º–Ω—ã–º –æ–Ω –æ—Ç —ç—Ç–æ–≥–æ –Ω–µ —Å—Ç–∞–Ω–µ—Ç. –°–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫, –ø–æ–∫–∞ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –≤—Å–µ–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–º–µ–Ω–∞ –≤ –Ω–∏—Ö –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å - —Ç–æ–∂–µ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è. –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É —Ç–∞–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—É–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑? –í–∏–¥–µ–ª —Ç–∞–∫–∂–µ —Ä–µ—à–µ–Ω–∏—è, –≥–¥–µ –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –∏ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–±–∏—Ä–∞—é—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è (–Ω–µ –≤–∫–ª—é—á–∞—è —Å–∞–º–æ–≥–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞), –≤—Ä–æ–¥–µ –∑–≤—É—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–æ –Ω–∞ –¥–µ–ª–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è —Ç–∞–∫, —á—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–±–æ—Ä - –æ–Ω —Å–∞–º, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Å–µ–∫–∞–µ—Ç —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ random.choice() –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –í –æ–±—â–µ–º, —è —Å–¥–µ–ª–∞–ª –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É, –∑–∞—Ç–æ, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°—É—Ç—å —Ç–∞ –∂–µ - –ø—Ä–æ–±–µ–≥–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –ª—é–¥–µ–π –∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∏–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥—Ä—É–≥–∞. –ù–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - –æ–Ω —Å–∞–º, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–º–µ–Ω –¥—Ä—É–∑—å—è–º–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ª—é–¥—å–º–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

# from random import choice

names, rel, tmp = {input() for _ in range(int(input()))}, {}, 0
for name in names.copy():
    if names == {name}:
        rel[tmp], rel[name] = name, rel[tmp]
    else:
        rand_name = choice(list(names - {name}))
        rel[name] = rand_name
        names -= {rand_name}
        tmp = name
[print(k, '-', v) for k, v in rel.items()]
# __________________________________________________________________


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 1
#  8 659
# #–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç nn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mm —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π:
#     ¬´l¬ª (L –º–∞–ª–µ–Ω—å–∫–æ–µ);
#     ¬´I¬ª (i –±–æ–ª—å—à–æ–µ);
#     ¬´1¬ª (—Ü–∏—Ñ—Ä–∞);
#     ¬´o¬ª –∏ ¬´O¬ª (–º–∞–ª–µ–Ω—å–∫–∞—è –∏ –±–æ–ª—å—à–∞—è –±—É–∫–≤—ã);
#     ¬´0¬ª (—Ü–∏—Ñ—Ä–∞).
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞ nn –∏ mm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ nn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mm —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞—Ç—å, —á—Ç–æ —á–∏—Å–ª–∞ nn –∏ mm –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–≤—ã, —á—Ç–æ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í –∫–∞–∂–¥–æ–º –ø–∞—Ä–æ–ª–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∏ –±—É–∫–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –¥–≤—É—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
#     —Ñ—É–Ω–∫—Ü–∏—è generate_password(length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤;
#     —Ñ—É–Ω–∫—Ü–∏—è generate_passwords(count, length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ count —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤.

# import random
# import string

def generate_password(length):
    simbols = [c for c in (string.ascii_letters +
                           string.digits) if c not in 'lI1oO0']

    return ''.join(random.sample(simbols, length))


pass_list = []


def generate_passwords(count, length):
    for _ in range(count):
        pass_list.append(generate_password(length))

    return print(*pass_list, sep='\n')


n, m = int(input()), int(input())

generate_passwords(n, m)
# ---------------------—Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞------------------------------
# from string import *
# from random import sample

LETTER = ''.join((set(ascii_letters) | set(digits)) - set('lI1oO0'))


def generate_password(length):
    return ''.join(sample(LETTER, length))


def generate_passwords(count, length):
    return [generate_password(length) for _ in range(count)]


n, m = int(input()), int(input())
print(*generate_passwords(n, m), sep='\n')
# __________________________________________________________________


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π 2 üå∂Ô∏è
# 8 254
# # –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç nn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mm —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∫—Ä–æ–º–µ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –º–µ–∂–¥—É —Å–æ–±–æ–π:

#     ¬´l¬ª (L –º–∞–ª–µ–Ω—å–∫–æ–µ);
#     ¬´I¬ª (i –±–æ–ª—å—à–æ–µ);
#     ¬´1¬ª (—Ü–∏—Ñ—Ä–∞);
#     ¬´o¬ª –∏ ¬´O¬ª (–±–æ–ª—å—à–∞—è –∏ –º–∞–ª–µ–Ω—å–∫–∞—è –±—É–∫–≤—ã);
#     ¬´0¬ª (—Ü–∏—Ñ—Ä–∞).

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –≤ –∫–∞–∂–¥–æ–º –ø–∞—Ä–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º –∏ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞ nn –∏ mm, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ nn –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π mm —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞—Ç—å, —á—Ç–æ —á–∏—Å–ª–∞ nn –∏ mm –≤—Å–µ–≥–¥–∞ —Ç–∞–∫–æ–≤—ã, —á—Ç–æ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ –¥–≤—É—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:

#     —Ñ—É–Ω–∫—Ü–∏—è generate_password(length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤;
#     —Ñ—É–Ω–∫—Ü–∏—è generate_passwords(count, length) ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ count —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª–∏–Ω–æ–π length —Å–∏–º–≤–æ–ª–æ–≤.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ—Å—Ç—ã ‚Äì —ç—Ç–æ –ª–∏—à—å –æ–±—Ä–∞–∑—Ü—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.
# ------------------------------------------------------------------
# import random
# import string


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ
def generate_password(length):
    symbols_upeer = [c for c in string.ascii_uppercase if c not in 'IO']
    symbols_lowercase = [c for c in string.ascii_lowercase if c not in 'lo']
    symbols_digits = [c for c in string.digits if c not in '01']

    # –í —ç—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Ç—Ä—ë—Ö –Ω–∞–±–æ—Ä–æ–≤  0,33 : 0,33 : 0,33.
    # –ù–µ –ø–æ—Ä—è–¥–æ—á–µ–∫. –ü–æ —Ñ–µ–Ω—à—É—é 24/56 : 24/56 : 8/56, —Ç.–∫. –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ 24, —Å—Ç—Ä–æ—á–Ω—ã—Ö 24, –∞ —Ü–∏—Ñ—Ä –≤—Å–µ–≥–æ 8
    a, b, c = 0, 0, 0
    while 7 * a + 7 * b + c != length:
        a = random.randint(1, length // 2)
        b = random.randint(1, length // 2)
        c = random.randint(1, length // 7)

    pass_simbols = []

    pass_simbols.extend(random.sample(symbols_upeer, a))
    pass_simbols.extend(random.sample(symbols_lowercase, b))
    pass_simbols.extend(random.sample(symbols_digits, c))

    random.shuffle(pass_simbols)
    password = ''.join(pass_simbols)

    return password


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
def generate_passwords(count, length):
    result = set()
    while len(result) < count:
        result.add(generate_password(length))

    return print(*result, sep='\n')


n, m = int(input()), int(input())
generate_passwords(n, m)
# ------------------------------------------------------------------
# import string
# from random import choice, shuffle

chars1 = [—Å for —Å in string.ascii_uppercase if —Å not in 'OI']
chars2 = [—Å for —Å in string.ascii_lowercase if —Å not in 'ol']
chars3 = list(string.digits[2:])
chars = chars1 + chars2 + chars3


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ
def generate_password(length):
    result = [choice(i) for i in (chars1, chars2, chars3)] + \
        [choice(chars) for _ in range(3, length)]
    [choice(chars) for _ in range(3, length)]
    shuffle(result)
    return ''.join(result)


# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
def generate_passwords(count, length):
    result = set()
    while len(result) < count:
        result.add(generate_password(length))
    return list(result)


for i in generate_passwords(int(input()), int(input())):
    print(i)
# __________________________________________________________________


#
# 8 588
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ñ–∏–≥—É—Ä—ã, –∑–∞–¥–∞–≤–∞–µ–º–æ–π —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤:
# ------------------------------------------------------------------

# import random
n = 10 ** 6       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π

k = 0
s0 = 16
for _ in range(n):
    x = random.uniform(-2, 2)
    y = random.uniform(-2, 2)

    if x**3 + y**4 + 2 >= 0 and 3*x + y**2 <= 2:
        k += 1

print((k/n)*s0)

# ------------------------------------------------------------------

# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ œÄ
#
# 8 514
# ------------------------------------------------------------------

# import random

n = 10**6       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π

k = 0
s0 = 4

for _ in range(n):
    x = random.uniform(-1, 1)
    y = random.uniform(-1, 1)

    if x ** 2 + y ** 2 <= 1:
        k += 1

print((k / n) * s0)
# ------------------------------------------------------------------

# __________________________________________________________________


# Decimal —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ Decimal —á–∏—Å–ª–∞.
#
#
# ------------------------------------------------------------------

# from decimal import *

s = '0.77 4.03 9.06 3.80 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.23 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50'

lst = [Decimal(el) for el in s.split()]

print(min(lst) + max(lst))
# ------------------------------------------------------------------

# __________________________________________________________________


# Decimal —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ 55 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# 8 863
#
# ------------------------------------------------------------------

# from decimal import *
s = '9.73 8.84 8.92 9.60 9.32 8.97 8.53 1.26 6.62 9.85 1.85 1.80 0.83 6.75 9.74 9.11 9.14 5.03 5.03 1.34 3.52 8.09 7.89 8.24 8.23 5.22 0.30 2.59 1.25 6.24 2.14 7.54 5.72 2.75 2.32 2.69 9.32 8.11 4.53 0.80 0.08 9.36 5.22 4.08 3.86 5.56 1.43 8.36 6.29 5.13'

lst = [Decimal(el) for el in s.split()]
print(sum(lst))
print(*sorted(nums, reverse=True)[:5])
# ------------------------------------------------------------------

# __________________________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–π –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Ü–∏—Ñ—Ä—ã Decimal —á–∏—Å–ª–∞.
# 8 586
#
# ------------------------------------------------------------------
# from decimal import *
num = Decimal(input())

num_tuple = num.as_tuple()

if -1 < num < 1:
    print(max(num_tuple.digits))
else:
    print(min(num_tuple.digits) + max(num_tuple.digits))

# ------------------------------------------------------------------

# __________________________________________________________________


# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
# 8 671
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è Decimal —á–∏—Å–ª–æ dd. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: ed+ln‚Å°(d)+lg‚Å°(d)+d

# ------------------------------------------------------------------
# from decimal import *
num = Decimal(input())

print(num.exp() + num.ln() + num.log10() + num.sqrt())
# ------------------------------------------------------------------

# __________________________________________________________________


#
# 8 703
# –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ numbers –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã–≤–µ–ª –µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π –¥—Ä–æ–±–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ = –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è –¥—Ä–æ–±—å

# ------------------------------------------------------------------
# from fractions import Fraction
numbers = ['6.34', '4.08', '3.04', '7.49', '4.45', '5.39', '7.82', '2.76', '0.71', '1.97', '2.54', '3.67', '0.14', '4.29', '1.84', '4.07', '7.26', '9.37', '8.11', '4.30', '7.16', '2.46', '1.27', '0.29',
           '5.12', '4.02', '6.95', '1.62', '2.26', '0.45', '6.91', '7.39', '0.52', '1.88', '8.38', '0.75', '0.32', '4.81', '3.31', '4.63', '7.84', '2.25', '1.10', '3.35', '2.05', '7.87', '2.40', '1.20', '2.58', '2.46']

l = [Fraction(num) for num in numbers]
for i in range(len(numbers)):
    print(numbers[i], '=', l[i])
# ------------------------------------------------------------------
for num in numbers:
    print(f'{num} = {Fraction(num)}')
# __________________________________________________________________


#
# 8 584
# –î–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π s. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ —á–∏—Å–ª–∞ –≤ –≤–∏–¥–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–π –¥—Ä–æ–±–∏.
# ------------------------------------------------------------------
# from fractions import Fraction
s = '0.78 4.3 9.6 3.88 7.08 5.88 0.23 4.65 2.79 0.90 4.23 2.15 3.24 8.57 0.10 8.57 1.49 5.64 3.63 8.36 1.56 6.67 1.46 5.26 4.83 7.13 1.22 1.02 7.82 9.97 5.40 9.79 9.82 2.78 2.96 0.07 1.72 7.24 7.84 9.23 1.71 6.24 5.78 5.37 0.03 9.60 8.86 2.73 5.83 6.50 0.123 0.00021'

l = [Fraction(num) for num in s.split()]
print(Fraction(min(l) + max(l)))
# ------------------------------------------------------------------

# __________________________________________________________________


# –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥—Ä–æ–±—å
#  8 503
# –î–∞–Ω—ã –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ mm –∏ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∫—Ä–∞—â–∞–µ—Ç –¥—Ä–æ–±—å mnnm‚Äã –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, —á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥—Ä–æ–±–∏, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# ------------------------------------------------------------------

# from fractions import Fraction
num = Fraction(int(input()), int(input()))

print(num.limit_denominator())


# ------------------------------------------------------------------
# from fractions import Fraction
print(F(int(input()), int(input())))
# __________________________________________________________________


# –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥—Ä–æ–±—è–º–∏
# 8 536
# –î–∞–Ω—ã –¥–≤–µ –¥—Ä–æ–±–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ a/b. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —á–∞—Å—Ç–Ω–æ–µ.
# ------------------------------------------------------------------

# from fractions import Fraction as F

tuple1 = (input()), (input())

print(tuple1[0], '+', tuple1[1], '=', (F(tuple1[0]) + F(tuple1[1])))
print(tuple1[0], '-', tuple1[1], '=', (F(tuple1[0]) - F(tuple1[1])))
print(tuple1[0], '*', tuple1[1], '=', (F(tuple1[0]) * F(tuple1[1])))
print(tuple1[0], '/', tuple1[1], '=', F(F(tuple1[0]), F(tuple1[1])))


# ------------------------------------------------------------------

# from fractions import Fraction

n, m = input(), input()
n1, m1 = Fraction(n), Fraction(m)

print(f'{n} + {m} = {n1 + m1}')
print(f'{n} - {m} = {n1 - m1}')
print(f'{n} * {m} = {n1 * m1}')
print(f'{n} / {m} = {n1 / m1}')
# __________________________________________________________________


# –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 1
# 8 468
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# ------------------------------------------------------------------

# from fractions import Fraction as F
n = int(input())

lst = [F(1, el * el) for el in range(1, n + 1)]
print(F(sum(lst)))

# ------------------------------------------------------------------
# from fractions import Fraction as F
print(sum([F(1, i**2) for i in range(1, int(input()) + 1)]))
# __________________________________________________________________


# –°—É–º–º–∞ –¥—Ä–æ–±–µ–π 2
# 8 426
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—é –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# ------------------------------------------------------------------

# from fractions import Fraction as F
# import math
n = int(input())

lst = [F(1, math.factorial(i)) for i in range(1, n + 1)]
print(F(sum(lst)))

# ------------------------------------------------------------------
# from math import factorial
# from fractions import Fraction as F
print(sum(F(1 / F(factorial(i))) for i in range(1, int(input()) + 1)))
# __________________________________________________________________


#
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Ä–∏—Å—É–µ—Ç —Å–Ω–µ–∂–∏–Ω–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
#
# ------------------------------------------------------------------


t.Screen().bgcolor('cyan')


def snowflake(size):

    colors = ['red', 'orange', 'yellow',
              'green', 'deepskyblue', 'blue', 'purple']
    t.pencolor(colors[r.randint(0, 6)])

    for line in range(4):

        t.fd(size / 2)

        for flake in range(4):
            t.bk(size / 8)
            t.left(45)
            t.fd(size / 10)
            t.bk(size / 10)
            t.rt(90)
            t.fd(size / 10)
            t.bk(size / 10)
            t.left(45)

        t.lt(180)
        t.fd(size / 2)

        for flake in range(4):
            t.bk(size / 8)
            t.left(45)
            t.fd(size / 10)
            t.bk(size / 10)
            t.rt(90)
            t.fd(size / 10)
            t.bk(size / 10)
            t.left(45)

        t.lt(45)


t.speed(10)

t.penup()
t.goto(r.randint(100, 180), r.randint(100, 180))
t.pendown()
size = r.randint(20, 120)
snowflake(size)

t.penup()
t.goto(r.randint(-180, -100), r.randint(100, 180))
t.pendown()
size = r.randint(20, 120)
snowflake(size)

t.penup()
t.goto(r.randint(-180, -100), r.randint(-180, -100))
t.pendown()
size = r.randint(20, 120)
snowflake(size)

t.penup()
t.goto(r.randint(100, 180), r.randint(-180, -100))
t.pendown()
size = r.randint(20, 120)
snowflake(size)

t.penup()
t.goto(r.randint(-100, 100), r.randint(-100, 100))
t.pendown()
size = r.randint(20, 120)
snowflake(size)

t.hideturtle()

# ------------------------------------------------------------------

# __________________________________________________________________


#
#  8 761
# # –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é matrix(), –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ü—Ä–∏ —ç—Ç–æ–º (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ —Å–µ–±—è —Ç–∞–∫:

#     matrix() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É 1√ó 1, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é;
#     matrix(n) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É n√ó nn√ó n, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
#     matrix(n, m) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nn —Å—Ç—Ä–æ–∫ –∏ mm —Å—Ç–æ–ª–±—Ü–æ–≤, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω—É–ª—è–º–∏;
#     matrix(n, m, value) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∏–∑ nn —Å—Ç—Ä–æ–∫ –∏ mm —Å—Ç–æ–ª–±—Ü–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É value.

# –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# ------------------------------------------------------------------
def matrix(n=1, m=None, value=0):

    if m == None:
        m = n

    matrix1 = [[value] * m for i in range(n)]

    return matrix1
# ---------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞----------------------------------------


def matrix(n=1, m=None, value=0):
    if m is None:
        m = n
    return [[value] * m for _ in range(n)]
# __________________________________________________________________


#
# 9 133
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sq_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# ------------------------------------------------------------------
def sq_sum(*args):
    lst = [i**2 for i in args]
    return sum(lst)
# ------------------------------------------------------------------


def sq_sum(*args):
    return sum(x ** 2 for x in args)
# __________________________________________________________________


#
# 8 971
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é mean(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–µ —á–∏—Å–ª–æ–≤—ã—Ö (int –∏–ª–∏ float) –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# ------------------------------------------------------------------
def mean(*args):
    lst = [i for i in args if type(i) == int or type(i) == float]

    if len(lst) == 0:
        return float(0)
    else:
        return sum(lst) / len(lst)
# ------------------------------------------------------------------

# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é greet(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏–º–µ–Ω (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
# 8 772
#
# ------------------------------------------------------------------
def greet(name, *args):
    lst = []
    lst.append(name)
    lst.extend(args)
    return 'Hello, ' + ' and '.join(lst) + '!'

# ------------------------------------------------------------------


def greet(name, *args):
    return 'Hello, ' + name + ''.join([' and ' + n for n in args])+'!'
# __________________________________________________________________


def greet(name, *args):
    return f'Hello, {" and ".join((name,) + args)}!'
# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_products(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ª—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) –ø–æ –æ–±—Ä–∞–∑—Ü—É: <–Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞>) <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> (–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã). –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ß–∏—Å–ª–∞, —Å–ø–∏—Å–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏, —Å–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏ –∏—Ö –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
#  8 577
#
# ------------------------------------------------------------------

def print_products(*args):

    lst = [t for t in args if type(t) == str and len(t) > 0]
    dict1 = {(str(i + 1) + ')'): lst[i] for i in range(len(lst))}

    if len(lst) > 0:
        for key, value in dict1.items():
            print(key, value)
    else:
        print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
# --------------------–∫–æ–º–º–µ–Ω—Ç—ã-----------------------------------
# –º–æ–∂–Ω–æ –≤—Å—ë —Å–¥–µ–ª–∞—Ç—å –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ, –µ—Å–ª–∏ –Ω–µ —â–µ–≥–æ–ª—è—Ç—å —Å–ø–∏—Å–æ—á–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ :-)


def print_products(*args):
    cnt = 0
    for e in args:
        if type(e) == str and e:
            cnt += 1
            print(f'{cnt}) {e}')
    if cnt == 0:
        print('–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é info_kwargs(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º: <–∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞>: <–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞>, –ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ª–µ–¥—É—é—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# 8 448
#
# ------------------------------------------------------------------
def info_kwargs(**kwargs):
    for key, value in sorted(kwargs.items()):
        print('{}{}{}'.format(key, ': ', value))

# info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher')

# ------------------------------------------------------------------

# __________________________________________________________________

# –î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π min() –∏ max() –≤—ã–≤–æ–¥–∏—Ç —Ç–µ –∫–æ—Ä—Ç–µ–∂–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ),
# –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key.
# 8 754
#
# ------------------------------------------------------------------


def arithmetical_mean(nums):
    return sum(nums) / len(nums)


numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10,
                                                                                                            20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]

print(min(numbers, key=arithmetical_mean))
print(max(numbers, key=arithmetical_mean))
# ------------------------------------------------------------------


def mean(args):
    return sum(args)/len(args)


numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10,
                                                                                                            20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]

print(min(numbers, key=mean), max(numbers, key=mean), sep='\n')
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ points –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Ç–æ—á–∫–∏ (0;‚Äâ0)(0;0)). –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç O(0;‚Äâ0)O(0;0) –¥–æ —Ç–æ—á–∫–∏ A(x;‚Äây)A(x;y) —Ä–∞–≤–Ω–æ OA=x2+y2OA=x2+y2
# 8 601
# ------------------------------------------------------------------

# from math import sqrt


def distance(point):
    return math.sqrt(point[0]**2 + point[1]**2)


points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2),
          (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
points.sort(key=distance)


print(points)

# ------------------------------------------------------------------
# from math import sqrt
print(sorted(points, key=lambda x: sqrt(x[0]**2 + x[1]**2)))
# __________________________________________________________________

# –î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ numbers –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å—É–º–º–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ç–µ–∂–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ—Ä—Ç–µ–∂ (2,1,3)(2,1,3) –º–µ–Ω—å—à–µ –∫–æ—Ä—Ç–µ–∂–∞ (6,4,5)(6,4,5), —Ç–∞–∫ –∫–∞–∫ 1+3<4+61+3<4+6. –ü—Ä–∏ —ç—Ç–æ–º –∫–æ—Ä—Ç–µ–∂ (1,2,9)(1,2,9) —Ä–∞–≤–µ–Ω –∫–æ—Ä—Ç–µ–∂—É (4,5,6)(4,5,6), —Ç–∞–∫ –∫–∞–∫ 1+9 = 4+61+9 = 4+6.
# 8 559
#
# ------------------------------------------------------------------


def func1(tup):
    return min(tup) + max(tup)


numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100),
           (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
numbers.sort(key=func1)


print(numbers)

# ------------------------------------------------------------------
numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100),
           (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]
print(sorted(numbers, key=lambda tup: min(tup) + max(tup)))
# __________________________________________________________________

# –°–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∫ —Ö–æ—á–µ—à—å
# 8 424
# –°–ø–∏—Å–æ–∫ athletes —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞—Ö –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π: (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é:

#     11: –ø–æ –∏–º–µ–Ω–∏;
#     22: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É;
#     33: –ø–æ —Ä–æ—Å—Ç—É;
#     44: –ø–æ –≤–µ—Å—É.
athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30),
            ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]

n = int(input())


def f_sort(tup):
    return tup[n]


atlet = sorted(athletes, key=f_sort)

for tup in atlet:
    print(*tup)
# ------------------------------------------------------------------
athletes = [('–î–∏–º–∞', 10, 130, 35), ('–¢–∏–º—É—Ä', 11, 135, 39), ('–†—É—Å–ª–∞–Ω', 9, 140, 33), ('–†—É—Å—Ç–∞–º', 10, 128, 30),
            ('–ê–º–∏—Ä', 16, 170, 70), ('–†–æ–º–∞', 16, 188, 100), ('–ú–∞—Ç–≤–µ–π', 17, 168, 68), ('–ü–µ—Ç—è', 15, 190, 90)]


def gen_comparator(field=1):
    def comp(seq):
        return seq[field - 1]
    return comp


cmp = gen_comparator(int(input()))
athletes.sort(key=cmp)
for a in athletes:
    print(*a)

# ------------------------------------------------------------------

# __________________________________________________________________

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# 8 362
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É.

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:

#     –∫–≤–∞–¥—Ä–∞—Ç: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç;
#     –∫—É–±: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫—É–±;
#     –∫–æ—Ä–µ–Ω—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞;
#     –º–æ–¥—É–ª—å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–æ–¥—É–ª—å;
#     —Å–∏–Ω—É—Å: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω—É—Å —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.

# import math


def func_result(n, o):
    operations_dict = {'–∫–≤–∞–¥—Ä–∞—Ç': n**2, '–∫—É–±': n**3,
                       '–∫–æ—Ä–µ–Ω—å': n**0.5, '–º–æ–¥—É–ª—å': abs(n), '—Å–∏–Ω—É—Å': math.sin(n)}

    return operations_dict[o]


num = int(input())
operation = input()

print(func_result(num, operation))


# ------------------------------------------------------------------


# ------------------------------------------------------------------

# __________________________________________________________________

# –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞-1
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏—Ö —Ü–∏—Ñ—Ä. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—É–º–º—É —Ü–∏—Ñ—Ä, —Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
# 8 224
# ------------------------------------------------------------------


def func_sum(s):
    total = 0
    for c in s:
        total += int(c)
    return total


s1 = input().split()
print(*sorted(s1, key=func_sum))

# --------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞------------------------------------


def comparator(n):
    return sum([int(i) for i in str(n)])


numbers = [int(i) for i in input().split()]

print(*sorted(numbers, key=comparator))
# __________________________________________________________________

# –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞-2
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è —Å—É–º–º—ã –∏—Ö —Ü–∏—Ñ—Ä. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ —É –¥–≤—É—Ö —á–∏—Å–µ–ª –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Å—É–º–º–∞ —Ü–∏—Ñ—Ä, –∏—Ö —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è.
#
# ------------------------------------------------------------------


def func_sum(s):
    el = sum([int(c) for c in str(s)])
    # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ sorted() (–∏–ª–∏ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ sort()) —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–π–¥–µ—Ç –ø–æ –ø–µ—Ä–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–∞—Ä –∫–æ—Ä—Ç–µ–∂–∞, –∞ –≤ —Å–ª—É—á–∞–µ –∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äì –ø–æ –≤—Ç–æ—Ä—ã–º.
    return (el, s)


s1 = [int(el) for el in input().split()]


print(*sorted(s1, key=func_sum))

# ------------------------------------------------------------------


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ map() –æ–∫—Ä—É–≥–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ numbers –¥–æ 22 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# 8 430
#

# ------------------------------------------------------------------
def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def round1(num):
    return round(num, 2)


numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013,
           23.22222, 90.09873, 45.45, 314.1528, 2.71828, 1.41546]

lst = map(round1, numbers)
print(*lst, sep='\n')
# __________________________________________________________________


# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ map() –æ—Ç–±–∏—Ä–∞–µ—Ç –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ numbers —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –¥–∞—é—â–∏–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 55 –æ—Å—Ç–∞—Ç–æ–∫ 22, –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –∫—É–±—ã, –∫–∞–∂–¥—ã–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# 8 285
#
# ------------------------------------------------------------------
def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
def func_filter(elem1):
    return elem1 % 5 == 2 and len(str(elem1)) == 3

# –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—É–±


def func_cube(elem2):
    return elem2**3


numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163, 345, 394,
           560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]

# str_lst = map(str, numbers)
filter_lst = filter(func_filter, numbers)


print(*[func_cube(el) for el in filter_lst], sep='\n')


# ------------------------------------------------------------------
def numb(num):
    return 99 < num < 1000 and num % 5 == 2


def cube(num):
    return num**3


numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163, 345, 394,
           560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]

print(*map(cube, filter(numb, numbers)), sep='\n')
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ numbers.
# 8 252
#
# ------------------------------------------------------------------

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.


def reduce(operation, items, initial_value):
    acc = initial_value
    for item in items:
        acc = operation(acc, item)
    return acc


def sum_el(x, y):
    return x**2 + y**2


numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58,
           60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]

total_squares = reduce(sum_el, numbers, 0)
print(total_squares)


# ------------------------------------------------------------------
def square(y):
    return y**2


numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58,
           60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]

print(sum(map(square, numbers)))

# ------------------------------------------------------------------


def sum_el(x, y):
    return x + y**2


numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58,
           60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]

total_squares = reduce(sum_el, numbers, 0)
print(total_squares)
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 77 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ filter(), map() –∏ sum().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–∞ 77 –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞.
#  8 128
#
# ------------------------------------------------------------------

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞-–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.


def reduce(operation, items, initial_value):
    acc = initial_value
    for item in items:
        acc = operation(acc, item)
    return acc


def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result


def sum_sqr(y):
    return y**2


def filter_num(x):
    return x % 7 == 0 and 10 <= abs(x) <= 100


def add(x, y):
    return x + y


numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202, 58, 99, 270, 219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35, 152, 115, 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5, 187, 220, -8, 111, 285,
           5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148, 242, 33, 35, 211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73, 197, 272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94, 279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]

lst1 = filter(filter_num, numbers)
lst2 = map(sum_sqr, lst1)

total_sqr = reduce(add, lst2, 0)
print(total_sqr)
# ------------------------------------------------------------------

# __________________________________________________________________

#
#
#
# ------------------------------------------------------------------


def add3(x):
    return x + 3


def mul7(x):
    return x * 7


def func_apply(func, lst):
    res = []
    for i in lst:
        res.append(func(i))


print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
print(func_apply(str, [1, 2, 3, 4, 5, 6]))
# ------------------------------------------------------------------


def func_apply(func, lst):
    res = []
    for i in lst:
        res.append(func(i))
    return res
# __________________________________________________________________


#
#
#
# ------------------------------------------------------------------
users = [('Timur', 28), ('Ruslan', 21), ('Roman', 30),
         ('Soltan', 24), ('Robert', 1)]
# –ø–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ—Ä—Ç–µ–∂–µ
result = max(users, key=lambda x: x[1])
print(result)

# ------------------------------------------------------------------

# __________________________________________________________________

#
#
#
# ------------------------------------------------------------------

# from functools import reduce

numbers = range(10)
obj = map(lambda x: x + 1, numbers)
obj = filter(lambda x: x % 2 == 1, obj)
result = reduce(lambda x, y: x + y, obj, 0)

print(result)
# ------------------------------------------------------------------

# __________________________________________________________________

result = list(map(lambda x: x.split(), ['a', 'a b', 'a b c']))
print(result)
#
#
# ------------------------------------------------------------------


def high_ord_func(x, func): return x + func(x)


result = high_ord_func(2, lambda x: x * x) + high_ord_func(5, lambda x: x + 3)

print(result)
# ------------------------------------------------------------------

# __________________________________________________________________

# –¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:

#     –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ floats –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≤–æ–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞;
#     —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ words  –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤;
#     –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers.

# –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ç–æ—Ä–æ–ø–∏–ª—Å—è –∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—É.
# 8 232
#
# ------------------------------------------------------------------

floats = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88,
          4.59, 34.23, 12.12, 4.67, 2.45, 9.32]
words = ['racecar', 'akinremi', 'deed', 'temidayo',
         'omoseun', 'civic', 'TATTARRATTAT', 'malayalam', 'nun']
numbers = [4, 6, 9, 23, 5]

# –ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
map_result = list(map(lambda num: round(num**2, 1), floats))
filter_result = list(
    filter(lambda name: name == name[::-1] and len(name) > 4, words))
reduce_result = reduce(lambda num1, num2: num1 * num2, numbers, 1)

print(map_result)
print(filter_result)
print(reduce_result)

# ------------------------------------------------------------------

# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(), map(), sorted() –∏ reduce() –≤—ã–≤–æ–¥–∏—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Å–æ–∫ primary –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 10‚Äâ000‚Äâ000 —á–µ–ª–æ–≤–µ–∫,
#  –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# Cities: Beijing, Buenos Aires, ...
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ "–ø–æ–∫–∞—Ä–∞–µ—Ç" –≤–∞—Å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(), map(), sorted() –∏ reduce(), –æ–¥–Ω–∞–∫–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Å—Ç–Ω–æ üòÉ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—Ç–∞–≤–∏—Ç—å –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω—É–∂–Ω–æ.
# 7 972
#
# ------------------------------------------------------------------

# from functools import reduce

data = [['Tokyo', 35676000, 'primary'],
        ['New York', 19354922, 'nan'],
        ['Mexico City', 19028000, 'primary'],
        ['Mumbai', 18978000, 'admin'],
        ['Sao Paulo', 18845000, 'admin'],
        ['Delhi', 15926000, 'admin'],
        ['Shanghai', 14987000, 'admin'],
        ['Kolkata', 14787000, 'admin'],
        ['Los Angeles', 12815475, 'nan'],
        ['Dhaka', 12797394, 'primary'],
        ['Buenos Aires', 12795000, 'primary'],
        ['Karachi', 12130000, 'admin'],
        ['Cairo', 11893000, 'primary'],
        ['Rio de Janeiro', 11748000, 'admin'],
        ['Osaka', 11294000, 'admin'],
        ['Beijing', 11106000, 'primary'],
        ['Manila', 11100000, 'primary'],
        ['Moscow', 10452000, 'primary'],
        ['Istanbul', 10061000, 'admin'],
        ['Paris', 9904000, 'primary']]

lst1 = list(filter(lambda population: population[1] > 10000000, data))
lst2 = list(filter(lambda prop: prop[2] == 'primary', lst1))
lst3 = sorted(lst2, key=lambda a: a[0])

lst4 = list(map(lambda el: el[0], lst3))
lst5 = (reduce(lambda name1, name2: name1 + name2 + '~', lst4, '')).split('~')
lst5 = list(filter(None, lst5))

print('Cities:', end=' ')
print(*lst5, sep=', ')
# ------------------------------------------------------------------

# from functools import reduce

data = [['Tokyo', 35676000, 'primary'],
        ['New York', 19354922, 'nan'],
        ['Mexico City', 19028000, 'primary'],
        ['Mumbai', 18978000, 'admin'],
        ['Sao Paulo', 18845000, 'admin'],
        ['Delhi', 15926000, 'admin'],
        ['Shanghai', 14987000, 'admin'],
        ['Kolkata', 14787000, 'admin'],
        ['Los Angeles', 12815475, 'nan'],
        ['Dhaka', 12797394, 'primary'],
        ['Buenos Aires', 12795000, 'primary'],
        ['Karachi', 12130000, 'admin'],
        ['Cairo', 11893000, 'primary'],
        ['Rio de Janeiro', 11748000, 'admin'],
        ['Osaka', 11294000, 'admin'],
        ['Beijing', 11106000, 'primary'],
        ['Manila', 11100000, 'primary'],
        ['Moscow', 10452000, 'primary'],
        ['Istanbul', 10061000, 'admin'],
        ['Paris', 9904000, 'primary']]

# –º–µ–Ω—è–µ–º –≤—Å—ë —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
cities = filter(lambda city: city[1] > 10 ** 7 and city[2] == 'primary', data)
cities = map(lambda city: city[0], cities)
cities = sorted(cities)
cities = 'Cities: ' + reduce(lambda city1, city2: f'{city1}, {city2}', cities)

print(cities)
# __________________________________________________________________

#


def full_name(first, last): return f'Full name: {first.title()} {last.title()}'


print(full_name('ben', 'affleck'))
#
# ------------------------------------------------------------------


# ------------------------------------------------------------------

# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_non_negative_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# 7 750
#
# ------------------------------------------------------------------
def check(s):
    s1 = s.replace('.', '', 1)

    return s.replace('.', '').isdigit() and s.count('.') < 2


def is_non_negative_num(x): return check(x)

# ------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞------------------------------------


def is_non_negative_num(q): return q.replace('.', '', 1).isdigit()
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_num, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º) –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# 7 480
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å—Ç–µ–ø–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ –Ω—É–∂–Ω–æ.
# ------------------------------------------------------------------


def is_num(x): return True if "-" not in x[1:] and x.replace(
    '.', '', 1).replace('-', '', 1).isdigit() else False

# ---------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------------------


def is_non_negative_num(q): return q.replace('.', '', 1).isdigit()


def is_num(q): return is_non_negative_num(
    q[1:]) if q[0] == '-' else is_non_negative_num(q)
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ sorted() –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ words, –∏–º–µ—é—â–∏–µ –¥–ª–∏–Ω—É —Ä–æ–≤–Ω–æ 66 —Å–∏–º–≤–æ–ª–æ–≤. –°–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
#  7 972


words = ['beverage', 'monday', 'abroad', 'bias', 'abuse', 'abolish', 'abuse', 'abuse', 'bid', 'wednesday', 'able', 'betray', 'accident', 'abduct', 'bigot', 'bet', 'abandon', 'besides', 'access', 'friday', 'bestow', 'abound', 'absent', 'beware',
         'abundant', 'abnormal', 'aboard', 'about', 'accelerate', 'abort', 'thursday', 'tuesday', 'sunday', 'berth', 'beyond', 'benevolent', 'abate', 'abide', 'bicycle', 'beside', 'accept', 'berry', 'bewilder', 'abrupt', 'saturday', 'accessory', 'absorb']

s1 = filter(lambda x: len(x) == 6, words)
print(*sorted(s1))
# ------------------------------------------------------------------
print(*sorted(filter(lambda x: len(x) == 6, words)))
# ------------------------------------------------------------------

# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ filter() —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ numbers –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –±–æ–ª—å—à–∏–µ 47,
# –∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Ü–µ–ª–æ –¥–µ–ª–∏—Ç –Ω–∞ –¥–≤–∞ (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ ‚Äì //).
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
# 7 797
#
# ------------------------------------------------------------------
numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80, 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35,
           64, 49, 78, 83, 27, 57, 53, 43, 35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37, 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]


numbers = filter(lambda x: True if not (
    x > 47 and x % 2 == 1) else False, numbers)
numbers = map(lambda x: x // 2 if x % 2 == 0 else x, numbers)
print(*numbers)
# ------------------------------------------------------------------
numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80, 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35,
           64, 49, 78, 83, 27, 57, 53, 43, 35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37, 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]

print(*map(lambda x: [x // 2, x][x % 2],
      filter(lambda x: x < 48 or not x % 2, numbers)))
# __________________________________________________________________

# –°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à—Ç–∞—Ç–æ–≤ –°–®–ê. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞ data –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞. –ó–∞—Ç–µ–º —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# <–Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–∞>: <—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è>
# Vermont: 626299
# Massachusetts: 7029917
# ...
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É) –ø–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –¥–≤–∞ —à—Ç–∞—Ç–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª, —Å–ª–µ–¥—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
#
# 7 716
# ------------------------------------------------------------------
data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'), (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'),
        (10711908, 'Georgia'), (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'), (7029917, 'Massachusetts'), (6910840, 'Tennessee')]

l1 = sorted(data, key=lambda x: x[1][-1], reverse=True)
l2 = map(lambda x: x[1] + ': ' + str(x[0]), l1)
print(*l2, sep='\n')
# --------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞--------------------------------------
data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'), (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'),
        (10711908, 'Georgia'), (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'), (7029917, 'Massachusetts'), (6910840, 'Tennessee')]

# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞, –ø–∏—Ç–æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ for, –∞ –Ω–µ –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ —Ü–∏–∫–ª–∞.
for pop, city in sorted(data, key=lambda x: x[1][-1], reverse=True):
    print(f'{city}: {pop}')

# ----------------–∫–æ–º–º–µ–Ω—Ç—ã--------------------------------------------------
for i in sorted(data, key=lambda x: x[1][-1], reverse=True):
    print(f'{i[1]}: {i[0]}')
# __________________________________________________________________

# –°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã —Å–ª–æ–≤, –∞ –∑–∞—Ç–µ–º –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
#  7 678
# ------------------------------------------------------------------
data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥', '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º',
        '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥', '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
l1 = sorted(data)
l2 = sorted(l1, key=lambda x: len(x))
print(*l2)
# ------------------------------------------------------------------
data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥', '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º',
        '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥', '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
print(*sorted(sorted(data), key=lambda x: len(x)))
# __________________________________________________________________

# –°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ max() –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
# –ü–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key  —Ñ—É–Ω–∫—Ü–∏–∏ max().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ª—å–∑—è.
#
# 7 742
# ------------------------------------------------------------------
mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday', 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271, 2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot', 'abuse', 'abrupt', 343772,
              'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet', 859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]

l1 = filter(lambda x: True if type(x) != str else False, mixed_list)
print(max(l1))
# print(max(filter(lambda x: type(x) == int, mixed_list)))

# -------------–∫–æ–º–º–µ–Ω—Ç–æ–≤--------------------------------------------------
mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday', 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271, 2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot', 'abuse', 'abrupt', 343772,
              'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet', 859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]
print(max(mixed_list, key=lambda x: (isinstance(x, int), x)))
# __________________________________________________________________

# –°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ —Å—Ç—Ä–æ–∫.  –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key  —Ñ—É–Ω–∫—Ü–∏–∏ sorted().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –±—ã —Å–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∞–ª –∑–Ω–∞—á–µ–Ω–∏—è:
#
# 7 581
# ------------------------------------------------------------------
mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry', 15, 65, 'abate', 'thursday', 76, 70, 94, 35, 36, 'berth', 41, 'abnormal', 'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60, 'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12, 'abuse',
              78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet', 64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46, 'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday', 'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent', 76, 46, 'betray', 47, 'able', 11]

l1 = sorted(list(filter(lambda x: (type(x) == str), mixed_list))) + \
    sorted((filter(lambda x: (type(x) == int), mixed_list)))


print(*sorted(list(filter(lambda x: (type(x) == int), mixed_list))) +
      sorted((filter(lambda x: (type(x) == str), mixed_list))))
# ----------------–∫–æ–º–º–µ–Ω—Ç—ã----------------------------------------------
print(*sorted(mixed_list, key=lambda x: (isinstance(x, str), x)))
# __________________________________________________________________

# –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
# 7 706
# –í —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ RGB —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
#     R ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
#     G ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
#     B ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–∏–Ω–µ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞.

# –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è –∫–∞–∫ RGB –∏ (255-R)(255-G)(255-B). –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ö–æ—Ä–æ—à–æ –≥–∞—Ä–º–æ–Ω–∏—Ä—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —Ç—Ä–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç—Ä–∏ —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã R, G –∏ B –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞,  —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ R, G –∏ B –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ map().
# ------------------------------------------------------------------
rgb1 = [int(i) for i in input().split()]
rgb2 = map(lambda x: 255 - x, rgb1)
print(*rgb2)
# –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
# print(*map(lambda x: 255 - x, [int(i) for i in input().split()]))
# ------------------------------------------------------------------
print(*map(lambda x: 255-x, map(int, input().split())))
# –∏–ª–∏
print(*map(lambda c: 255 - int(c), input().split()))
# __________________________________________________________________

# –ó–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ üå∂Ô∏è
# 7 021
# –ú–Ω–æ–≥–æ—á–ª–µ–Ω–æ–º —Å—Ç–µ–ø–µ–Ω–∏ n –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–∞
# anxn+an‚àí1xn‚àí1+‚Ä¶+a2x2+a1x+a0
# an‚Äãxn+an‚àí1‚Äãxn‚àí1+‚Ä¶+a2‚Äãx2+a1‚Äãx+a0‚Äã–≥–¥–µ an,‚Äâan‚àí1,‚Ä¶,a2,‚Äâa1,‚Äâa0an‚Äã,an‚àí1‚Äã,‚Ä¶,a2‚Äã,a1‚Äã,a0‚Äã ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ (an‚â†0an‚ÄãÓÄ†=0).
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ xx –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ xx.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ xx –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ xx.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –∑–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω 2x2+4x+32x2+4x+3, –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç –∑–∞–¥–∞–µ—Ç –º–Ω–æ–≥–æ—á–ª–µ–Ω x6+2x5+3x4+4x3+5x2+6x+7x6+2x5+3x4+4x3+5x2+6x+7.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ evaluate(coefficients, x), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –§—É–Ω–∫—Ü–∏—è evaluate() –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ reduce().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é evaluate(), —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòÄ.
# ------------------------------------------------------------------

# from functools import reduce


def evaluate(coefficients, x):
    pow1 = range(len(coefficients) - 1, -1, -1)
    res1 = map(lambda k, p: k * x**p, coefficients, pow1)
    res2 = reduce((lambda a, b: a + b), res1, 0)

    return res2


kfs = [int(i) for i in input().split()]
n = int(input())

print(evaluate(kfs, n))
# ------------------------------------------------------------------
# from functools import reduce


def evaluate(coefficients, x): return reduce(
    lambda s, a: s * x + a, coefficients, 0)


print(evaluate([*map(int, input().split())], int(input())))
# __________________________________________________________________
# from functools import reduce


def evaluate(coefficients, x):
    return reduce(lambda a, b: a * x + b, coefficients)


coefficients = list(map(int, input().split()))
x = int(input())

print(evaluate(coefficients, x))
# ------------------------------------------------------------------


# –§—É–Ω–∫—Ü–∏—è ignore_command() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç command ‚Äì –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å,
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ignore –∏ False ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç.
# 7 485
#
# ------------------------------------------------------------------
def ignore_command(command):
    ignore = ['alias', 'configuration', 'ip', 'sql',
              'select', 'update', 'exec', 'del', 'truncate']

    return all(map(lambda x: x in command, ignore))


print(ignore_command('delete'))
print(ignore_command('trancate'))


# ------------------------------------------------------------------

# __________________________________________________________________

# –ò—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø–æ —Ç—Ä–µ–º —Å–ø–∏—Å–∫–∞–º countries, capitals –∏ population –≤—ã–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# <capital> is the capital of <country>, population equal <population> people.
# Moscow is the capital of Russia, population equal 145934462 people.
# Washington is the capital of USA, population equal 331002651 people.
# ...
#
# 7 665
# ------------------------------------------------------------------
countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
population = [145_934_462, 331_002_651, 80_345_321,
              67_886_011, 65_273_511, 1_380_004_385]

for a, b, c in zip(countries, capitals, population):
    print(f'{b} is the capital of {a}, population equal {c} people.')


# ------------------------------------------------------------------

# __________________________________________________________________

# –í–Ω—É—Ç—Ä–∏ —à–∞—Ä–∞
# 7 370
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∞–±—Å—Ü–∏—Å—Å (xx), –æ—Ä–¥–∏–Ω–∞—Ç (yy) –∏ –∞–ø–ø–ª–∏–∫–∞—Ç (zz) —Ç–æ—á–µ–∫ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ª–∏–±–æ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —à–∞—Ä–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–¥–∏—É—Å–æ–º R =2R =2.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —à–∞—Ä–∞ (—Å—Ñ–µ—Ä—ã) –∏–º–µ–µ—Ç –≤–∏–¥ x2+y2+z2=R2.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ all() –∏ zip().
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è abscissas, ordinates, applicates –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 5. –£–∫–∞–∑–∞–Ω–Ω—ã–π —à–∞—Ä –∏–º–µ–µ—Ç –≤–∏–¥:

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ True –µ—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ —à–∞—Ä–∞ –∏ False, –µ—Å–ª–∏ –≤–Ω–µ.
# ------------------------------------------------------------------
abscissas = [float(i) for i in input().split()]
ordinates = [float(i) for i in input().split()]
applicates = [float(i) for i in input().split()]

print(all(map(lambda x: x[0]**2 + x[1]**2 + x[2] **
      2 <= 4, zip(abscissas, ordinates, applicates))))
# ------------------------------------------------------------------

# __________________________________________________________________

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å
# 7 425
# IP-–∞–¥—Ä–µ—Å ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP/IP.
# –í 44-–π –≤–µ—Ä—Å–∏–∏ IP-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 3232-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–µ—Ç—ã—Ä—ë—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 00 –¥–æ 255255 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.2192.168.1.2.

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ all() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞: –≤—Å–µ –ª–∏ –æ–∫—Ç–µ—Ç—ã –≤ IP-–∞–¥—Ä–µ—Å–µ ‚Äì —á–∏—Å–ª–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 00 –¥–æ 255255.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.x.x.x, –≥–¥–µ x ‚Äì –Ω–µ–ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ 0-9, a-z.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ True –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–µ–¥—É—â–∏–µ –Ω—É–ª–∏ —Å–ª–µ–¥—É–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å:
# 0001 = 1
# 006 = 6
# 0213 = 213
# 0000 = 0
# 00345 = 345

# ------------------------------------------------------------------


def correct_ip(lst):

    return all(map(lambda x: x.isdigit() and 0 <= int(x) <= 255, lst))


ip = [i for i in input().split('.')]
print(correct_ip(ip))
# -----------------------—Ç–æ–∂–µ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—á–µ--------------------------------------
print(all(map(lambda x: x.isdigit() and 0 <= int(x) <= 255, input().split('.'))))
# __________________________________________________________________

# –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞
# 6 984
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ aa –∏ bb. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ all() –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [a;‚Äâb][a;b], –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –∫–∞–∂–¥—É—é —Å–æ–¥–µ—Ä–∂–∞—â—É—é—Å—è –≤ –Ω–∏—Ö —Ü–∏—Ñ—Ä—É –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ aa –∏ bb –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [a;‚Äâb][a;b], —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏, –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ß–∏—Å–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω—É–ª–∏, –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏—Ö –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
# ------------------------------------------------------------------


a = int(input())
b = int(input())


# ------------------------------------------------------------------

# __________________________________________________________________

# –•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å
# 7 112
# –•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å –ø–æ —É—Å–ª–æ–≤–∏—è–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Å–æ—Å—Ç–æ–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑ 77 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É, –∑–∞–≥–ª–∞–≤–Ω—É—é –∏ —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π any() –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ—Ä–æ—à –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äì —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# ------------------------------------------------------------------

def correct_pass(password):
    l1 = list(password)
    bool1 = any(map(lambda x: x.isdigit(), l1))
    bool2 = any(map(lambda x: x.islower(), l1))
    bool3 = any(map(lambda x: x.isupper(), l1))

    return len(l1) >= 7 and bool1 and bool2 and bool3


if correct_pass(input()):
    print('YES')
else:
    print('NO')
# --------–∫–æ–º–º–µ–Ω—Ç—ã--------------------------------------------------
password = input()
print('YES' if len(password) > 6 and
      any(map(str.isdigit, password)) and
      any(map(str.isupper, password)) and
      any(map(str.islower, password)) else 'NO')
# __________________________________________________________________

# –û—Ç–ª–∏—á–Ω–∏–∫–∏
# 6 896
# –£—á–∏—Ç–µ–ª—å –¢–∏–º—É—Ä –ø—Ä–æ–≤–µ—Ä—è–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞—Å—Å–∞—Ö –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã BEEGEEK –∏ —Ä–µ—à–∏–ª —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–ª–∏—á–Ω–∏–∫ ‚Äì —É—á–µ–Ω–∏–∫ —Å –æ—Ü–µ–Ω–∫–æ–π 55 –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π all(), any() –¥–ª—è –ø–æ–º–æ—â–∏ –¢–∏–º—É—Ä—É –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤. –ó–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤–≤–æ–¥–∏—Ç—Å—è –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∏–¥–∞:

#     –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ kk ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ;
#     –¥–∞–ª–µ–µ –≤–≤–æ–¥–∏—Ç—Å—è kk —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–ª–∏—á–Ω–∏–∫, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# ------------------------------------------------------------------

answers = []
for i in range(int(input())):
    f = any(map(lambda x: x.endswith('5'), [
            input() for i in range(int(input()))]))
    answers.append(f)
answers_copy = answers.copy()
if all(answers_copy) == True:
    print('YES')
else:
    print('NO')

# --------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------------
n = int(input())
students = []
for _ in range(n):
    m = int(input())
    temp = []
    for _ in range(m):
        surname, mark = input().split()
        temp.append((surname, int(mark)))
    students.append(temp)

result = all(map(lambda x: any(map(lambda y: y[1] == 5, x)), students))
print('YES' if result else 'NO')


# __________________________________________________________________
# ___________________–≠–ö–ó–ê–ú–ï–ù_____________________________
# __________________________________________________________________


# –ü–∏—Å—å–º–æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
# 5 979
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_letter(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º:

# To: <mail>
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <name>!
# –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç <date>, –≤ <time>.
# –ü–æ –∞–¥—Ä–µ—Å—É: <place>.
# –≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å <teacher> –≤ –∫–∞–±–∏–Ω–µ—Ç–µ <number>.
# –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!

# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –ø—è—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ mail, name, date, time, place –∏ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö teacher, number –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞. –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ teacher —É—á–∏—Ç–µ–ª–µ–º –±—É–¥–µ—Ç –¢–∏–º—É—Ä –ì—É–µ–≤, –∞ –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ number, —Ç–æ –∫–∞–±–∏–Ω–µ—Ç –±—É–¥–µ—Ç 1717.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

# print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00', '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2'))
# print()
# print(generate_letter('lara@yandex.ru', '–õ–∞—Ä–∏—Å–∞', '10 –¥–µ–∫–∞–±—Ä—è', '12:00',
#                       '–ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2', '–í–∞—Å–∏–ª—å –Ø—Ä–æ—à–µ–≤–∏—á', 23))

# –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

# To: lara@yandex.ru
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –õ–∞—Ä–∏—Å–∞!
# –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç 10 –¥–µ–∫–∞–±—Ä—è, –≤ 12:00.
# –ü–æ –∞–¥—Ä–µ—Å—É: –ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2.
# –≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¢–∏–º—É—Ä –ì—É–µ–≤ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 17.
# –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!

# To: lara@yandex.ru
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –õ–∞—Ä–∏—Å–∞!
# –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç 10 –¥–µ–∫–∞–±—Ä—è, –≤ 12:00.
# –ü–æ –∞–¥—Ä–µ—Å—É: –ß–∞—Å–æ–≤–∞ 23, –∫–æ—Ä–ø—É—Å 2.
# –≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –í–∞—Å–∏–ª—å –Ø—Ä–æ—à–µ–≤–∏—á –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 23.
# –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generate_letter() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
# ------------------------------------------------------------------
def generate_letter(mail, name, date, time, place, teacher='–¢–∏–º—É—Ä –ì—É–µ–≤', number=17):
    lst = [
        f'To: {mail}',
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!',
        f'–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç {date}, –≤ {time}.',
        f'–ü–æ –∞–¥—Ä–µ—Å—É: {place}.',
        f'–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å {teacher} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {number}.',
        f'–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!',
    ]

    return '\n'.join(lst)

# ------------------------------------------------------------------


def generate_letter(mail, name, date, time, place, teacher='–¢–∏–º—É—Ä –ì—É–µ–≤', number=17):
    return f'''To: {mail}
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!
–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç {date}, –≤ {time}.
–ü–æ –∞–¥—Ä–µ—Å—É: {place}. 
–≠–∫–∑–∞–º–µ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å {teacher} –≤ –∫–∞–±–∏–Ω–µ—Ç–µ {number}. 
–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ!'''
# __________________________________________________________________

# Pretty print
# 5 656
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é pretty_print(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ —Å —Ä–∞–º–∫–æ–π.
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç data ‚Äì —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –∏ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã—Ö  –∞—Ä–≥—É–º–µ–Ω—Ç–∞ side –∏ delimiter –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
# –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç side, —Ç–æ –ø–æ–ª–∞–≥–∞–µ–º side='-', –∞ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç delimiter, —Ç–æ –ø–æ–ª–∞–≥–∞–µ–º delimiter='|'.
# ------------------------------------------------------------------


def pretty_print(data, side='-', delimiter='|'):

    c = ' ' + delimiter + ' '
    data2 = map(lambda x: str(x) if type(x) != str else x, data)
    s2 = f'{delimiter} {c.join(data2)} {delimiter}'
    s_side = side*len(s2)
    s1 = f' {s_side} '

    return print(f'''{s1}
    {s2}
    {s1}''')


pretty_print([1, 2, 10, 23, 123, 3000])
pretty_print(['abc', 'def', 'ghi', '12345'])
pretty_print(['abc', 'def', 'ghi'], side='*')
pretty_print(['abc', 'def', 'ghi'], delimiter='#')
pretty_print(['abc', 'def', 'ghi'], side='*', delimiter='#')

# --------------------–∫–æ–º–º–µ–Ω—Ç—ã----------------------------------------


def pretty_print(data, side='-', delimeter='|'):
    line = f" {delimeter} ".join(map(str, data))
    print(' ' + side * (2 + len(line)))
    print(delimeter + ' ' + line + ' ' + delimeter)
    print(' ' + side * (2 + len(line)))
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é concat(), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (sep). –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω, –∏–º —Å–ª—É–∂–∏—Ç –ø—Ä–æ–±–µ–ª.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è concat() –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
# 5 959
#


def concat(*args,  sep=' '):

    return sep.join([str(i) for i in args])


# ------------------------------------------------------------------

# __________________________________________________________________

# –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce().
# def product_of_odds(data):   # data - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
#     result = 1
#     for i in data:
#         if i % 2 == 1:
#             result *= i
#     return result

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ "–ø–æ–∫–∞—Ä–∞–µ—Ç" –≤–∞—Å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce(), –æ–¥–Ω–∞–∫–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Å—Ç–Ω–æ üòÉ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.
#
# 6 039
# ------------------------------------------------------------------

# from functools import reduce

def product_of_odds(data):   # data - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    data1 = filter(lambda x: x % 2 == 1, data)

    return reduce(lambda x, y: x * y, data1, 1)

# --------------------–∫–æ–º–º–µ–Ω—Ç—ã----------------------------------------------
# from functools import reduce
# from operator import mul


def product_of_odds(data):
    return reduce(mul, filter(lambda x: x % 2 == 1, data), 1)
# __________________________________________________________________


# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ words. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ words, –∞ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é map() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
# 5 962
#
# ------------------------------------------------------------------
words = 'the world is mine take a look what you have started'.split()

print(*(list(map(lambda x: f'"{x}"', words))))

# ------------------------------------------------------------------

# __________________________________________________________________

# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª numbers. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –∏ –ø–µ—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é filter() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
#  6 041
#
# ------------------------------------------------------------------
numbers = [18, 191, 9009, 5665, 78, 77, 45, 23, 19991, 908,
           8976, 6565, 5665, 10, 1000, 908, 909, 232, 45654, 786]
print(*(list(filter(lambda x: x != x[::-1], map(lambda x: str(x), numbers)))))

# -------------------------–∫–æ–º–º–µ–Ω—Ç—ã------------------------------------
numbers = [18, 191, 9009, 5665, 78, 77, 45, 23, 19991, 908,
           8976, 6565, 5665, 10, 1000, 908, 909, 232, 45654, 786]
print(*filter(lambda x: str(x) != str(x)[::-1], numbers))
# __________________________________________________________________

# –î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π. –î–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ sorted_numbers –±—ã–ª —É–ø–æ—Ä—è–¥–æ—á–µ–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–ø–∏—Å–∫–∞ numbers.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
# 6 025
#
# ------------------------------------------------------------------
numbers = [(10, -2, 3, 4), (-13, 56), (1, 9, 2), (-1, -9, -45, 32), (-1, 5, 1),
           (17, 0, 1), (0, 1), (3,), (39, 12), (11, -23), (10, -100, 21, 32), (3, -8), (1, 1)]

sorted_numbers = sorted(numbers, key=lambda x: sum(x) / len(x), reverse=True)

print(sorted_numbers)

# ------------------------------------------------------------------

# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é call(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–µ—ë –∏ –¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
# 5 879
#
# ------------------------------------------------------------------


def mul7(x):
    return x * 7


def add2(x, y):
    return x + y


def add3(x, y, z):
    return x + y + z

# —Ç–æ–ª—å–∫–æ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–∏—Å–∞—Ç—å


def call(func, *args):
    return func(*args)


print(call(mul7, 10))
print(call(add2, 2, 7))
print(call(add3, 10, 30, 40))
print(call(bool, 0))

# ------------------------------------------------------------------

# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compose(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ –¥—Ä—É–≥–∏—Ö –æ–¥–Ω–æ–∞—Ä–≥—É–º–µ–Ω—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏ f –∏ g –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é. –≠—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç x –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –Ω–µ–º—É –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫ f(g(x)).
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è compose() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
# 5 822
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é compose() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è h(x) = f(g(x)), –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –≤–∞–∂–µ–Ω!
# ------------------------------------------------------------------
# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏


def compose(f, g):
    def a(x):
        return f(g(x))
    return a


# ------------------------------------------------------------------
def compose(f, g):
    return lambda x: f(g(x))  # —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è h(x) = f(g(x))
# __________________________________________________________________

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–º–≤–æ–ª –æ–¥–Ω–æ–π –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (+, -, *, /) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è arithmetic_operation() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
# #–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ú–æ–¥—É–ª—å operator –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è —Ç—É—Ç).
# 5 854
# ------------------------------------------------------------------


def arithmetic_operation(operation):
    if operation == '+':
        return lambda x, y: x + y
    if operation == '-':
        return lambda x, y: x - y
    if operation == '*':
        return lambda x, y: x * y
    if operation == '/':
        return lambda x, y: x / y


# ---------------!!!!!!!!!!!!!!!!!!!!---------------------------------------------------
# –∫–æ–≥–¥–∞ –≤—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è, –∞ –Ω–µ –µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–æ –µ—Å—Ç—å –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É, –∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –µ–µ –≤—ã–∑–æ–≤—É—Ç –µ—â–µ —Ä–∞–∑ —É–∂–µ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –ö –ø—Ä–∏–º–µ—Ä—É:
def arithmetic_operation(operation):
    return {'+': lambda x, y: x+y, '-': lambda x, y: x-y, '*': lambda x, y: x*y, '/': lambda x, y: x/y}[operation]

# –°–∞–º–∞ —Ñ-—Ü–∏—è arithmetic_operation –≤–µ—Ä–Ω–µ—Ç –Ω—É–∂–Ω—É—é —Ñ-—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É –∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è(–µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è) –∑–∞–ø–∏—à–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# –î–∞–ª–µ–µ –µ—Å–ª–∏ –º—ã –≤–∑—è–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º'-'—Ç–æ –≤ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±—É–¥–µ—Ç lambda x, y: x-y –∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —á–µ—Ä–µ–∑ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
# ------------------------------------------------------------------

# from operator import *


def arithmetic_operation(operation):
    oper = {
        '+': add,
        '-': sub,
        '*': mul,
        '/': truediv
    }
    return oper[operation]

# ---------------–∏–∑ –∫–æ–º–º–æ–≤-------------------------------------


def arithmetic_operation(operation):
    return lambda x, y: eval(str(x) + operation + str(y))
# __________________________________________________________________


# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
# 5 943
# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–µ—Ç –∏—Ö. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–µ—á–∞—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤ –∫–∞–∫–æ–º –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –≤—Ö–æ–¥.
# ------------------------------------------------------------------

print(*sorted(input().split(), key=lambda x: x.lower()))


# –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π –º–µ—Ç–æ–¥, –ª—è–º–±–¥–∞ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞!
print(*sorted(input().split(), key=str.lower))
# ------------------------------------------------------------------

# __________________________________________________________________

# –ì–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤–∞
# 5 731
# –ì–µ–º–∞—Ç—Ä–∏–µ–π —Å–ª–æ–≤–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏—Ö –≤ –Ω–µ–≥–æ –±—É–∫–≤.

# –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–µ–º–∞—Ç—Ä–∏–∏ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ:

#     –ø–µ—Ä–µ–≤–µ–¥—ë–º —Å–ª–æ–≤–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä;
#     —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–∫–≤—ã –≤—ã—á–∏—Å–ª–∏–º –∫–∞–∫ –∫–æ–¥(–±—É–∫–≤—ã) - –∫–æ–¥(–±—É–∫–≤—ã A).

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ) –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –∏—Ö –≥–µ–º–∞—Ç—Ä–∏–∏. –ï—Å–ª–∏ –≥–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º) –ø–æ—Ä—è–¥–∫–µ.
# ------------------------------------------------------------------


def ord_sum(word):
    return reduce(lambda x, y: x + ord(y), word, 0)


lst = [input().upper() for i in range(int(input()))]


print(*sorted(lst, key=lambda x: ord_sum(x)), sep='\n')

# –≤—Å–ø–æ–º–∏–Ω–∞–µ–º sorted, –≤–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ: l = sorted(l, key=lambda x: (x[0], x[1])), –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑  –ö–û–†–¢–ï–ñ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ —Ä–∞–≤–Ω–æ–µ,
# —Ç–æ –æ–Ω–æ –ø–µ—Ä–µ–π–¥–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–µ [1].
#
# ------------------------------------------------------------------

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
# 5 659
# IP-–∞–¥—Ä–µ—Å ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP/IP.

# –í 44-–π –≤–µ—Ä—Å–∏–∏ IP-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 3232-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–µ—Ç—ã—Ä—ë—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 00 –¥–æ 255255, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.2192.168.1.2.

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ n ‚Äâ(n‚â•1)n (n‚â•1) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP-–∞–¥—Ä–µ—Å–æ–≤. –ó–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ IP-–∞–¥—Ä–µ—Å–∞–º–∏.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å 192.168.1.2 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É:

# 192‚ãÖ2563+168‚ãÖ2562+1‚ãÖ2561+2‚ãÖ2560=3232235778
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key.
# ------------------------------------------------------------------

n = int(input())
ip_adresses = [input() for i in range(n)]


def ip_decimal_digit(ip):
    lst = [int(i) for i in ip.split('.')]
    res = lst[0] * 256 ** 3 + lst[1] * 256 ** 2 + \
        lst[2] * 256 ** 1 + + lst[3] * 256 ** 0

    return res


print(*sorted(ip_adresses, key=ip_decimal_digit), sep='\n')


# ---------------------------_–ö–û–ù–ï–¶ –≠–ö–ó–ê–ú–ï–ù–ê-----------------------
# __________________________________________________________________

#  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
# 8 397
#  –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
# ------------------------------------------------------------------
file_name = input()
file1 = open(file_name, 'rt', encoding='utf-8')

for line in file1:
    print(line.strip())

file1.close()

# ------------------------------------------------------------------
f1 = open(input(), 'r')
print(f1.read())
f1.close()
# __________________________________________________________________

# –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
# 8 162
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É.
# ------------------------------------------------------------------
file1 = open(input(), 'rt', encoding='utf-8')

content = [line.strip() for line in file1.readlines()]
print(content[-2])  # –ü–û–°–õ–ï–î–ù–Ø–Ø –°–¢–†–û–ö–ê –í –§–ê–ô–õ–ï –ü–£–°–¢–ê–Ø

file1.close()

# ------------------------------------------------------------------
file = open(input())
print(file.readlines()[-2])
file.close()
# __________________________________________________________________

# –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª lines.txt –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
# 7 999
# ------------------------------------------------------------------
# import random

file1 = open('lines.txt', 'rt', encoding='utf-8')

content = file1.readlines()

file1.close()

rand1 = random.randint(0, len(content))
print(content[rand1])

# ------------------------------------------------------------------
# from random import choice

file = open('lines.txt')

print(choice(file.readlines()))
file.close()
# __________________________________________________________________

# –°—É–º–º–∞ –¥–≤—É—Ö-1
# 8 038
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª numbers.txt –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫, –Ω–∞ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
# ------------------------------------------------------------------

file1 = open('numbers.txt', 'rt', encoding='utf-8')

content = [int(line.strip()) for line in file1.readlines()]
file1.close()

print(sum(content))
# --------------–û–¢ –ü–†–ï–ü–û–î–ê-------------------------------------
file = open('numbers.txt')

print(sum(map(int, file)))

file.close()
# __________________________________________________________________

# –°—É–º–º–∞ –¥–≤—É—Ö-2
# 7 740
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª nums.txt. –í —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω–æ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–æ–±–µ–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª.
# ------------------------------------------------------------------
file1 = open('nums.txt', 'rt', encoding='utf-8')

lst1 = [int(line.strip())
        for line in file1.readlines() if len(line.strip()) > 0]
file1.close()

print(sum(lst1))
# ------------------------------------------------------------------
file = open('nums.txt')

print(sum(map(int, file.read().split())))

file.close()
# __________________________________________________________________

# –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
#  7 571
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª prices.txt —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –í –Ω–µ–º –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏ (\t) —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏:
#     –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞;
#     –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ);
#     —Ü–µ–Ω–∞ (–≤ —Ä—É–±–ª—è—Ö) —Ç–æ–≤–∞—Ä–∞ –∑–∞ 11 —à—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.
# ------------------------------------------------------------------
# ------------------------------------------------------------------

file1 = open('prices.txt', 'rt', encoding='utf-8')
content = list(map(lambda x: x.strip().split(), file1.readlines()))
file1.close()

res = reduce(lambda x, y: x + int(y[1]) * int(y[2]), content, 0)
print(res)
# __________________________________________________________________
file = open('prices.txt')
lst = [i.split() for i in file.readlines()]
print(sum(map(lambda x: int(x[1]) * int(x[2]), lst)))
file.close()
# __________________________________________________________________
# __________________________________________________________________


# –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
# 7 490
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª text.txt —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
# ------------------------------------------------------------------
with open('text.txt') as file1:
    line1 = file1.readline().strip()

print(line1[::-1])
# ------------------------------------------------------------------

# __________________________________________________________________


# –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
# 7 337
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª data.txt, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∏ —Ç.–¥.
# ------------------------------------------------------------------
with open('data.txt', 'rt', encoding='utf-8') as file1:
    lines = [i.strip() for i in file1.readlines()]

for i in lines[::-1]:
    print(i)

# ------------------------------------------------------------------

# __________________________________________________________________


# –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
# 7 038
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª lines.txt, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–ª–∏–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
# ------------------------------------------------------------------
with open('lines.txt', 'rt', encoding='utf-8') as file1:
    lines = file1.readlines()

res = list(filter(lambda x: x == max(len(x))), lines)
print(*res)
# ------------------------------------------------------------------

# __________________________________________________________________


# –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–∞—Ö
# 6 990
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª numbers.txt, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Å—É–º–º—É –Ω–∞ —ç–∫—Ä–∞–Ω (–¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–µ–ª –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ).
# ------------------------------------------------------------------
with open('numbers.txt', 'rt', encoding='utf-8') as file1:
    lines = [sum(map(lambda x: int(x), i.strip().split()))
             for i in file1.readlines()]

print(*lines, sep='\n')
# ------------------------------------------------------------------
with open('numbers.txt', 'r', encoding='utf-8') as data:
    for line in data:
        print(sum(map(int, line.split())))
# ------------------------------------------------------------------
with open('numbers.txt', 'r', encoding='utf-8') as data:
    for line in data:
        print(sum(map(int, line.split())))
# __________________________________________________________________


# –°—É–º–º–∞ —á–∏—Å–µ–ª –≤ —Ñ–∞–π–ª–µ
# 6 691
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª nums.txt. –í —Ñ–∞–π–ª–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã —Ü–µ–ª—ã–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ. –ß–∏—Å–ª–æ–º –Ω–∞–∑–æ–≤–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä, –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ (—á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ).
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ.
# ------------------------------------------------------------------

# import re

with open('nums.txt', 'rt', encoding='utf-8') as file1:
    line = file1.read()

sp = re.findall(r'\d+', file.read())

print(sum([int(i) for i in sp]))


# –ú–µ—Ç–æ–¥ findall –∏–∑ –º–æ–¥—É–ª—è re –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è \d+ - –∑–∞–¥–∞—ë—Ç –ª—é–±—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –æ–¥–Ω–æ–π –∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä - –µ—ë –º—ã –∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–æ —Ñ–∞–∫—Ç—É –∑–∞–º–µ–Ω—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ [0-9]
# –¢–æ–≥–¥–∞
# res = re.findall(r'\d+', file.read())
# –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π res –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∏—Å–µ–ª, –Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –¥—É–º–∞—é –≤—Å–µ –∂–µ –ø–æ–º–Ω—è—Ç map? –£–¥–∞—á–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏!


# ------------------------------------------------------------------

# __________________________________________________________________


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É
# 6 457
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª file.txt, –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Å–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫. –í—ã–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤ –ø—Ä–∏–º–µ—Ä–µ.
# ------------------------------------------------------------------

# import string

with open('file.txt', 'rt', encoding='utf-8') as file1:
    content = file1.read()


letters_amount = len(
    list(filter(lambda x: x in string.ascii_letters, content)))


word_amount = len([i.strip() for i in content.split()])


lines_amount = len(content.split('\n'))

print('Input file contains:', f'{letters_amount} letters',
      f'{word_amount} words', f'{lines_amount} lines', sep='\n')

# ------------------------------------------------------------------
print(f'''Input file contains:
{letters} letters 
{words} words 
{lines} lines''')
# ------------------------------------------------------------------

print(
    f'Input file contains:\n{word_count} letters\n{len(text1)} words\n{len(text2)} lines')
# __________________________________________________________________


# Random name and surname
# 6 590
# –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞ first_names.txt –∏ last_names.txt, –æ–¥–∏–Ω —Å –∏–º–µ–Ω–∞–º–∏, –¥—Ä—É–≥–æ–π —Å —Ñ–∞–º–∏–ª–∏—è–º–∏.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è c –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è random —Å–æ–∑–¥–∞–µ—Ç 33 —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã –∏–º—è + —Ñ–∞–º–∏–ª–∏—è, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –∏—Ö, –∫–∞–∂–¥—É—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# ------------------------------------------------------------------


with open('first_names.txt', 'rt', encoding='utf=8') as file1, open('last_names.txt', 'rt', encoding='utf=8') as file2:
    line1 = [i.strip() for i in file1.readlines()]
    line2 = [i.strip() for i in file2.readlines()]

for _ in range(3):
    print(random.choice(line1), random.choice(line2))


# ------------------------------------------------------------------
with open('first_names.txt', 'r', encoding='utf-8') as names, open('last_names.txt', 'r', encoding='utf-8') as surnames:
    names, surnames = names.readlines(), surnames.readlines()
    for i in range(3):
        print(random.choice(names).strip(), random.choice(surnames).strip())
# ------------------------------------------------------------------

with open('first_names.txt') as names, open('last_names.txt') as surnames:
    all_names = list(map(str.strip, names.readlines()))
    all_surnames = list(map(str.strip, surnames.readlines()))

    for _ in range(3):
        print(f'{random.choice(all_names)} {random.choice(all_surnames)}')
# __________________________________________________________________


# –ù–µ–æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
# 6 459
#  –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª population.txt —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω –∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é –∏—Ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–æ–º —Ç–∞–±—É–ª—è—Ü–∏–∏ '\t'.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã–≤–æ–¥—è—â—É—é –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã 'G', —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ —á–µ–º 500‚Äâ000500000 —á–µ–ª–æ–≤–µ–∫, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
# ------------------------------------------------------------------
with open('population.txt') as file1:
    lst = []
    for line in file1:
        lst.append(line.strip().split('\t'))


content1 = list(filter(lambda x: x[0][0] == 'G' and int(x[1]) > 500000, lst))
content1 = map(lambda x: x[0], content1)
print(*content1, sep='\n')

# ------------------------------------------------------------------
with open('population.txt', 'r', encoding='utf-8') as file:
    for line in file:
        line_lst = line.split()
        if line_lst[0].startswith('G') and int(line_lst[-1]) > 500_000:
            print(line_lst[0])
# __________________________________________________________________


# CSV-—Ñ–∞–π–ª
#  6 160
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω CSV-—Ñ–∞–π–ª data.csv, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é read_csv –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—è –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º–µ–Ω–∞ –∫–ª—é—á–µ–π, –∞ –∫–∞–∂–¥—É—é –ø–æ—Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–ª—é—á–µ–π.
# ------------------------------------------------------------------
def read_csv():

    with open('data.csv', 'r', encoding='utf-8') as file1:
        table1 = [i.strip() for i in file1.readline().split(',')]
        content1 = [i.strip().split(',') for i in file1.readlines()]

    lst = []
    for elem in content1:
        lst.append({table1[i]: elem[i] for i in range(len(table1))})

    return lst

# print(read_csv())
# ------------------------------------------------------------------


def read_csv() -> list[dict]:
    with open('data.csv', 'r', encoding='utf-8') as file:
        line_first = (file.readline()).strip().split(',')
        data_lst = []
        for line in file:
            data_lst.append(dict(zip(line_first, line.strip().split(','))))
        return data_lst
# __________________________________________________________________


# –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# 6 603
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ—ë –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª output.txt.
# ------------------------------------------------------------------
with open('output.txt', 'w', encoding='utf-8') as output11:

    print(input(), file=output11)
# ------------------------------------------------------------------

# __________________________________________________________________

# –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
# 6 492
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∑–∞–ø–∏—Å—ã–≤–∞—é—â—É—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª random.txt 2525 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 111111 –¥–æ 777777 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
# ------------------------------------------------------------------


with open('random.txt', 'w', encoding='utf-8') as output1:
    for _ in range(25):
        print(random.choice(range(111, 778)), sep='\n', file=output1)


# ------------------------------------------------------------------

# __________________________________________________________________

# –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
# 6 470
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª input.txt, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–∞–π–ª output.txt –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å—Ç–æ–∏—Ç –µ–µ –Ω–æ–º–µ—Ä, —Å–∏–º–≤–æ–ª ) –∏ –ø—Ä–æ–±–µ–ª. –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 11.
# ------------------------------------------------------------------

with open('input.txt', 'r', encoding='utf-8') as file1,  open('output.txt', 'w', encoding='utf-8') as file2:

    content_lines = [i.strip() for i in file1.readlines()]

    lst1 = list(enumerate(content_lines, start=1))

    l2 = list(map(lambda x: f'{x[0]}) {x[1]}', lst1))
    print(*l2, sep='\n', file=file2)


# ------------------------------------------------------------------
with open('input.txt') as fin, open('output.txt', 'w') as fout:
    fout.writelines(map(lambda x: f'{x[0]}) {x[1]}', enumerate(fin, 1)))
# __________________________________________________________________

s = 'Python'
dict1 = {}
for i, dict1[i] in enumerate(s, 1):
    i = 10

print(dict1)


# –ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥
# 6 228
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª class_scores.txt —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∑–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö –≤–∏–¥–∞: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞ (—Ñ–∞–º–∏–ª–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º). –û—Ü–µ–Ω–∫–∞ - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 00 –¥–æ 100100 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 55 –±–∞–ª–ª–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–π –∏ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª new_scores.txt.
# ------------------------------------------------------------------
with open('class_scores.txt', 'rt', encoding='utf-8') as file1:
    lines = [i.strip().split() for i in file1.readlines()]

# print(lines)
l1 = list(map(lambda x: f'{x[0]} {int(x[1]) + 5}' if int(x[1]
                                                         ) + 5 <= 100 else f'{x[0]} 100', lines))

with open('new_scores.txt', 'w', encoding='utf-8') as file2:
    print(*l1, sep='\n', file=file2)

# print(*l1, sep='\n')
# ------------------------------------------------------------------
with open('class_scores.txt') as class_scores, open('new_scores.txt', 'w') as new_scores:
    for line in class_scores:
        name, score = line.split()
        score = int(score) + 5
        if score > 100:
            score = 100
        print(name, score, file=new_scores)
# __________________________________________________________________
# put your python code here
with open('class_scores.txt', 'r', encoding='utf-8') as f1, open('new_scores.txt', 'w', encoding='utf-8') as f2:
    for member in f1.readlines():
        name, score = member.strip().split()
        print(f'{name} {min(100, int(score)+5)}', file=f2)
# __________________________________________________________________

# –ó–∞–≥–∞–¥–∫–∞ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ üå∂Ô∏è
# 5 785
#  –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª goats.txt –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ COLOURS, –¥–∞–ª–µ–µ –∏–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∫–æ–∑–ª–æ–≤. –ó–∞—Ç–µ–º –∏–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ª–æ–≤–æ–º GOATS, –∏ –¥–∞–ª–µ–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∑–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤. –ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–∑–ª–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ answer.txt –∏ –≤—ã–≤–æ–¥–∞ –≤ –Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–≥–∞–¥–∫–∏ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ.
# ------------------------------------------------------------------
with open('goats.txt', 'r', encoding='utf-8') as f1, open('answer.txt', 'w', encoding='utf-8') as f2:
    line = f1.readlines()
    # print(line)

    cont1 = []
    i = 0
    while line[i].strip() != 'GOATS':
        cont1.append(line[i].strip())
        i += 1
    cont1.pop(0)
    # print(*cont1, sep='\n')
    # print()

    cont2 = []
    while i != len(line):
        cont2.append(line[i].strip())
        i += 1
    cont2.pop(0)
    # print(*cont2, sep='\n')
    # print()

    l1 = [0] * (len(cont1))

    for i in range(len(cont1)):
        l1[i] = len(list(filter(lambda x: x == cont1[i], cont2)))

        if l1[i] > (len(cont2)) * 0.07:
            print(f'{cont1[i]}', file=f2)
    # print(*l1, sep='\n')
# ------------------------------------------------------------------

# __________________________________________________________________

# –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ üå∂Ô∏è
# 5 922
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn –∏ nn —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª output.txt –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–∫–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2 –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
# ------------------------------------------------------------------

n = int(input())
name_files = [input() for i in range(n)]

with open(f'{name_files[0]}', 'rt', encoding='utf-8') as f1, open(f'{name_files[1]}', 'rt', encoding='utf-8') as f2:
    cont1 = f1.read()
    cont2 = f2.read()

with open('output.txt', 'w', encoding='utf-8') as f3:
    print(*cont1, sep='\n', end='', file=f3)
    print(*cont2, file=f3)

# ------------------------------------------------------------------
input_files_number = int(input())
# –∑–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
input_files = [input() for _ in range(input_files_number)]

with open("output.txt", "w", encoding="utf-8") as output_f:
    for input_file in input_files:  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
        with open(input_file, "r", encoding="utf-8") as input_f:
            file_contents = input_f.read()  # —Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            output_f.write(file_contents)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
# __________________________________________________________________

# –õ–æ–≥ —Ñ–∞–π–ª üå∂Ô∏è
#  5 752
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª logfile.txt —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –Ω–µ–µ. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏ –∏ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞, –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞, –≥–¥–µ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ 2424-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª output.txt –∏ –≤—ã–≤–æ–¥–∏—Ç –≤ –Ω–µ–≥–æ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è), –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Å–µ—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ —á–∞—Å–∞.
# ------------------------------------------------------------------

# ------------------------------------------------------------------

# __________________________________________________________________

# ------------------------------------------------------------------
# -----------------–≠ –ö –ó –ê –ú –ï –ù ------------------------------------------------
# ------------------------------------------------------------------
# ------------------------------------------------------------------
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
# 5 131
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
# ------------------------------------------------------------------
name = input()

with open(f'{name}', 'rt', encoding='utf-8') as file1:
    lines = file1.readlines()

print(len(lines))
# ------------------------------------------------------------------

# __________________________________________________________________

# –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
#  5 131
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ledger.txt —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ñ–∏—Ä–º—ã –∑–∞ –º–µ—Å—è—Ü. –ù–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ —Ç–æ–≤–∞—Ä, –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):

# $47
# $100
# $60
# $12
# $8
# ...

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º–∞—Ä–Ω–æ–π –º–µ—Å—è—á–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ —Ñ–∏—Ä–º—ã.
# ------------------------------------------------------------------
with open('ledger.txt', 'rt', encoding='utf-8') as file1:
    l1 = file1.readlines()

    cont1 = [int(i.strip('$\n ')) for i in l1]
    # print(cont1, sep='\n')


print(f'${sum(cont1)}')
# ------------------------------------------------------------------

# __________________________________________________________________

# Goooood students
# 5 079
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª grades.txt, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞ –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Ç—Ä–∏–º–µ—Å—Ç—Ä–æ–≤. –°—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ –∏–º–µ—é—Ç –≤–∏–¥: —Ñ–∞–º–∏–ª–∏—è –æ—Ü–µ–Ω–∫–∞_1 –æ—Ü–µ–Ω–∫–∞_2 –æ—Ü–µ–Ω–∫–∞_3.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞–≤—à–∏—Ö –≤—Å–µ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞. –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–¥–∞–Ω–Ω—ã–º, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ –Ω–µ–º—É –Ω–µ –º–µ–Ω—å—à–µ 6565.
# ------------------------------------------------------------------
with open('grades.txt', 'rt', encoding='utf-8') as file1:
    l1 = [i.strip().split() for i in file1.readlines()]
    l1 = list(map(lambda x: [x[0], int(x[1]), int(x[2]), int(x[3])], l1))

    res = list(filter(lambda x: int(x[1]) >= 65 and int(
        x[2]) >= 65 and int(x[3]) >= 65, l1))
    res = list(map(lambda x: f'{x[0]} {x[1]} {x[2]} {x[3]}', res))
    print(len(res))
# ------------------------------------------------------------------

# __________________________________________________________________

# –°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–∞–π–ª–µ
# 5 129
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª words.txt —Å–æ —Å–ª–æ–≤–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–µ –º–µ–Ω—è—è –ø–æ—Ä—è–¥–∫–∞ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
# ------------------------------------------------------------------
with open('words.txt', 'rt', encoding='utf-8') as file1:
    line = file1.readline().strip().split()


len_max = len(max(line, key=len))
print(*list(filter(lambda x: len(x) == len_max, line)), sep='\n')
# ------------------------------------------------------------------

# __________________________________________________________________

# Tail of a File
# 5 070
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1010 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
# ------------------------------------------------------------------
with open(input(), 'rt', encoding='utf-8') as file1:
    lines = [i.strip() for i in file1.readlines()]

print(*lines[-10:], sep='\n')


# –°–¥–µ–ª–∞–ª –¥–ª—è —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π.
# –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, —Ç–æ —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤ –ø–∞–º—è—Ç–∏ –≤—Å–µ–≥–¥–∞ 1 —Å—Ç—Ä–æ–∫–∞:
# - —Å—á–∏—Ç—ã–≤–∞—é –ø–æ—Å—Ç—Ä–æ—á–Ω–æ —Å –ø–æ–º–æ—â—å—é readline()
# - –ø–æ—Å–ª–µ readline(), –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ tell(),  —É–∑–Ω–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —ç—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
# - –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–Ω–∞—á–∏—Ç, –º—ã –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ (–ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫ —ç—Ç–æ –Ω–µ ' ', –∞ '\n')
# - –¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Å –∫–æ–Ω—Ü–∞ 10-—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π, –º–µ—Ç–æ–¥–æ–º seek() –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–µ—ë, —Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ–∫ –∏–∑ 10 —Å—Ç—Ä–æ–∫ –º–µ—Ç–æ–¥–æ–º read() –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å
# - –Ω—É –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ–≥–¥–∞ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ <=10, —Ç–∞–º —Ç–æ–∂–µ –º–æ–∂–Ω–æ –º–µ—Ç–æ–¥–æ–º read() –≤—Å—ë —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞—Ç—å –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å.
# ------------------------------------------------------------------
# –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å 10 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏. –î–∞–ª–µ–µ —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∏ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∞ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—Ä–∏–Ω—Ç. –≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –µ—Å–ª–∏ —É –Ω–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –∏ —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º –Ω–µ –≤–ª–µ–∑–µ—Ç, –Ω–æ –∫–æ–ª-–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –±—É–¥–µ—Ç —Å–∏–ª—å–Ω–æ –±–æ–ª—å—à–µ
# __________________________________________________________________
# –ù–µ –∑–Ω–∞—é –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç–∫–æ–Ω–æ–º–Ω–µ–µ —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏ –≤—Ä–æ–¥–µ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è.
# –ß–µ—Ä–µ–∑ readline() –∏ —Å–ø–∏—Å–∫–æ–º –∏–∑ 10 —Å—Ç—Ä–æ–∫ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–º–µ–Ω–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
# __________________________________________________________________


# Forbidden words üå∂Ô∏è
# 4 807
# –∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–æ —Å –∑–∞–º–µ–Ω–æ–π –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ * (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ).
# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ forbidden_words.txt. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
# ------------------------------------------------------------------
def search_word(word, forbidden_words_lst):
    for el in forbidden_words_lst:
        if el in word.lower():
            el = s_lower.replace(i, '*'*len(i))


with open('c:/Users/User/PYTHON1/forbidden_words.txt', 'rt', encoding='utf-8') as file1:
    forbidden_words = file1.readline().strip().split()
    print(*sorted(forbidden_words), sep='\n')

print('-----------------------------------------------------------------------------------------------------')

with open('c:/Users/User/PYTHON1/data.txt', 'rt', encoding='utf-8') as file1:
    content = file1.readline()
    content = list(map(lambda x: x.strip(), content))
    print(*content, sep='\n')
print('-----------------------------------------------------------------------------------------------------')

for el in content:
    l1 = el.split()

    print(l1)
    for elem in l1:
        if search_word(elem, forbidden_words):  # –µ—Å–ª–∏
            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________

            #
            #
            #
            # ------------------------------------------------------------------

            # ------------------------------------------------------------------

            # __________________________________________________________________
