import re
import random   # –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–æ–¥—É–ª—å
import random
from random import *
import math
num = int(input())
digit4 = (num % 10)
digit3 = (num % 100) // 10
digit2 = (num % 1000) // 100
digit1 = (num % 10000) // 1000
print('–¶–∏—Ñ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã—Å—è—á —Ä–∞–≤–Ω–∞', digit1)
print('–¶–∏—Ñ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Ç–µ–Ω —Ä–∞–≤–Ω–∞', digit2)
print('–¶–∏—Ñ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Å—è—Ç–∫–æ–≤ —Ä–∞–≤–Ω–∞', digit3)
print('–¶–∏—Ñ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü —Ä–∞–≤–Ω–∞', digit4)
print()


print('*****************')
print('*               *')
print('*               *')
print('*****************')


a, b = int(input()), int(input())
print('–ö–≤–∞–¥—Ä–∞—Ç —Å—É–º–º—ã', a, '–∏', b, '—Ä–∞–≤–µ–Ω', (a + b) * (a + b))
print('–°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤', a, '–∏', b, '—Ä–∞–≤–Ω–∞', a * a + b * b)

#  ################

a, b, c, d = int(input()), int(input()), int(input()), int(input())
print(a**b+c**d)


#  ################
num = int(input())
digit3 = num
digit2 = num*10
digit1 = num*100

print(digit3 + (digit2 + digit3) + (digit1 + digit2 + digit3))


password1 = input()
password2 = input()

if password1 == password2:
    print('–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç')
else:
    print('–ü–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–∏–Ω—è—Ç')


#####################
num = int(input())
n4 = num % 10
n3 = num % 100 // 10
n2 = num % 1000 // 100
n1 = num % 10000 // 1000


if (n1 + n4) == (n2 - n3):
    print('–î–ê')
else:
    print('–ù–ï–¢')

##########
age = int(input())
if age < 18:
    print('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
else:
    print('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω')


##############
num1, num2, num3 = int(input()), int(input()), int(input())
if num2 - num1 == num3 - num2:
    print('YES')
else:
    print("NO")


################
num1, num2 = int(input()), int(input())
if num1 > num2:
    print(num2)
else:
    print(num1)


################
num1, num2, num3, num4 = int(input()), int(input()), int(input()), int(input())

if num1 / num2 >= 1:
    box1 = num2
else:
    box1 = num1


if num3 / num4 >= 1:
    box2 = num4
else:
    box2 = num3


if box1 / box2 >= 1:
    print(box2)
else:
    print(box1)


#######################
age = int(input())

if 0 <= age <= 13:
    print('–¥–µ—Ç—Å—Ç–≤–æ')
else:
    if 13 < age <= 24:
        print('–º–æ–ª–æ–¥–æ—Å—Ç—å')
    else:
        if 24 < age <= 59:
            print('–∑—Ä–µ–ª–æ—Å—Ç—å')
        else:
            if age > 59:
                print('—Å—Ç–∞—Ä–æ—Å—Ç—å')

################
num1, num2, num3 = int(input()), int(input()), int(input())
counter = 0
if num1 > 0:
    counter = counter + num1

if num2 > 0:
    counter = counter + num2

if num3 > 0:
    counter = counter + num3

print(counter)


##################
x = int(input())
if -1 < x < 17:
    print('–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
else:
    print('–ù–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')


##################
x = int(input())
if x <= -3 or x >= 7:
    print('–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
else:
    print('–ù–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')

##################
x = int(input())
if x <= -3 or x >= 7:
    print('–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
else:
    print('–ù–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')

###############
x = int(input())
if -30 < x <= -2 or 7 < x <= 25:
    print('–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
else:
    print('–ù–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')


# **********


num = int(input())
if (1000 <= num <= 9999) and ((num % 7 == 0) or (num % 17 == 0)):
    print('YES')
else:
    print('NO')

###################
a, b, c = int(input()), int(input()), int(input())
if (a + b > c) and (a + c > b) and (b + c > a):
    print('YES')
else:
    print('NO')

#################
year = int(input())
if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):
    print('YES')
else:
    print('NO')


# —Ö–æ–¥ –ª–∞–¥—å—è]
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 == x2) or (y1 == y2):
    print('YES')
else:
    print('NO')


# ************—Ö–æ–¥ –∫–æ—Ä–æ–ª—è]

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (-1 <= (x2 - x1) <= 1) and (-1 <= (y2 - y1) <= 1):
    print('YES')
else:
    print('NO')


##############
n, k = int(input()), int(input())
if n < k:
    print('YES')
elif n > k:
    print('NO')
elif n == k:
    print("Don't know")


# —Å—Ç–æ—Ä–æ–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
a, b, c = int(input()), int(input()), int(input())
if a == b == c:
    print('–†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π')
elif a == b != c or a == c != b or b == c != a:
    print('–†–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π')
else:
    print('–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π')

# —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ
a, b, c = int(input()), int(input()), int(input())
if a < b < c or c < b < a:
    print(b)
elif b < a < c or c < a < b:
    print(a)
elif b < c < a or a < c < b:
    print(c)

# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
month = int(input())
if month == 4 or month == 6 or month == 9 or month == 11:
    print(30)
elif month == 2:
    print(28)
else:
    print(31)

# —Ü–µ—Ä–µ–º–æ–Ω–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
weight = int(input())
if 0 < weight < 60:
    print('–õ–µ–≥–∫–∏–π –≤–µ—Å')
elif 60 <= weight < 64:
    print('–ü–µ—Ä–≤—ã–π –ø–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å')
else:
    print('–ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å')

# –°–∞–º–æ–ø–∏—Å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üå∂Ô∏è
n, k = int(input()), int(input())
stroka = input()

if stroka == '+':
    print(n + k)
elif stroka == '-':
    print(n - k)
elif stroka == '*':
    print(n * k)
elif stroka == '/' and k == 0:
    print('–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!')
elif stroka == '/' and k != 0:
    print(n / k)
else:
    print('–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')


# –¶–≤–µ—Ç–æ–≤–æ–π –º–∏–∫—à–µ—Ä üå∂Ô∏è
# 125 666
st1, st2 = input(), input()

if st1 == st2 == '–∫—Ä–∞—Å–Ω—ã–π':
    print('–∫—Ä–∞—Å–Ω—ã–π')
elif (st1 == '–∫—Ä–∞—Å–Ω—ã–π' and st2 == '—Å–∏–Ω–∏–π') or (st2 == '–∫—Ä–∞—Å–Ω—ã–π' and st1 == '—Å–∏–Ω–∏–π'):
    print('—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π')
elif (st1 == '–∫—Ä–∞—Å–Ω—ã–π' and st2 == '–∂–µ–ª—Ç—ã–π') or (st2 == '–∫—Ä–∞—Å–Ω—ã–π' and st1 == '–∂–µ–ª—Ç—ã–π'):
    print('–æ—Ä–∞–Ω–∂–µ–≤—ã–π')
elif (st1 == '—Å–∏–Ω–∏–π' and st2 == '–∂–µ–ª—Ç—ã–π') or (st2 == '—Å–∏–Ω–∏–π' and st1 == '–∂–µ–ª—Ç—ã–π'):
    print('–∑–µ–ª–µ–Ω—ã–π')
elif st1 == st2 == '—Å–∏–Ω–∏–π':
    print('—Å–∏–Ω–∏–π')
elif st1 == st2 == '–∂–µ–ª—Ç—ã–π':
    print('–∂–µ–ª—Ç—ã–π')
elif st1 == st2 == '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π':
    print('—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π')
elif st1 == st2 == '–æ—Ä–∞–Ω–∂–µ–≤—ã–π':
    print('–æ—Ä–∞–Ω–∂–µ–≤—ã–π')
else:
    print('–æ—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞')


# –¶–≤–µ—Ç–∞ –∫–æ–ª–µ—Å–∞ —Ä—É–ª–µ—Ç–∫–∏ üå∂Ô∏è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 123 264

el = int(input())

if el < 0 or el > 36:
    print('–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞')
elif el == 0:  # zero
    print('–∑–µ–ª–µ–Ω—ã–π')
elif el % 2 != 0 and 1 <= el <= 10:  # –Ω–µ—á –ö–†–ê–°–ù–´–ô
    print('–∫—Ä–∞—Å–Ω—ã–π')
elif el % 2 == 0 and 11 <= el <= 18:  # —á–µ—Ç–Ω –ö–†–ê–°–ù–´–ô
    print('–∫—Ä–∞—Å–Ω—ã–π')
elif el % 2 != 0 and 19 <= el <= 28:  # –Ω–µ—á –ö–†–ê–°–ù–´–ô
    print('–∫—Ä–∞—Å–Ω—ã–π')
elif el % 2 == 0 and 29 <= el <= 36:  # —á–µ—Ç–Ω –ö–†–ê–°–ù–´–ô
    print('–∫—Ä–∞—Å–Ω—ã–π')

else:
    print('—á–µ—Ä–Ω—ã–π')


# –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–æ–≤ üå∂Ô∏èüå∂Ô∏è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 111 136 —É—á–∞—â–∏—Ö—Å—è


# ##################
# ##################
# #################

a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())

if a1 < a2:              # 1
    if a2 < b1:
        print(a2, b1)
    elif a2 == b1:
        print(a2)
    elif b1 < a2:
        print('–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ')
    elif b1 == b2:
        print(a2, b2)
    elif b2 < b1:
        print(a2, b2)

elif a2 < a1:               # 2
    if a1 < b2:
        print(a1, b2)
    elif a1 == b2:
        print(a1)
    elif b2 < a1:
        print('–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ')
    elif b1 == b2:
        print(a1, b1)
    elif b1 < b2:
        print(a1, b1)

elif a1 == a2:  # 3
    if b1 < b2:
        print(a1, b1)
    elif b1 > b2:
        print(a1, b2)
    elif b1 == b2:
        print(a1, b1)


###### #########
###### ############### ############### #########
###### #########

a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())

if a1 > a2:
    a1, b1, a2, b2 = a2, b2, a1, b1

if b1 < a2:
    print('–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ')
elif b1 == a2:
    print(b1)
elif b1 <= b2:
    print(a2, b1)
else:
    print(a2, b2)


#  –ù–∞—á–∞–ª–æ —Å—Ç–æ–ª–µ—Ç–∏—è
#  –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 104 711 —É—á–∞—â–∏—Ö—Å—è
#  –ò–∑ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ 71% –≤–µ—Ä–Ω—ã—Ö

year = int(input())
if year % 10 == 0 and year % 100 // 10 == 0:
    print('YES')
else:
    print('NO')


# –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª 104 421 —É—á–∞—â–∏–π—Å—è
#
#
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if ((x1 + y1) % 2 == 0 and (x2 + y2) % 2 == 0) or ((x1 + y1) % 2 == 1 and (x2 + y2) % 2 == 1):
    print('YES')
else:
    print('NO')


# Girls only
# d–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 104 379
#
age = int(input())
gender = input()
if 10 <= age <= 15 and gender == 'f':
    print('YES')
else:
    print('NO')


#  –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
#  –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 103 927
#
num = int(input())
if 1 <= num <= 10:
    if num == 1:
        print('I')
    elif num == 2:
        print('II')
    elif num == 3:
        print('III')
    elif num == 4:
        print('IV')
    elif num == 5:
        print('V')
    elif num == 6:
        print('VI')
    elif num == 7:
        print('VII')
    elif num == 8:
        print('VIII')
    elif num == 9:
        print('IX')
    elif num == 10:
        print('X')
else:
    print('–æ—à–∏–±–∫–∞')


# YES or NO –≤–æ—Ç –≤ —á–µ–º –≤–æ–ø—Ä–æ—Å
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 103 893
#
#
n = int(input())
if (n % 2 == 1) or (n % 2 == 0 and 6 <= n <= 20):
    print('YES')
elif (n % 2 == 0 and 2 <= n <= 5) or (n % 2 == 0 and n > 20):
    print('NO')


# –•–æ–¥ —Å–ª–æ–Ω–∞ üå∂Ô∏è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 101 509 —É—á–∞—â–∏—Ö—Å—è
#

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())

if (x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2):
    print('YES')
else:
    print('NO')

# –•–æ–¥ –∫–æ–Ω—è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 99 743 —É—á–∞—â–∏—Ö—Å—è
#
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())

if (x1 - 1 == x2 or x1 + 1 == x2) and (y1 - 2 == y2 or y1 + 2 == y2):
    print('YES')
elif (x1 - 2 == x2 or x1 + 2 == x2) and (y1 - 1 == y2 or y1 + 1 == y2):
    print('YES')
else:
    print('NO')


# –•–æ–¥ —Ñ–µ—Ä–∑—è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 98 768 —É—á–∞—â–∏—Ö—Å—è
#
# –¥–æ–±–∞–≤–∏—Ç—å –≤ —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ–±–æ—Ä —Ö–æ–¥–æ–≤ –ª–∞–¥—å–∏ —Å–ª–æ–Ω–∞ –∏ –∫–æ—Ä–æ–ª—è


x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())

if ((x1 == x2) or (y1 == y2)) or ((-1 <= (x2 - x1) <= 1) and (-1 <= (y2 - y1) <= 1)) or ((x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2)):
    print('YES')
else:
    print('NO')

# –ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
# 121 465
#
a, b = float(input()), float(input())
el = a * b / 2
print(el)


# –î–≤–µ —Å—Ç–∞—Ä—É—à–∫–∏
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 120 755
#
#
el, v1, v2 = float(input()), float(input()), float(input())
t = el / (v1 + v2)
print(t)

# –û–±—Ä–∞—Ç–Ω–æ–µ —á–∏—Å–ª–æ
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 119 166
#
#
num = float(input())
if num != 0:
    num = 1 / num
    print(num)
else:
    print('–û–±—Ä–∞—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


# 451 –≥—Ä–∞–¥—É—Å –ø–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—É
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 119 667
#
#
t_far = float(input())
c = 5 / 9 * (t_far - 32)
print(c)

# Dog age
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 118 472
#
#
n = int(input())
if 0 <= n <= 2:
    print(n * 10.5)
elif n > 2:
    print(2 * 10.5 + (n - 2) * 4)


# –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
# 117 383
#
#
r = float(input())
print((int(r * 10)) % 10)


# –î—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
# 117 494
#
#
r = float(input())
print(r - int(r))

# n = float(input())
# print(n % 1)

# –ù–∞–∏–±–æ–ª—å—à–µ–µ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 116 654
#

a, b, c, d, e = int(input()), int(input()), int(
    input()), int(input()), int(input())
print('–ù–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ =', min(a, b, c, d, e))
print('–ù–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ =', max(a, b, c, d, e))


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç—Ä—ë—Ö üå∂Ô∏è
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 116 048
#
a, b, c = int(input()), int(input()), int(input())
print(max(a, b, c))
print((a + b + c) - min(a, b, c) - max(a, b, c))
print(min(a, b, c))
# print(max, a + b + c - min - max, min, sep = '\n') -----–±–æ–ª–µ–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –∫–æ–¥–∞


# –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —á–∏—Å–ª–æ
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 113 373
#

num = int(input())
a = num % 10
b = num % 100 // 10
c = num % 1000 // 100
if max(a, b, c) - min(a, b, c) == (a + b + c) - min(a, b, c) - max(a, b, c):
    print('–ß–∏—Å–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ')
else:
    print('–ß–∏—Å–ª–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ')


# –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Å—É–º–º–∞
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 114 168
#
a, b, c, d, e = float(input()), float(input()), float(
    input()), float(input()), float(input())
print(abs(a) + abs(b) + abs(c) + abs(d) + abs(e))


# –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 112 223
#
p1, p2, q1, q2 = int(input()), int(input()), int(input()), int(input())
print(abs(p1 - q1) + abs(p2 - q2))


#
#
print('"Python is a great language!", said Fred. ' +
      '"' + "I don'" + 't ever remember having this')


# What's Your Name?
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 109 883
#
name = input()
lastname = input()
print('Hello ' + name + ' ' + lastname +
      '! ' + 'You have just delved into Python')


# –§—É—Ç–±–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 108 573
#

el = input()
print('–§—É—Ç–±–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', el, '–∏–º–µ–µ—Ç –¥–ª–∏–Ω—É', len(el), '—Å–∏–º–≤–æ–ª–æ–≤')


# –¢—Ä–∏ –≥–æ—Ä–æ–¥–∞
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 105 999
#
s1, s2, s3 = input(), input(), input()
if len(s1) == min(len(s1), len(s2), len(s3)):
    print(s1)
elif len(s2) == min(len(s1), len(s2), len(s3)):
    print(s2)
elif len(s3) == min(len(s1), len(s2), len(s3)):
    print(s3)


if len(s1) == max(len(s1), len(s2), len(s3)):
    print(s1)
elif len(s2) == max(len(s1), len(s2), len(s3)):
    print(s2)
elif len(s3) == max(len(s1), len(s2), len(s3)):
    print(s3)


# –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
# –í–µ—Ä–Ω–æ —Ä–µ—à–∏–ª–∏ 102 681
#
# s1 = len(input()) -----–¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
s1, s2, s3 = input(), input(), input()
l1 = min(len(s1), len(s2), len(s3))
l2 = (len(s1) + len(s2) + len(s3)) - min(len(s1),
                                         len(s2), len(s3)) - max(len(s1), len(s2), len(s3))
l3 = max(len(s1), len(s2), len(s3))

if l2 - l1 == l3 - l2:
    print('YES')
else:
    print('NO')


# –¶–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–∏–Ω–∏–π
# 107 124
#
el = input()
if '—Å–∏–Ω–∏–π' in el:
    print('YES')
else:
    print('NO')

# –û—Ç–¥—ã—Ö–∞–µ–º –ª–∏?
#  106 485
#

el = input()
# –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞## ('—Å—É–±–±–æ—Ç–∞' or '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ') in s:
if '—Å—É–±–±–æ—Ç–∞' in el or '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' in el:
    print('YES')
else:
    print('NO')

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
#   105 561
#
email = input()
if '@' in email and '.' in email:
    print('YES')
else:
    print('NO')

# –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
#   112 055
#
x1, y1, x2, y2 = float(input()), float(input()), float(input()), float(input())
print(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))


# –ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞
#   112 001
#
r = float(input())
print(math.pi * r ** 2)
print(2 * math.pi * r)

# –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
#   109 613
#
a, b = float(input()), float(input())
print((a + b) / 2)
print(math.sqrt(a * b))
print(2 * a * b / (a + b))
print(math.sqrt((a**2 + b ** 2)/2))


# –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
#  108 934
#
x = float(input())
print(math.sin(x * math.pi / 180) + math.cos(x *
      math.pi / 180) + math.tan(x * math.pi / 180)**2)


# –ü–æ–ª –∏ –ø–æ—Ç–æ–ª–æ–∫
# 109 144

x = float(input())
print(math.floor(x) + math.ceil(x))


# –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ üå∂Ô∏èüå∂Ô∏è
# 104 264
#
a, b, c = float(input()), float(input()), float(input())
d = b ** 2 - 4 * a * c
if d > 0:
    print(min((-b - math.sqrt(d)) / (2 * a), (-b + math.sqrt(d)) / (2 * a)))
    print(max((-b - math.sqrt(d)) / (2 * a), (-b + math.sqrt(d)) / (2 * a)))
elif d == 0:
    print((-1 * b) / (2 * a))
else:
    print('–ù–µ—Ç –∫–æ—Ä–Ω–µ–π')


# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
# 104 972
#

n, a = float(input()), float(input())
print(n * a ** 2 / (4 * math.tan(math.pi / n)))


# Python is awesome
# 103129

for i in range(9):
    print('Python is awesome!')

 # –ü–æ–≤—Ç–æ—Ä—è–π –∑–∞ –º–Ω–æ–π 1
# 103129

el, r = input(), int(input())
for i in range(r):
    print(el)


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
#  104 546
#

for i in range(6):
    print('AAA')
for i in range(5):
    print('BBBB')
print('E')
for i in range(9):
    print('TTTTT')
print('G')


#
# –ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
#

n = int(input())
for i in range(n):
    print('*' * 19)

# –ü–æ–≤—Ç–æ—Ä—è–π –∑–∞ –º–Ω–æ–π 2
# 104 704
#

el = input()
for i in range(10):
    print(i, el)


# –ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞
# 103 590
#
num = int(input())
for i in range(num + 1):
    print('–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞', i, '—Ä–∞–≤–µ–Ω', i ** 2)


# –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
# 102 104
#
n = int(input())
for i in range(n + 1):
    print('*' * (n - i))


# –ü–æ–ø—É–ª—è—Ü–∏—è
# 96 539
#
m, p, n = int(input()), int(input()), int(input())
for i in range(n):
    print(i + 1, m)
    m = m + m * p / 100

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª 1
# 101 890
#
m, n = int(input()), int(input())
for i in range(m, n + 1):
    print(i)

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª 2 üå∂Ô∏è
# 100 679
m, n = int(input()), int(input())
if m <= n:
    for i in range(m, n + 1, 1):
        print(i)
elif m > n:
    for i in range(m, n - 1, -1):
        print(i)


# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª 3 üå∂Ô∏è
#  98 192
m, n = int(input()), int(input())
for i in range(m, n - 1, -1):
    if i % 2 == 1:
        print(i)

# m, n = int(input()), int(input())                        ##  –±–µ–∑ IF
# for i in range(m - 1 + m % 2, n - 1, -2):
#    print(i)

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª 4
#  97 092
m, n = int(input()), int(input())
for i in range(m, n + 1):
    if i % 17 == 0 or i % 10 == 9 or (i % 3 == i % 5 == 0):
        print(i)


# –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
# 97 736
#
n = int(input())
for i in range(1, 11):
    print(n, 'x', i, '=', n * i)


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
# 95 654
a, b = int(input()), int(input())
counter = 0
for i in range(a, b + 1):
    if (i ** 3 % 10) == 4 or (i ** 3 % 10) == 9:
        counter += 1
print(counter)


# –°—É–º–º–∞ —á–∏—Å–µ–ª
# 94 979
#

n = int(input())
total = 0
for i in range(1, n + 1):
    m = int(input())
    total += m
print(total)

# –ê—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
# 91 390
#
n = int(input())
total = 0
for i in range(1, n + 1):
    total += 1 / i
print(total - math.log(n))


# –°—É–º–º–∞ —á–∏—Å–µ–ª 2
# 91 690
#
n, total = int(input()), 0
for i in range(1, n + 1):
    if i ** 2 % 10 == 2 or i ** 2 % 10 == 5 or i ** 2 % 10 == 8:
        total += i
print(total)


# –§–∞–∫—Ç–æ—Ä–∏–∞–ª
# 92 680
#
n = int(input())
print(math.factorial(n))


# –ë–µ–∑ –Ω—É–ª–µ–π
# 91 577
#
total = 1
for i in range(1, 11):
    n = int(input())
    if n != 0:
        total *= n
print(total)

# –°—É–º–º–∞ –¥–µ–ª–∏—Ç–µ–ª–µ–π
# 90 549
#
n, total = int(input()), 0
for i in range(1, n + 1):
    if n % i == 0:
        total += i
print(total)


#
#
#
n, total = int(input()), 0
for i in range(1, n + 1):
    total += ((-1) ** (i + 1)) * i
print(total)


# –ù–∞–∏–±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ üå∂Ô∏èüå∂Ô∏è
# 84 725
#
n, largest1, largest2 = int(input()), 0, 0
for i in range(1, n + 1):  # for _ in range(n):  ---------—É–∫–æ—Ä–æ—Ç–∏—Ç—å –∫–æ–¥ –º–æ–∂–Ω–æ
    m = int(input())
    if m > largest2:
        largest2 = m
        if largest1 < largest2:
            largest1, largest2 = largest2, largest1
print(largest1, largest2, sep='\n')


# Only even numbers üå∂Ô∏è
# 87 264
#
counter = 0
for _ in range(10):
    m = int(input())
    if m % 2 != 0:
        counter = 1
if counter == 0:
    print('YES')
else:
    print('NO')

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏ üå∂Ô∏è
# 81 668
#
n, sum, m1, m2 = int(input()), 0, 1, 1
for _ in range(1, n + 1):
    sum = m1 + m2
    print(sum, end=' ')
    m1 = m2
    m2 = sum

# –î–æ –ö–û–ù–¶–ê 1
# 89 223
#
n = input()
while n != '–ö–û–ù–ï–¶':
    print(n)
    n = input()

# –î–æ –ö–û–ù–¶–ê 2
# 87 826
#

n = input()
while (n != '–ö–û–ù–ï–¶') and (n != '–∫–æ–Ω–µ—Ü'):
    print(n)
    n = input()


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤
# 86 805
#
n = input()
i = 0
while n not in ('—Å—Ç–æ–ø', '—Ö–≤–∞—Ç–∏—Ç', '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'):
    n = input()
    i += 1
print(i)


# –ü–æ–∫–∞ –¥–µ–ª–∏–º—Å—è
# 87 180
#
n = int(input())
while n % 7 == 0:
    print(n)
    n = int(input())

# –°—É–º–º–∞ —á–∏—Å–µ–ª
# 86 711
#

n, total = int(input()), 0
while n >= 0:
    total = total + n
    n = int(input())
print(total)


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç–µ—Ä–æ–∫
# 85 577
#
n, counter = int(input()), 0
while 0 <= n <= 5:
    if n == 5:
        counter += 1
    n = int(input())
print(counter)


# –í–µ–¥—å–º–∞–∫—É –∑–∞–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–æ–π ( –ø–æ–¥—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç)
# 82 060
#
n = int(input())
counter = 0

while n >= 25:
    n -= 25
    counter += 1

while n >= 10:
    n -= 10
    counter += 1

while n >= 5:
    n -= 5
    counter += 1

while n >= 1:
    n -= 1
    counter += 1

print(counter)


# –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ 1
# 84 887
#

n = int(input())
while n != 0:
    print(n % 10)
    n = n // 10


# –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ 2
# 84 690
#
n = int(input())
while n != 0:
    last_digit = n % 10
    print(last_digit, end="")
    n = n // 10

# max –∏ min
# 82 741
#
n = int(input())
mx = 0
mn = 9
while n != 0:
    last_digit = n % 10
    if last_digit > mx:
        mx = last_digit
    if last_digit < mn:
        mn = last_digit
    n = n // 10
print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ —Ä–∞–≤–Ω–∞', mx)
print('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ —Ä–∞–≤–Ω–∞', mn)

# n, x, m = int(input()), -1, 10
# while n:
#    x = max(x, n % 10)
#    m = min(m, n % 10)
#    n //= 10
# print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ —Ä–∞–≤–Ω–∞', x)
# print('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ —Ä–∞–≤–Ω–∞', m)

# ‡≤†_‡≤†
# ‡≤†_‡≤†
# ‡≤†_‡≤†
# ‡≤†_‡≤†
# ‡≤†_‡≤†

# –í—Å–µ –≤–º–µ—Å—Ç–µ
# 79 165
#
n = int(input())
temp = n
total = counter = 0
product = 1
while temp != 0:
    last_digit = temp % 10    # –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞
    total += last_digit    # —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ
    counter += 1           # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ
    product *= last_digit  # –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä —Ü–∏—Å–ª–∞
    temp //= 10               # —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –∏–∑ —á–∏—Å–ª–∞


mean = total / counter  # —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ü–∏—Ñ—Ä —á–∏—Å–ª–∞
first_digit = n % (10 ** counter) // 10 ** (counter - 1)  # –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞
sum_digit = n % 10 + first_digit   # —Å—É–º–º–∞ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã

print(total, counter, product, mean, first_digit, sum_digit, sep='\n')


# –í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞
# 80 867
#
m = int(input())
n = m
counter = 0
while m != 0:  # –∏–ª–∏   n > 0
    last_digit = m % 10    # –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞
    counter += 1           # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —á–∏—Å–ª–µ
    m //= 10               # —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É –∏–∑ —á–∏—Å–ª–∞
print(n % (10 ** (counter - 1)) // 10 ** (counter - 2))


# n = int(input())
# while n > 99:
#    n //= 10
# print(n % 10)

# 78 600
# –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
#

n = int(input())
counter1, counter2 = 0, 0
while n > 0:
    counter1 += 1
    if n % 100 // 10 == n % 10:
        counter2 += 1
    n //= 10
if counter1 == counter2 + 1:
    print('YES')
else:
    print('NO')  # print("YES" if flag == True else "NO")


# –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã üå∂Ô∏è
# 75 582
#

n = int(input())
counter1, counter2 = 0, 0
while n > 0:
    counter1 += 1
    if (n % 100 // 10) >= (n % 10):
        counter2 += 1
    n //= 10
if counter1 == counter2 + 1:
    print('YES')
else:
    print('NO')    # print("YES" if flag == True else "NO")
#
#

n = int(input())
while n % 10 <= n % 100 // 10:
    n = n // 10
if n < 10:
    print('YES')
else:
    print('NO')


# –ù–∞–∏–º–µ–Ω—å—à–∏–π –¥–µ–ª–∏—Ç–µ–ª—å
# 78 127
#
n = int(input())
for i in range(2, n + 1):
    if n % i == 0:
        print(i)
        break


# –°–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º
# 77 488
#
n = int(input())
for i in range(1, n + 1):
    if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
        continue
    print(i)

# –†–µ–≤—å—é –∫–æ–¥–∞-1 üå∂Ô∏èüå∂Ô∏è
# 76 080
#
count = 0
p = 1                   # 1
for i in range(1, 11):  # 2
    x = int(input())
    if x > 0:
        p *= x
        count += 1
if count > 0:
    print(count)        # 3
    print(p)
else:
    print('NO')

# –†–µ–≤—å—é –∫–æ–¥–∞-2 üå∂Ô∏èüå∂Ô∏è
# 73 180
#
mx = -10**6  # –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (—Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –±—É–¥–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º)
el = 0
for _ in range(10):  # –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –¥–∏–∞–ø–æ–∑–æ–Ω (–±—ã–ª–æ 11), –∑–∞–º–µ–Ω–∞ "i" –Ω–∞ "_"
    x = int(input())
    if x < 0:
        el += x  # –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ (–±—ã–ª–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ "=")
        if x > mx:  # —Å–º–µ—â–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞, —á—Ç–æ–±—ã —É—Å–ª–æ–≤–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è x < 0
            mx = x
if el == 0:  # –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    print('NO')
else:
    print(el)
    print(mx)

# –†–µ–≤—å—é –∫–æ–¥–∞-3
# 73 015
#
el = 0                  # 1
for i in range(1, 8):  # 2
    n = int(input())   # 3
    if n % 2 == 0:     # 4
        el += n
print(el)


# –†–µ–≤—å—é –∫–æ–¥–∞-4 üå∂Ô∏èüå∂Ô∏è
# 70 702
#

n = int(input())
counter = 0
max_digit = -1                # 1
while n > 0:
    digit = n % 10
    if digit % 3 == 0:
        if digit > max_digit:  # 2
            max_digit = digit  # 3
        counter += 1
    n //= 10                   # 4
if counter == 0:               # 5
    print('NO')
else:
    print(max_digit)


# –†–µ–≤—å—é –∫–æ–¥–∞-5 üå∂Ô∏è
# 72 471
# –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –µ–≥–æ –ø–µ—Ä–≤—É—é (—Å—Ç–∞—Ä—à—É—é) —Ü–∏—Ñ—Ä—É

n = int(input())
# –û—à–∏–±–∫–∞ - —Ü–∏–∫–ª –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ —á–∏—Å–ª–æ –¥–≤—É- –∏  –±–æ–ª–µ–µ -–∑–Ω–∞—á–Ω–æ–µ.
while n > 9:
    # –û—à–∏–±–∫–∞ - –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ, –∞ –Ω–µ –≤—ã—è—Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑ –Ω–∏—Ö.
    n //= 10
print(n)

n = int(input())
while n//10:
    n //= 10
print(n)


# –†–µ–≤—å—é –∫–æ–¥–∞-6
# 71 996
#

# –¢–∞–±–ª–∏—Ü–∞-1 –≤–ª–æ–∂–µ–Ω—ã–π —Ü–∏–∫–ª
# 74 658
n = int(input())
for i in range(1, n + 1):
    for j in range(1, 4):
        print(n, end=' ')
    print()


# –¢–∞–±–ª–∏—Ü–∞-2
# 73 499
n = int(input())
for i in range(1, n + 1):
    for j in range(1, 6):
        print(i, end=' ')
    print()

# –¢–∞–±–ª–∏—Ü–∞-3
# 72 748
n = int(input())
for i in range(1, n + 1):
    for j in range(1, 10):
        print(i, '+', j, '=', i + j, end='\n')
    print()

# –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ üå∂Ô∏èüå∂Ô∏è
# 70 171
#
n = int(input())
for i in range(1, (n//2 + 1)):
    for j in range(1, i + 1):
        print('*', end='')
    print()

for i in range((n - n//2), 0, -1):
    for j in range(i + 1, 1, -1):
        print('*', end='')
    print()


# –ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 1
# 71 713
#
n = int(input())
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(i, end='')
    print()


# –°—Ç–∞—Ä–∏–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
# 69 262
# –ò–º–µ–µ—Ç—Å—è 100 —Ä—É–±–ª–µ–π. –°–∫–æ–ª—å–∫–æ –±—ã–∫–æ–≤, –∫–æ—Ä–æ–≤ –∏ —Ç–µ–ª—è—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞ –≤—Å–µ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–∞ –∑–∞ –±—ã–∫–∞ ‚Äì 10 —Ä—É–±–ª–µ–π, –∑–∞ –∫–æ—Ä–æ–≤—É ‚Äì 5 —Ä—É–±–ª–µ–π, –∑–∞ —Ç–µ–ª–µ–Ω–∫–∞ ‚Äì 0.5 —Ä—É–±–ª—è –∏ –Ω–∞–¥–æ –∫—É–ø–∏—Ç—å 100 –≥–æ–ª–æ–≤ —Å–∫–æ—Ç–∞?


total = 0
for n in range(101):
    for k in range(101):
        for m in range(101):
            if 10 * n + 5 * k + 0.5 * m == 100 and n + k + m == 100:
                total += 1
                print('n=', n, 'k=', k, 'm=', m)
print('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π =', total)


# –ì–∏–ø–æ—Ç–µ–∑–∞ –≠–π–ª–µ—Ä–∞ –æ —Å—É–º–º–µ —Å—Ç–µ–ø–µ–Ω–µ–π üå∂Ô∏èüå∂Ô∏è
# 65 484
# __________________________________________________________


# –ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 3
# 68 249
#
n = int(input())
counter = 1
for i in range(1, n + 1):
    for j in range((n + 1)-i, n + 1):  # for _ in range(i + 1):
        print(counter, end=' ')
        counter += 1
    print()


# –ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 4
# 63 813
n = int(input())
for i in range(1, n + 1):

    for j in range(1, i + 1):
        print(j, end='')

    for j in range(i, 1, -1):
        print(j-1, end='')

    print()

# –î–µ–ª–∏—Ç–µ–ª–∏-1 üå∂Ô∏è
# 60 280
# –ù–ï –†–ï–®–ò–õ
a = int(input())
b = int(input())
total, counter, mx_total, mx_count = 0, 0, 0, 0
for i in range(a, b + 1):
    for j in range(1, i + 1):
        if i % j == 0:      # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–ª–∏—Ç–µ–ª—å, —Ç–æ
            counter += 1    # —Å—á–∏—Ç–∞–µ–º –¥–µ–ª–∏—Ç–µ–ª–∏
            total += j      # —Å—É–º–º–∏—Ä—É–µ–º –¥–µ–ª–∏—Ç–µ–ª–∏
    if mx_count < counter:
        mx_count = counter
    if total > mx_total:
        mx_total = total

print(mx_count)
print(mx_total)


# –î–µ–ª–∏—Ç–µ–ª–∏-2
# 61 920
#

n = int(input())

for i in range(1, n + 1):
    counter = 0
    for j in range(1, i + 1):
        if i % j == 0:      # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–ª–∏—Ç–µ–ª—å, —Ç–æ
            counter += 1    # —Å—á–∏—Ç–∞–µ–º –¥–µ–ª–∏—Ç–µ–ª–∏
print(i, '+' * counter, sep='')


# –¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ—Ä–µ–Ω—å, –≤–ª–æ–∂–µ–Ω—ã–µ —Ü–∏–∫–ª—ã while
# 60 236

n = int(input())
while n > 9:
    total = 0
    while n > 0:               # –ø–æ–∫–∞ –≤ —á–∏—Å–ª–µ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã
        last_digit = n % 10     # –±–µ—Ä–µ–º –ø–æ—Å–¥–µ–¥–Ω—é—é
        total += last_digit     # —Å—É–º–º–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—É
        n //= 10                # —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é
    # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—É–º–º—É   –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–æ–µ, —Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å—É–º–º–∞—Ü–∏—è —Ü–∏—Ñ—Ä –∑–∞–Ω–æ–≤–æ
    n = total
print(n)


# –°—É–º–º–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤
# 60 921

n = int(input())
factorial = 1
total = 0
for i in range(1, n + 1):
    #  print('i=', i)
    for j in range(1, i + 1):
        factorial *= j
        #  print( 'j =', j, 'Factorial =', factorial)
    total += factorial
    factorial = 1
    #  print('total =', total)
print(total)


# –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
# 59 392
#
a = int(input())
b = int(input())
count_del = 0
for i in range(a, b + 1):
    for j in range(1, i + 1):
        if i % j == 0:
            count_del += 1
    if count_del == 2:
        print('—á–∏—Å–ª–æ', i, '–ø—Ä–æ—Å—Ç–æ–µ')


# –í—Å–µ –≤–º–µ—Å—Ç–µ 2
# 52 745
#
n = int(input())
counter1 = 0
counter2 = 0
counter3 = 0
tolal_digit = 0
prod_digit = 1
count_prod = 0
last_digit2 = n % 10
counter6 = 0
while n > 0:
    last_digit = n % 10

    if last_digit == 3:   # 1
        counter1 += 1

    if last_digit == last_digit2:
        counter2 += 1

    if last_digit % 2 == 0:
        counter3 += 1

    if last_digit > 5:
        tolal_digit += last_digit

    if last_digit > 7:
        prod_digit *= last_digit
        count_prod += 1

    if last_digit == 0 or last_digit == 5:
        counter6 += 1

    n //= 10

print(counter1)
print(counter2)
print(counter3)
print(tolal_digit)
if count_prod == 0:
    print(1)
else:
    print(prod_digit)
print(counter6)


# –ß–∏—Å–ª–∞ –†–∞–º–∞–Ω—É–¥–∂–∞–Ω–∞ üå∂Ô∏è
# 51 160
#
cnt = 0
dig = 1
cnt_2 = -1

while cnt < 5:
    dig += 1
    for i in range(1, int(dig**(1 / 3)) + 1):
        for j in range(i + 1, int(dig**(1 / 3)) + 1):
            if i**3 + j**3 == dig:
                cnt_2 += 1
            if cnt_2 == 1:
                break
        if cnt_2 == 1:
            print(dig)
            cnt += 1
            break
    cnt_2 = -1


# –í —Å—Ç–æ–ª–±–∏–∫ 1
#  64 558
#
el = input()
for i in range(0, len(el), 2):
    print(el[i], end='\n')


# –í —Å—Ç–æ–ª–±–∏–∫ 2
#  64 217
#
el = input()
for i in range(-1, -len(el) - 1, -1):
    print(el[i], end='\n')

# –§–ò–û
# 64 239
#
el, s1, s2 = input(), input(), input()
print(s1[0], el[0], s2[0], sep='')

# –¶–∏—Ñ—Ä–∞ 1
# 63 623
el = input()
total = 0
for i in range(len(el)):
    total += int(el[i])
print(total)

# –¶–∏—Ñ—Ä–∞ 2
# 62315
s1 = input()
s2 = '0123456789'
counter = 0
for i in range(len(s1)):
    for j in range(len(s2)):
        if (s1[i]) == s2[j]:
            counter += 1

if counter > 0:
    print('–¶–∏—Ñ—Ä–∞')
else:
    print('–¶–∏—Ñ—Ä –Ω–µ—Ç')

## ###################################################################
el = input()
digits = '0123456789'

for i in el:
    if i in digits:
        print('–¶–∏—Ñ—Ä–∞')
        break
else:
    print('–¶–∏—Ñ—Ä –Ω–µ—Ç')


# –°–∫–æ–ª—å–∫–æ —Ä–∞–∑?
# 62 317
el = input()
counter1, counter2 = 0, 0
# for i in range(len(s)):
for i in el:
    if i in '+':
        counter1 += 1
    if i in '*':
        counter2 += 1

print('–°–∏–º–≤–æ–ª + –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è', counter1, '—Ä–∞–∑')
print('–°–∏–º–≤–æ–ª * –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è', counter2, '—Ä–∞–∑')

# –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ—Å–µ–¥–∏
# 60 450
el = input()
counter1 = 0
for i in range(len(el) - 1):
    if el[i] == el[i + 1]:
        counter1 += 1
print(counter1)

# –ì–ª–∞—Å–Ω—ã–µ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã–µ
# 59 520
s1 = input()
s2 = '–∞—É–æ—ã–∏—ç—è—é—ë–µ–ê–£–û–´–ò–≠–Ø–Æ–Å–ï'
s3 = '–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â–ë–í–ì–î–ñ–ó–ô–ö–õ–ú–ù–ü–†–°–¢–§–•–¶–ß–®–©'
counter1, counter2 = 0, 0
for i in s1:
    if i in s2:
        counter1 += 1
    if i in s3:
        counter2 += 1
print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ', counter1)
print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ —Ä–∞–≤–Ω–æ', counter2)


# Decimal to Binary
# 57 843
digit_dec = int(input())
digit_bin = ''
while digit_dec > 0:
    # —á–∏—Å–ª–æ —á–∏—Ç–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç –¥–µ–ª–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏ —Å–ª–∞–≥–∞–µ–º—ã–µ, —á—Ç–æ–±—ã –ø–æ–ø–æ—Ä—è–¥–∫—É –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å
    digit_bin = str(digit_dec % 2) + digit_bin
    digit_dec = digit_dec // 2
print(digit_bin)
# 19 = 10011

# –ü–∞–ª–∏–Ω–¥—Ä–æ–º
# 60 895

el = input()
if el == el[::-1]:
    print('YES')
else:
    print('NO')


# –î–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã 1
# 60 004
el = input()
print(len(el))
print(el * 3)
print(el[0])
print(el[:3])
print(el[-3:])
print(el[::-1])
print(el[1:-1])


# –î–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã 2
# 58 742
el = input()
print(el[2])
print(el[-2])
print(el[:5])
print(el[:-2])
print(el[::2])
print(el[1::2])
print(el[::-1])
print(el[::-2])


# –î–≤–µ –ø–æ–ª–æ–≤–∏–Ω–∫–∏
# 58 135

el = input()
n = len(el)

a = el[:(n + 1) // 2]
b = el[(n + 1) // 2:]

print(b + a)


# –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
# 59 799
el = input()
i = 0
counter1 = 0
while el[i] != ' ':
    counter1 += 1
    i += 1
name = el[:counter1]
print(name)
lastname = el[counter1 + 1:]
print(lastname)
if name == name.capitalize() and lastname == lastname.capitalize():
    print('YES')
else:
    print('NO')


# –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
el = input()
if el == el.title():
    print("YES")
else:
    print("NO")


# sWAP cASE
# 60 011
el = input()
print(el. swapcase())

# –•–æ—Ä–æ—à–∏–π –æ—Ç—Ç–µ–Ω–æ–∫
# 59 314
el = input()
if '—Ö–æ—Ä–æ—à' in el.lower():
    print('YES')
else:
    print("NO")


# –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
# 57 635
el = input()
counter = 0

for simbol in el:
    if simbol != simbol.upper():
        counter += 1

# for i in range(len(s)):
  #  if s[i] in 'abcdefghijklmnopqrstuvwxyz':
   #     counter += 1
print(counter)


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
# 58 413
el = input()
print(s1.count(' ') + 1)

# –º–∏–Ω—É—Ç–∫–∞ –≥–µ–Ω–µ—Ç–∏–∫–∏
# 57 960
el = input()
el = el.lower()                       # s = input().lower()
print('–ê–¥–µ–Ω–∏–Ω:', el.count('–∞'))
print('–ì—É–∞–Ω–∏–Ω:', el.count('–≥'))
print('–¶–∏—Ç–æ–∑–∏–Ω:', el.count('—Ü'))
print('–¢–∏–º–∏–Ω:', el.count('—Ç'))

# –û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞
# 56 321
n = int(input())
counter = 0
for i in range(n):
    el = input()
    if el.count('11') >= 3:
        counter += 1
print(counter)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
# 56 659
el = input()
counter_number = 0
str_number = '0123456789'
for i in range(len(el)):
    if str_number.count(el[i]) == 1:
        counter_number += 1
print(counter_number)

#
# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ
text = input()
cnt = 0
for i in range(10):
    cnt += text.count(str(i))
print(cnt)
#


# .com or .ru
# 56 243
text = input()
# ###  if (text.endswith(('.com','.ru'))):
if text.endswith('.com') or text.endswith('.ru'):
    print('YES')
else:
    print('NO')

# –°–∞–º—ã–π —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
# 53 222
#
text = input()
alphabet = ' 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
letter_mx = ''
mx = 0
for letter in alphabet:
    if text.count(letter) >= mx:
        letter_mx = letter
        mx = text.count(letter)
print(letter_mx)
###
#
# –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
el = input()

most_common = el[0]
for el in el:
    if el.count(el) >= el.count(most_common):
        most_common = el

print(most_common)

#
#  –ü–µ—Ä–≤–æ–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
# 54 619

text = input()
if text.count('f') == 1:
    print(text.find('f'))
if text.count('f') >= 2:
    print(text.find('f'), text.rfind('f'))
if text.count('f') == 0:
    print('NO')

# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ find
el = input()
if el.find('f') == -1:
    print('NO')
elif el.find('f') == el.rfind('f'):
    print(el.find('f'))
else:
    print(el.find('f'), el.rfind('f'))


# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
# 53 975
#
text = input()
print(text[:text.find('h')] + text[text.rfind('h'):])

#
year = '2010'
sum = '10k'
currency = 'Bitcoin'

el = 'In {0}, someone paid {1} {2} for two pizzas.'.format(year, sum, currency)
print(el)


#
#
year = 2010
amount = '10K'
currency = 'Bitcoin'

print(f'In {year}, someone paid {amount} {currency} for two pizzas.')


# –°–∏–º–≤–æ–ª—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
# 55 089
a, b = int(input()), int(input())
for i in range(a, b + 1):
    print(chr(i), end=' ')

# –ü—Ä–æ—Å—Ç–æ–π —à–∏—Ñ—Ä
#  54 402
text = input()
for c in text:
    print(ord(c), end=' ')


# –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è üå∂Ô∏è
# 49 970
n = int(input())
text = input()
for c in text:
    if ord(c) - n < 96:
        print(chr(ord(c) - n + 26), end='')
    else:
        print(chr(ord(c) - n), end='')

# –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π
# 46 693
text = input()
el = ""
for i in range(len(text)):
    el += text[i]

    if i == 0 or i % 3 == 0:
        el = el[:-1]

print(el)


# –ó–∞–º–µ–Ω–∏ –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
# 46 824
text = input()
print(text.replace('1', 'one'))

# –£–¥–∞–ª–∏ –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
# 46 941
text = input()
print(text.replace('@', ''))

# –í—Ç–æ—Ä–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
# 45 537
text = input()
el = ""
i = 0
if text.count('f') >= 2:
    text = text[(text.find('f') + 1):]
    print(text.find('f'))

elif text.count('f') == 1:
    print(-1)

elif text.count('f') == 0:
    print(-2)

#
# –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞–º–∏
el = input()

if el.count("f") == 0:
    print(-2)
elif el.count("f") == 1:
    print(-1)
else:
    # s = s.replace('f', 'k' , 1)   # –º–æ–∂–Ω–æ —Ç–∞–∫ —Ç–æ–∂–µ
    res = el.replace("f", ".", 1).find("f")
    #  print(s.find('f'))
    print(res)


#
#
text = input()
a = text.find('h')
b = text.rfind('h')

# print(s.replace(s[a+1:b], s[b-1:a:-1]))  # –º–æ–∂–Ω–æ —Ç–∞–∫ —Ç–æ–∂–µ
print(text[:a + 1] + text[b:a:-1] + text[b:])


# –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# 54 864

n = int(input())
print(list(range(1, n + 1)))

# –°–ø–∏—Å–æ–∫ –±—É–∫–≤
#  53 820
n = int(input())
str1 = list(range(n))
for i in range(n):
    str1[i] = chr(96 + i)
print(str1)

# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ
n = int(input())

el = ""
for i in range(n):
    el += chr(ord("a") + i)

print(list(el))

#
#
rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
for i in range(len(rainbow)):
    print(i)
    print(rainbow[i])
    if rainbow[i] == 'Green':
        rainbow[i] = '–ó–µ–ª–µ–Ω—ã–π'
    elif rainbow[i] == 'Violet':
        rainbow[i] = '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'

print(rainbow)

#
#
languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic',
             'Bengali', 'Portuguese', 'Russian', 'Japanese', 'Lahnda']

print(languages[::-1])

# –í—Å–µ —Å—Ä–∞–∑—É 1 üå∂Ô∏è
# 53 091
umbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10,
          10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
counter1, counter2 = 0, 0
print(len(numbers))
print(numbers[-1])
print(numbers[::-1])
for i in range(len(numbers)):
    if numbers[i] == 5:
        counter1 += 1
    if numbers[i] == 17:
        counter2 += 1

if counter1 > 0 and counter2 > 0:
    print('YES')
else:
    print('NO')
del numbers[0]
del numbers[-1]
print(numbers)

# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ
numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10,
           10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]

print(len(numbers))
print(numbers[-1])
print(numbers[::-1])
if 5 in numbers and 17 in numbers:
    print('YES')
else:
    print('NO')
del numbers[0]
del numbers[-1]
print(numbers)

# —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
# 53413
n = int(input())
list_str = list(range(n))
for i in range(n):
    list_str[i] = input()
print(list_str)


# –≤—Ç–æ—Ä–æ–µ —Ä–µ—àey–∏–µ
n = int(input())
seq = []
for _ in range(n):
    seq.append(input())
print(seq)

# —Ç—Ä–µ—Ç—å–µ —Ä–µ—à–µ–Ω–∏–µ
print([input() for _ in range(int(input()))])


# –ê–ª—Ñ–∞–≤–∏—Ç
# 52 030

l = []
for i in range(1, 27):
    l.append(chr(96 + i) * i)    # chr(ord("a") + i)
print(l)

# dnjhjt —Ä–µ—à–µ–Ω–∏–µ
res = []
for i in range(26):
    cur = ""
    for j in range(i + 1):
        cur += chr(ord("a") + i)

    res.append(cur)

print(res)


# –°–ø–∏—Å–æ–∫ –∫—É–±–æ–≤
# 52 481

n = int(input())
l = []
for i in range(1, n + 1):
    l.append((int(input())) ** 3)
print(l)


# –°–ø–∏—Å–æ–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π
# 52 442
n = int(input())
l = []

for i in range(1, n + 1):    # –ú–æ–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å, –µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫: range(1, n//2+1)
    if n % i == 0:
        l.append(i)

print(l)


# –°—É–º–º—ã –¥–≤—É—Ö
# 50 171
n = int(input())
l1 = []
l2 = []

for i in range(n):
    l1.append(int(input()))
for i in range(n - 1):
    l2.append(l1[i] + l1[i + 1])

print(l2)


# –£–¥–∞–ª–∏—Ç–µ –Ω–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
# 51 152
n = int(input())
l1 = []
l2 = []
for i in range(n):
    l1.append(int(input()))
for i in range(0, n, 2):
    l2.append(l1[i])
print(l2)

# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ
n = int(input())
seq = []

for _ in range(n):
    cur = int(input())
    seq.append(cur)

print(seq[::2])


# k-–∞—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ üå∂Ô∏èüå∂Ô∏è
# 48 314
n = int(input())
l1 = []


str1 = ''
for _ in range(n):
    l1.append(input())

k = int(input())

for i in range(n):
    if len(l1[i]) >= k:
        str1 += l1[i][k-1]

print(str1)


# –°–∏–º–≤–æ–ª—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
# 50 663
l = []
for _ in range(int(input())):
    l.extend(input())
print(l)

#
#
numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
for i in range(len(numbers)):
    numbers[i] = numbers[i] ** 2
print(*numbers)

# –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# 50 131
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ xx –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ f(x)=x2+2x+1f(x)=x2+2x+1, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
n = int(input())
l = []

for _ in range(n):
    x = int(input())
    l.append((x + 1) ** 2)
    print(x)

print()
print(*l, sep='\n')

# Remove outliers
# 49 807
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.
n = int(input())
l1 = []
l2 = []
mx, mn = 0, 0

for _ in range(n):
    l1.append(int(input()))

# –º–µ—Ç–æ–¥ index - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –≤ —Å–ø–∏—Å–∫–µ l1
del l1[l1.index(min(l1))]
del l1[l1.index(max(l1))]   # del - —É–¥–∞–ª—è–µ–º —ç–ª—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º

print(*l1, sep='\n')

# –ë–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
# 49 222
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.
n = int(input())
l1 = []

for i in range(n):
    el = input()
    if el not in l1:   # –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ l1 –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ s, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ
        l1.append(el)

print(*l1, sep='\n')


# Google search - 1
# 48 232
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
n = int(input())
l1 = []

for i in range(n):
    el = input()
    l1.append(el)

search = input()

for i in range(n):
    if search.lower() in l1[i].lower():
        print(l1[i])

# Google search - 2 üå∂Ô∏èüå∂Ô∏è
# 44 458
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º —á–∏—Å–ª–æ kk ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∑–∞—Ç–µ–º kk —Å—Ç—Ä–æ–∫ ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.

n = int(input())
l1 = []
for _ in range(n):  # —Å–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ n —Å—Ç—Ä–æ–∫
    el = input()
    l1.append(el)

k = int(input())
l2 = []
for _ in range(k):  # —Å–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ k —Å—Ç—Ä–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    s1 = input()
    l2.append(s1)

for i in range(n):   # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    counter = 0
    for j in range(k):
        if l2[j].lower() in l1[i].lower():
            counter += 1                     # –µ—Å–ª–∏ –Ω–∞—Å—á–∏—Ç–∞–ª –∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

    print('cnt=', counter)     # –≤—ã–≤–æ–¥–∏–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    if counter == k:
        print(l1[i])
# ______________________________________________________________
# –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞
n = int(input())

strings = []
for _ in range(n):
    el = input()
    strings.append(el)

k = int(input())

search_queries = []
for _ in range(k):
    search_query = input()
    search_queries.append(search_query)

for el in strings:
    for search_query in search_queries:
        if search_query.lower() not in el.lower():
            break
    else:
        print(el)


# Negatives, Zeros and Positives
# 47 754
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º nn —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∑–∞—Ç–µ–º –Ω—É–ª–∏, –∞ –∑–∞—Ç–µ–º –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.
n = int(input())
l1 = []

for i in range(n):  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    el = int(input())
    l1.append(el)

for i in range(n):  # –≤—ã–≤–æ–¥–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    if l1[i] < 0:
        print(l1[i])

for i in range(n):  # –≤—ã–≤–æ–¥–∏–º –Ω—É–ª–∏
    if l1[i] == 0:
        print(l1[i])

for i in range(n):  # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    if l1[i] > 0:
        print(l1[i])

# ____________________________–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ(—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ) —Ä–µ—à–µ–Ω–∏–µ_____________________
# —Ç.–∫. —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–õ–ò –∫—Ä—É—Ç–∏—Ç—å 4 —Ü–∏–∫–ª–∞ –∑–∞—Ç—Ä–∞—Ç–Ω–æ

a, b, c = [], [], list()       # —Å–æ–∑–¥–∞—ë–º 3 —Å–ø–∏—Å–∫–∞ , –¥–ª—è - 0 +
for _ in range(int(input())):          # —Ü–∏–∫–ª n —á–∏—Å–µ–ª
    n = int(input())            # –≤–≤–æ–¥–∏–º —á–∏—Å–ª–∞
    if n < 0:                   # –µ—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è
        # —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        a.append(n)
    elif n == 0:
        b.append(n)
    elif n > 0:
        c.append(n)
print(*a, sep='\n')   # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏ –ø–æ–ø–æ—Ä—è–¥–∫—É
print(*b, sep='\n')
print(*c, sep='\n')
# _________________________________________________________________________________

# –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
# 49 627
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫.

el = input()          # –≤–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
words = el.split()    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ - —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
print(*words, sep='\n')  # –≤—ã–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏


print(*input().split(), sep='\n')   # —Ç–æ–∂–µ —Å–∞–º–æ–µ, –¢–û–õ–¨–ö–û –ö–û–†–û–ß–ï!!

# –∏–ª–∏
print('\n'.join(input().split()))   # —Ç–æ–∂–µ —Å–∞–º–æ–µ

print(input().replace(' ', '\n'))   # —Ç–æ–∂–µ —Å–∞–º–æ–µ
# _________________________________________________________________________


# –ò–Ω–∏—Ü–∏–∞–ª—ã
# 48 955
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã —á–µ–ª–æ–≤–µ–∫–∞.
el = input()
l1 = el.split()

l2 = []
for i in range(len(l1)):
    l2.append(l1[i][0])

print('.'.join(l2) + '.')
# ------------------–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç---------------------------
full_name = input().split()
print(full_name[0][0], full_name[1][0], full_name[2][0], sep=".", end=".")
# ___________________________________________________________________________

# Windows OS
# 48 417
# –í –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–≤—ã –¥–∏—Å–∫–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞–≤–∏—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ —Å–∏–º–≤–æ–ª  "\",  –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ —Ç–∞–∫–æ–π –∂–µ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ (–ø–∞–ø–∫–∏), –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª, –≤ –∫–æ–Ω—Ü–µ –ø–∏—à–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞ (C:\Windows\System32\calc.exe).
print(*input().split('\\'), sep='\n')

# –î–∏–∞–≥—Ä–∞–º–º–∞
# 48 198
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–∞–º —Å—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É.
str_num = input().split()  # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å –≤–≤–æ–¥–∏–º—ã–º–∏ —á–∏—Å–ª–∞–º–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ str)

for i in range(int(len(str_num))):
    print('+' * int(str_num[i]), sep='\n')
# ----------------------------------------------
seq = input().split()

for el in seq:              # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    print("+" * int(el))    # –∏ –≤—ã–≤–æ–¥–∏–º –ø–ª—é—Å—ã
# ______________________________________________

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ip-–∞–¥—Ä–µ—Å
# 47 345
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è 4 —Ü–µ–ª—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ip-–∞–¥—Ä–µ—Å–æ–º.
ip = input().split('.')
cnt = 0
for el in ip:
    if 0 <= int(el) <= 225:
        cnt += 1
if cnt == len(ip):
    print('–î–ê')
else:
    print('–ù–ï–¢')
# --------------------------------------------
seq = input().split(".")

for el in seq:
    if not (0 <= int(el) <= 255):
        print("–ù–ï–¢")
        break
else:                               # –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —à—Ç–∞—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    print("–î–ê")                     # —Ç.–µ. –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç BREAK
# ________________________________________


# –î–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
# 47 471
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —Å–∏–º–≤–æ–ª–æ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.

el = list(input())           # –ø–µ—Ä–µ–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
simbol = input()            # –≤–≤–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
# —Å –ø–æ–º–æ—â—å—é f-—Å—Ç—Ä–æ–∫–∏ —Å–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
print(f'{simbol}'.join(el))
# --------------------------------
el = input()
simbol = input()

res = simbol.join(el)
print(res)
# ________________________________________

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä
# 44 202
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–∞—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–≤–Ω—ã—Ö –¥—Ä—É–≥ –¥—Ä—É–≥—É. –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –ª—é–±—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ä–∞–≤–Ω—ã–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –æ–±—Ä–∞–∑—É—é—Ç –æ–¥–Ω—É –ø–∞—Ä—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å.

el = input().split()  # –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
cnt = 0
for i in range(len(el)):
    for j in range(i + 1, len(el)):
        if el[i] == el[j]:
            cnt += 1

print(cnt)


# –í—Å–µ —Å—Ä–∞–∑—É 2 üå∂Ô∏è
# 46 655
#

numbers = [8, 9, 10, 11]
# print(*numbers)

numbers[1] = 17
# print(*numbers)

numbers.extend([4, 5, 6])
# print(*numbers)

del numbers[0]
# print(*numbers)

numbers *= 2
# print(*numbers)

numbers.insert(3, 25)
print(numbers)

# –ü–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å min –∏ max
# 44 109
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.

str_num1 = input().split()
str_num2 = []

for i in range(len(str_num1)):
    # print('i=', i, end=' ')
    str_num2.append(int(str_num1[i]))
    # print('str_num2=', str_num2)
# print(*str_num2)
mn = str_num2.index(min(str_num2))
# print(mn)
mx = str_num2.index(max(str_num2))
# print(mx)
str_num2[mn], str_num2[mx] = str_num2[mx], str_num2[mn]
print(*str_num2)
# ---------------------------------------
seq = []
for el in input().split():
    seq.append(int(el))

mx_ind = seq.index(max(seq))
mn_ind = seq.index(min(seq))
seq[mx_ind], seq[mn_ind] = seq[mn_ind], seq[mx_ind]

print(*seq)
# ____________________________________________________


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π
# 44 494
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: 'a', 'an', 'the'
text1 = input().split()
text2 = []

for i in range(len(text1)):
    text2.append(text1[i].lower())

cnt_article = text2.count('a') + text2.count('an') + text2.count('the')
print('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π:', cnt_article)
# -----------------------------------------------------------
seq = input().lower().split()
res = seq.count("a") + seq.count("an") + seq.count("the")

print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: {res}")
# _____________________________________________________________

# –í–∑–ª–æ–º –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏ üå∂Ô∏è
# 40 353
# –ù–µ–º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤ –ø—É—Å—Ç–æ—à–∞—Ö –ú–æ—Ö–∞–≤–µ –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–µ–ª –≤ –•–∏–¥–¥–µ–Ω-–í—ç–ª–∏ ‚Äì —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –±—É–Ω–∫–µ—Ä –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏ –∏ –ª—é–±–µ–∑–Ω–æ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –ø–æ–º–æ—á—å –∏–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –∏—Ö –ø—Ä–æ–±–ª–µ–º. –û–¥–Ω–æ–π –∏–∑ —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º —è–≤–ª—è–ª—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—è–≤–ª—è–ª—Å—è –≤ –≤–∏–¥–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏. –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ë—Ä–∞—Ç—Å—Ç–≤–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É –∏ –ø–∏—à—É—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∏–∫–∞–∫ –Ω–µ –Ω–∞–≤—Ä–µ–¥–∏—Ç –∏–º. –ü–æ–º–æ–≥–∏—Ç–µ –ø–∏—Å—Ü—É –ò–±—Å–µ–Ω—É —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.


n = input()
n = n[1:]

for i in range(int(n)):
    t = input().split('#')
    el = t[0]
    x = el.rstrip()
    print(x)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–∏—Å–µ–ª
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∞ –∑–∞—Ç–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é. #
# 43 765
el = input().split()  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏
s1 = []
for i in range(len(el)):
    s1.append(int(el[i]))
s1.sort()
print(*s1)
s1.sort(reverse=True)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä revers
# -------------------------------------------------
seq = []
for el in input().split():
    seq.append(int(el))

seq.sort()
print(*seq)

seq.reverse()
print(*seq)
# ________________________________________________


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º.
# 44 866
#
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
            'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
# —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –≤ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞
new_keywords = [el[1:] for el in keywords]
print(new_keywords)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# 44 795
#
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
            'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

# —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ lengths, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ len(el) - –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏(—ç–ª-—Ç–∞ —Å–ø–∏—Å–∫–∞ keywords). –ø–µ—Ä–µ–±–∏—Ä–∞—è —Ü–∏–∫–ª–æ–º —Å–ø–∏—Å–æ–∫ keywords
lengths = [len(el) for el in keywords]
print(lengths)

#
# 44 434
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–ø–∏—Å–æ—á–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ –ø—è—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally',
            'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
new_keywords = [el for el in keywords if len(el) >= 5]
print(new_keywords)

#
# 43 724
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –æ—Ç 100100 –¥–æ 10001000.
palindromes = [str(i) for i in range(1000) if str(i) == str(i)[::-1]]
print(palindromes)

# –°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 1
#  44 252
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –æ—Ç 11 –¥–æ nn (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
n = int(input())
quad = [i**2 for i in range(1, n + 1)]
print(*quad, sep='\n')


# –°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 2
# 43 095
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –∫—É–±—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–∞–∫–∂–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#
el = input().split()
cubes = [(int(el[i]))**3 for i in range(0, len(el))]
print(*cubes)
# --------------------------------------------------------------
seq = [int(el) for el in input().split()]    # —Åo–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏—á–∏—Ç–∞–Ω—ã—Ö —á–∏—Å–µ–ª
cubes = [el ** 3 for el in seq]              # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–±–æ–≤ —Ç–µ—Ö —á–∏—Å–µ–ª

for el in cubes:                 # –î–ª—è –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for
    print(el, end=' ')             # –≤—ã–≤–æ–¥–∏–º —á–∏—Å–ª–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É
# ______________________________________________________

# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 1
# 43 542
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
print(*[el for el in input().split()], sep='\n')
# ---------------------
print(*input().split(), sep='\n')
#
[print(s) for s in input().split()]
# _____________________________________________

# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 2
# 42 466
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

print(*[el for el in input() if el in '1234567890'], sep='')
# --------------------------------------------------------------
digits = [el for el in input() if el.isdigit()]
print(*digits, sep="")
# --------------------------------------------------------------
# —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ - isdigit(). –µ—Å–ª–∏ —Å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
print(*[c for c in input() if c.isdigit()], sep='')
# ______________________________________________________________


# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 3
# 41 868
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –Ω–µ –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ —Ü–∏—Ñ—Ä—É 44 –∫–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª.
# –ü—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

print(*[int(el)**2 for el in input().split() if int(el) %
      2 == 0 and int(el) ** 2 % 10 != 4])

#
# 42 843
# –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97,
     0, -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]

n = len(a)
flag = False
for i in range(n - 1):

    if flag:                   # —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        break
    flag = True
    for j in range(n - i - 1):
        if a[j] > a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
            flag = False                            # —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

print(a)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º
# 38 845
# –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–≤ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã–±–æ—Ä–æ–º.

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º —É–ª—É—á—à–∞–µ—Ç –ø—É–∑—ã—Ä—å–∫–æ–≤—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, —Å–æ–≤–µ—Ä—à–∞—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω –æ–±–º–µ–Ω –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ö–æ–¥
# –ø–æ —Å–ø–∏—Å–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–æ–º–µ—â–∞–µ—Ç –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é.
# –ö–∞–∫ –∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
# –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ. –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –Ω–∞ —Å–≤–æ—ë –º–µ—Å—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
# –ü—Ä–æ—Ö–æ–¥—ã –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è n‚àí1 —Ä–∞–∑, –≥–¥–µ n ‚Äì –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑ –Ω–∏—Ö
# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ.

# –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
# ________________________________________________________________

# –°–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö
# 36 662
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ n,‚Äân‚â•2n,n‚â•2. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
# [2, 4, 6, ..., n].

n = int(input())
nums = [i for i in range(1, n + 1) if i % 2 == 0]
print(nums)
# --------------------------------------
n = int(input())
seq = list(range(2, n + 1, 2))

print(seq)
# __________________________________________

# –°—É–º–º–∞ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
#
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª L –∏ M. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Å—É–º–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–≤ L –∏ M. –î–∞–ª–µ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ 1 –ø—Ä–æ–±–µ–ª.

l1 = input().split()
l2 = input().split()
l3 = []
for i in range(len(l1)):
    l3.append(int(l1[i]) + int(l2[i]))

print(*l3)
# -----------------------------------
a = input().split()
b = input().split()
n = len(a)

seq = [int(a[i]) + int(b[i]) for i in range(n)]
print(*seq)
# _________________________________________

# –°—É–º–º–∞ —á–∏—Å–µ–ª
# 36 452
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —á–∏—Å–ª–æ–º –∑–Ω–∞–∫ +, –∞ –∑–∞—Ç–µ–º –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.

l1 = input().split()
total = 0
print(*l1, sep='+', end='')
print('=', end='')
for el in l1:
    total += int(el)
print(total)
# ----------------------------------
seq = input().split()
expression = "+".join(seq)

sm = 0
for el in seq:
    sm += int(el)
expression += f"={sm}"

print(expression)
# ___________________________________________

# –í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä üå∂Ô∏èüå∂Ô∏è
# 34 803
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º. –°—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
#    abc-def-hijk –∏–ª–∏
#    7-abc-def-hijk,
# –≥–¥–µ a, b, c, d, e, f, h, i, j, k ‚Äì —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9.

t = input().split('-')
# 7-301-447-5820
if len(t) == 3:
    if (t[0].isdigit() == True and len(t[0]) == 3) and (t[1].isdigit() == True and len(t[1]) == 3) and (t[2].isdigit() == True and len(t[2]) == 4):
        print('YES')
    else:
        print('NO')
elif len(t) == 4:
    if (t[0].isdigit() == True and len(t[0]) == 1 and t[0] == '7') and (t[1].isdigit() == True and len(t[1]) == 3) and (t[2].isdigit() == True and len(t[2]) == 3) and (t[3].isdigit() == True and len(t[3]) == 4):
        print('YES')
    else:
        print('NO')
else:
    print('NO')
# ---------------------------------------------------
seq = input().split("-")
lens = [len(el) for el in seq]

if lens == [1, 3, 3, 4] and "".join(seq).isdigit() and seq[0] == "7":
    print("YES")
elif lens == [3, 3, 4] and "".join(seq).isdigit():
    print("YES")
else:
    print("NO")
# _____________________________________________________


# –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
# 36 239
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.

l1 = input().split()
# –ø—Ä–æ—Å–ø–∞–ª –ø–æ—á—Ç–∏ –≤—Å—é –Ω–æ—á—å
lens = [len(el) for el in l1]
print(max(lens))
# --------------------------------------------
lens = [len(el) for el in input().split()]
print(max(lens))
# ____________________________________________

# –ú–æ–ª–æ–¥–µ–∂–Ω—ã–π –∂–∞—Ä–≥–æ–Ω
# 35 555
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ "–º–æ–ª–æ–¥–µ–∂–Ω—ã–π –∂–∞—Ä–≥–æ–Ω" –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:
# –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ —Å—Ç–∞–≤–∏—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞;
# –∑–∞—Ç–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≥ "–∫–∏".
l1 = input().split()
cod = []
# –ø—Ä–æ—Å–ø–∞–ª –ø–æ—á—Ç–∏ –≤—Å—é –Ω–æ—á—å
# —Ä–æ—Å–ø–∞–ª–ø–∫–∏ –æ—á—Ç–∏–ø–∫–∏ —Å—é–≤–∫–∏ –æ—á—å–Ω–∫–∏
# cod = [el[0], el[-1] = el[-1], el[0] for el in l1]

for el in l1:
    # el[0], el[-1] = el[-1], el[0]
    # el = el + '–∫–∏'
    el = el[1:] + el[0] + '–∫–∏'
    cod.append(el)
print(*cod)
# ----------------------------------------------------
print(*[el[1:] + el[0] + '–∫–∏' for el in input().split()])
# ___________________________________________________________

# –ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 1
# 42 651
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_box(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 14√ó1014√ó10 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def draw_box():
    print('*' * 10)
    for i in range(12):
        print("*", "*", sep=" " * 8)
    print('*' * 10)


# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
draw_box()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
# ______________________________________________


# –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 1
# 42 455
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∫–∞—Ç–µ—Ç–∞–º–∏, —Ä–∞–≤–Ω—ã–º–∏ 1010 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def draw_triangle():
    l1 = ['*' * i for i in range(1, 11)]
    print(*l1, sep='\n')


# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
# _________________________________________________

# –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
# 41 207
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def draw_triangle(fill, base):
    for i in range(1, base // 2 + 1):
        print(fill * i)
    for i in range(base // 2 + 1, 0,  -1):
        print(fill * i)


# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
fill = input()
base = int(input())
draw_triangle(fill, base)  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏


# –§–ò–û
# 41 700
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_fio(name, surname, patronymic), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def print_fio(name, surname, patronymic):
    fio = [surname[0].upper(), name[0].upper(), patronymic[0].upper()]
    print(*fio, sep='')


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
name, surname, patronymic = input(), input(), input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print_fio(name, surname, patronymic)
# ------------------------------------------------------------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def print_fio(name, surname, patronymic):
    full_name = (surname[0] + name[0] + patronymic[0]).upper()
    print(full_name)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
name, surname, patronymic = input(), input(), input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print_fio(name, surname, patronymic)
# ________________________________________________________________________________

# –°—É–º–º–∞ —Ü–∏—Ñ—Ä
# 41 123
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_digit_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ num –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å —Å—É–º–º—É –µ–≥–æ —Ü–∏—Ñ—Ä.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def print_digit_sum(num):
    total = 0
    while num > 0:
        total += num % 10
        num //= 10
    print(total)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print_digit_sum(n)
# ________________________________________________________________

#
#
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –µ–≥–æ –∫–∞—Ç–µ—Ç–æ–≤.


def compute_hypotenuse(a, b):
    c = (a ** 2 + b ** 2) ** 0.5
    return c
#
#
#


def do_something(numbers):
    result = 1
    for i in numbers:
        result *= i
    return result


# –ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞?
print(do_something([2, 2, 2, 2]))
# –æ—Ç–≤–µ—Ç = 16
# __________________________________________________________________________
# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
# 40 858
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_miles(km), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª—è—Ö. –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –º–∏–ª–∏ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã * 0.6214.
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def convert_to_miles(km):
    ml = km * 0.6214
    return ml


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_miles(num))
# __________________________________________________________________________

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
# 40 495
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def get_days(month):
    month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day = month[num - 1]
    return day


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_days(num))
# __________________________________________________________________________

# –î–µ–ª–∏—Ç–µ–ª–∏ 1
# 40 304
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def get_factors(num):
    div = []
    for i in range(1, n // 2 + 1):  # –î–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–æ –ø–æ–ª–æ–≤–∏–Ω—ã —á–∏—Å–ª–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        if n % i == 0:
            div.append(i)
    # —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–∏—Ç–µ–ª—å —á–∏—Å–ª–∞ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è, –≤ —Å–ø–∏—Å–æ–∫
    div.append(num)
    return div


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_factors(n))
# __________________________________________________________________________


# –î–µ–ª–∏—Ç–µ–ª–∏ 2
# 40 032
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.

def get_factors(num):
    div = []
    for i in range(1, n // 2 + 1):  # –î–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–æ –ø–æ–ª–æ–≤–∏–Ω—ã —á–∏—Å–ª–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        if n % i == 0:
            div.append(i)
    # —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–∏—Ç–µ–ª—å —á–∏—Å–ª–∞ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è, –≤ —Å–ø–∏—Å–æ–∫
    div.append(num)

    return len(div)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_factors(n))
# __________________________________________________________________________


# –ù–∞–π—Ç–∏ –≤—Å–µ—Ö
# 38 743
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É target –∏ —Å–∏–º–≤–æ–ª symbol –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def find_all(target, symbol):
    l1 = []
    for i in range(len(target)):
        if target[i] == symbol:
            l1.append(i)
    return l1


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
s = input()
char = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(find_all(s, char))
# -----------------------–≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ-----------------------------------------


def find_all(target, symbol):
    cur = 0
    res = []

    for i in target:
        if i == symbol:
            res.append(cur)

        cur += 1

    return res


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
s = input()
char = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(find_all(s, char))
# __________________________________________________________


# Merge lists 1
# 38 901
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.


# print(merge([1, 2, 3], [5, 6, 7, 8]))
# print(merge([1, 7, 10, 16], [5, 6, 13, 20]))
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def merge(list1, list2):
    list3 = []
    list3 = list1 + list2    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    list3.sort()
    return list3


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
numbers1 = [int(c) for c in input().split()]
numbers2 = [int(c) for c in input().split()]

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(merge(numbers1, numbers2))
# __________________________________________________________


# –°–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
#
# Merge lists 2
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.
# 34 987

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def quick_merge(list1, list2):
    result = []

    p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
    p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2

    while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        if list1[p1] <= list2[p2]:
            result.append(list1[p1])
            p1 += 1
        else:
            result.append(list2[p2])
            p2 += 1

    if p1 < len(list1):   # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
        result += list1[p1:]
    else:                 # –∏–Ω–∞—á–µ –ø—Ä–∏—Ü–µ–ø–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞
        result += list2[p2:]

    return result


# –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫
n = int(input())
# –ó–∞–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
total_list = []
# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫
for i in range(n):
    #  –í–≤–æ–¥–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –µ–¥–∏–Ω—ã–π
    num = [int(el) for el in input().split()]

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–≤—ã–π –≤–µ–¥–µ–Ω—ã–π, –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å "–¥–≤–∞ —Å–ø–∏—Å–∫–∞". –°–Ω–∞—á–∞–ª–∞ –ø—É—Å—Ç–æ–π –∏ –ø–µ—Ä–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–∞—à –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ "total_list". –ü–æ—Å–ª–µ –±—É–¥–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ–∏—Å–ø–µ—á–µ–Ω–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ "total_list" –∏ –Ω–æ–≤—ã–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    total_list = quick_merge(total_list, num)


# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ " * ". –õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –∏ –Ω–µ —Ä–∞–∑–Ω–æ—Å–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É)))))))))
print(*total_list)
# ___________________________________

#
#
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def is_valid_triangle(side1, side2, side3):
    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:
        return True
    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
a, b, c = int(input()), int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_valid_triangle(a, b, c))
# __________________________________________________________

# Is a Number Prime? üå∂Ô∏è
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
#


def is_prime(num):
    cnt_div = 0
    if num > 1:
        for i in range(2, num // 2 + 1):
            if num % i == 0:
                cnt_div += 1
                break
        if cnt_div == 0:
            return True
        else:
            return False

    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_prime(n))
# -----------------------—Ä–µ—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞--------------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def is_prime(num):
    if num == 1:
        return False  # —á–∏—Å–ª–æ 1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º

    # –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É.
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False  # —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å

    return True


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_prime(n))

# __________________________________________________________


# Next Prime üå∂Ô∏èüå∂Ô∏è
#
# 36 067

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ.
def is_prime(num):
    if num == 1:
        return False  # —Ç.–∫. —á–∏—Å–ª–æ 1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º.

    # –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É.
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False  # —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å.

    return True

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞.


def get_next_prime(num):
    cur_num = num + 1  # –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
    while not is_prime(cur_num):  # cur_num - —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ
        cur_num += 1              # # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1
    return cur_num


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_next_prime(n))
# __________________________________________________________


# Good password üå∂Ô∏è
# 35 878
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –∏ False - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –µ—Å–ª–∏:

#    –µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 88 —Å–∏–º–≤–æ–ª–æ–≤;
#    –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
#    –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
#    –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def is_password_good(password):
    if len(password) >= 8 and password.isalnum() and not (password.isalpha()) and not (password.isdigit()) and not password.islower() and not password.isupper():
        return True
    else:
        return False


# –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
s = input()


# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
print(is_password_good(s))
# -------------------------------—Ä–µ—à–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è-----------------------


def is_password_good(password):
    if len(password) < 8:
        return False
    flag1 = False
    flag2 = False
    flag3 = False
    for c in password:
        if c.isupper():
            flag1 = True
        elif c.islower():
            flag2 = True
        elif c.isdigit():
            flag3 = True
    return flag1 and flag2 and flag3


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_password_good(txt))
# __________________________________________________________


# –†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º
# 35 592
#

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def is_one_away(word1, word2):

    if len(word1) == len(word2) and word1 != word2:

        cnt_symbol = 0
        for i in range(len(word1)):

            if word1[i] != word2[i]:
                cnt_symbol += 1
            if cnt_symbol > 1:  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –≤–¢–æ—Ä–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ –±—É–∫–≤
                break
        else:
            return True         # –±–ª–æ–∫ –ø—Ä–∏ —à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
        return False          # –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª break

    else:
        return False            # –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã –∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é


# –≤–≤–æ–¥ —Å–ª–æ–≤
s1, s2 = input(), input()

# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
print(is_one_away(s1, s2))
# -----------------------------—Ä–µ—à–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞-------------------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def is_one_away(word1, word2):
    mismatches = 0

    if len(word1) == len(word2):
        for i in range(len(word1)):
            if word1[i] != word2[i]:
                mismatches += 1

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞ 1
        return mismatches == 1
        # —Ç—É—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ª–∏–±–æ True, –ª–∏–±–æ False.
    return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt1 = input()
txt2 = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_one_away(txt1, txt2))
# __________________________________________________________


# –ü–∞–ª–∏–Ω–¥—Ä–æ–º üå∂Ô∏è
# 35 153
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# palindromes = [str(i) for i in range(1000) if str(i) == str(i)[::-1]]
# print(palindromes)

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_palindrome(text):

    # text = text.lower()
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫—É text.
    # –µ—Å–ª–∏ el —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ
    # —Å–∫–ª–µ–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å—Ç–æ—Ä–æ–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è el –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
    text1 = "".join(el.lower() for el in text if el.isalpha())

    # –µ—Å–ª–∏ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ text —Ä–∞–≤–Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç True, –∞ –µ—Å–ª–∏ –Ω–µ—Ç - False
    return text1 == text1[::-1]


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_palindrome(txt))
# --------------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞--------------------
#
# –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º —Å—Ä–µ–∑, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ:
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def is_palindrome(text):
    symbols = [' ', ',', '.', '!', '?', '-']
    for c in symbols:
        text = text.replace(c, '')
    text = text.lower()
    return text == text[::-1]


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_palindrome(txt))
# __________________________________________________________


# BEEGEEK
# 32 991
# BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.
# –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK —Ñ–∞–Ω–∞—Ç–µ–µ—Ç –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ –æ–Ω —Ä–µ—à–∏–ª:
#  —á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
# —á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
# —á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º BEEGEEK –±–∞–Ω–∫–∞ –∏ False - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# ======================================================
# ======================================================
def is_palindrome(text):

    # text = text.lower()
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫—É text.
    # –µ—Å–ª–∏ el —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ
    # —Å–∫–ª–µ–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å—Ç–æ—Ä–æ–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è el –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
    text1 = "".join(el.lower() for el in text if el.isdigit())

    # –µ—Å–ª–∏ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ text —Ä–∞–≤–Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ
    # —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç True, –∞ –µ—Å–ª–∏ –Ω–µ—Ç - False
    return text1 == text1[::-1]
# ======================================================
# ======================================================
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ.


def is_prime(num):
    if num == 1:
        return False  # —Ç.–∫. —á–∏—Å–ª–æ 1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º.

    # –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É.
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False  # —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å.

    return True
# ======================================================
# ======================================================
# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ


def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_valid_password(password):
    pass1 = password.split(':')
    if len(pass1) == 3:
        return is_palindrome(pass1[0]) and is_prime(int(pass1[1])) and is_even(int(pass1[2]))
    else:
        return False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
psw = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_valid_password(psw))
# __________________________________________________________


# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è
# 32 828
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
# –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏
# –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏
# False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞,
# —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ), –≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥–µ—Ç—Å—è
# –ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ (–ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–µ–≤–µ–µ
# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏).


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_correct_bracket(text):
    # text1 = list(text)
    # text1 = "".join(el.lower() for el in text if el == chr(40) or el == chr(41)) # —Å–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ —Å —Å–∏–º–≤–æ–ª–æ–º —Å–∫–æ–±–æ–∫

    cnt = 0
    for el in text:
        if cnt < 0:
            break
        elif el == '(':
            cnt += 1
        elif el == ')':
            cnt -= 1

    return cnt == 0     # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ –æ—Å—Ç–∞—Ç–∫–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º  True, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω–µ—Ç—Å—è False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_correct_bracket(txt))
# --------------------------------jn –ø—Ä–µ–ø–æ–¥–∞-----------------------


def is_correct_bracket(text):
    while "()" in text:
        text = text.replace("()", "")    # —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã ()

    return text == ""  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ –≤ –æ—Å—Ç–∞—Ç–∫–µ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º  True, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω–µ—Ç—Å—è False


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_correct_bracket(txt))
# __________________________________________________________

# –ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
# 32 106
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç–∏–ª—è—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ç—É—Ç.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def convert_to_python_case(text):
    pass


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_python_case(txt))
# __________________________________________________________


# –ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
# 32 106
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç–∏–ª—è—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ç—É—Ç.
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

# 1) –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä s

# 2) –î–∞–ª–µ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –µ–≥–æ –¥–ª–∏–Ω—ã –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å:
# –µ—Å–ª–∏ text[i].isupper() (–µ—Å–ª–∏ –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è),
# —Ç–æ –∫ —Å–ø–∏—Å–∫—É –¥–æ–±–∞–≤–ª—è–µ–º '_' (s.append('_')).
# –ï—Å–ª–∏ –±—É–∫–≤–∞ –Ω–µ –∑–∞–≥–ª–∞–≤–Ω–∞—è —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–∏—à–µ–º –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É
#  –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã (s.append(text[i].lower()) ).
# –í –∫–æ–Ω—Ü–µ –ø–æ–¥ for –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ''.join(s[1:])


# –ù–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ !


def convert_to_python_case(text):
    l1 = list(text)
    l2 = []
    for i in range(len(l1)):

        if i == 0 and l1[i].isupper():
            l2.append(l1[i].lower())
        elif i > 0 and l1[i].isupper():
            l2.append('_')
            l2.append(l1[i].lower())

        else:
            l2.append(l1[i])

    return "".join(l2)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_python_case(txt))
# ---------------------------------------------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def convert_to_python_case(text):
    new_text = ""
    for el in text:
        if not el == el.lower():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã)
            new_text += "_" + el.lower()
        else:
            new_text += el

    return new_text[1:]


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_python_case(txt))
# ___________________________________________________________

# –°–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
# 35 245
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_middle_point(x1, y1, x2, y2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–æ–≤ –æ—Ç—Ä–µ–∑–∫–∞ (x1;‚Äây1)(x1‚Äã;y1‚Äã) –∏ (x2;‚Äây2)(x2‚Äã;y2‚Äã) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ —è–≤–ª—è—é—â–µ–π—Å—è —Å–µ—Ä–µ–¥–∏–Ω–æ–π –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞.
# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def get_middle_point(x1, y1, x2, y2):
    x_middle = (x1 + x2) / 2
    y_middle = (y1 + y2) / 2
    return x_middle, y_middle


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
x_1, y_1 = int(input()), int(input())
x_2, y_2 = int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x, y = get_middle_point(x_1, y_1, x_2, y_2)
print(x, y)
# __________________________________________________________


# –ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞
# 34 912
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_circle(radius), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é.


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_circle(radius):
    c = 2 * math.pi * radius
    s = math.pi * radius ** 2
    return c, s


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
r = float(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
length, square = get_circle(r)
print(length, square)
# __________________________________________________________


# –ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è üå∂Ô∏èüå∂Ô∏è
# 34 088
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é solve(a, b, c), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a, b, c ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax2+bx+c=0ax2+bx+c=0 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ—Ä–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def solve(a, b, c):
    d = b ** 2 - 4 * a * c
    if d > 0:
        x_1 = (-b - math.sqrt(d)) / (2 * a)
        x_2 = (-b + math.sqrt(d)) / (2 * a)

    elif d == 0:
        x_1 = (-1 * b) / (2 * a)
        x_2 = (-1 * b) / (2 * a)
    # else:
        # print('–ù–µ—Ç –∫–æ—Ä–Ω–µ–π')

    return min(x1, x2), max(x1, x2)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
a, b, c = int(input()), int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x1, x2 = solve(a, b, c)
print(x1, x2)
# -----------------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞--------------------


def solve(a, b, c):
    D = b ** 2 - 4 * a * c
    x1 = (-b - D ** 0.5) / (2 * a)
    x2 = (-b + D ** 0.5) / (2 * a)

    return min(x1, x2), max(x1, x2)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
a, b, c = int(input()), int(input()), int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
x1, x2 = solve(a, b, c)
print(x1, x2)
# __________________________________________________________


# –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ üå∂Ô∏è
#  29 322
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ—Ç–æ–π —Ä–∞–≤–Ω—ã–º–∏ 1515 –∏ 88 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:

def draw_triangle(osn, h_triangl):

    j = 1
    for i in range(h_triangl - 1, -1, -1):

        print(' ' * i, j * '*', sep='')
        j += 2


# –¥–∞–Ω–Ω—ã–µ
a = 15
h = 8

# –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
draw_triangle(a, h)
# __________________________________________________________

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
#  29 703
# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ 10001000 —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏ 120120 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_shipping_cost(quantity), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ quantity ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def get_shipping_cost(quantity):
    price = 1000
    if quantity == 1:
        price = 1000
    if quantity > 1:
        price = 1000 + (n - 1) * 120
    return price


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_shipping_cost(n))

# __________________________________________________________


# –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è
# 29 336
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_binom(n, k), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ k –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞, —Ä–∞–≤–Ω–æ–≥–æ n!k!(n‚àík)!k!(n‚àík)!n!‚Äã.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ nn, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 11 –¥–æ nn, —Ç–æ –µ—Å—Ç—å
# n!=1‚ãÖ2‚ãÖ3‚ãÖ‚Ä¶‚ãÖn

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –≤—ã—á–∏—Å–ª—è—é—â—É—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ –≥–æ—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ –º–æ–¥—É–ª—è math. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è compute_binom(n, k) –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.


# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

def compute_binom(n, k):
    fakt = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))
    return int(fakt)


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())
k = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(compute_binom(n, k))

# __________________________________________________________


# –ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è
# 29 108
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_to_words(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ 1‚â§num ‚â§991‚â§num ‚â§99.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def number_to_words(num):

    number = ''
    l1 = ['–Ω–æ–ª—å', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å',
          '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å']
    l3 = ['–Ω–æ–ª—å', '–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç',
          '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']

    if 1 <= num <= 19:

        number = l1[num]

    elif 20 <= num <= 99:

        num_digit1 = num % 10
        num_digit2 = num // 10

        # –µ—Å–ª–∏ –Ω–µ —Ü–µ–ª—ã–µ –¥–µ—Å—è—Ç–∫–∏ (21,31,41...)
        if num_digit1 != 0:
            number = l3[num_digit2] + ' ' + l1[num_digit1]
        else:
            # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –¥–µ—Å—è—Ç–∫–∏ (20,30,40...)
            number = l3[num_digit2]

    return number


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(number_to_words(n))
# -------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞---------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def number_to_words(num):
    before_twenty = [
        '', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å', '–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å',
        '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'
    ]
    after_twenty = [
        '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç',
        '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
    ]

    if num < 20:
        res = before_twenty[num]
    else:
        res = after_twenty[num // 10 - 2] + " " + before_twenty[num % 10]

    return res.strip()


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(number_to_words(n))
# _____________________________________________________________________________

# –ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü
# 29 170
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_month(language, number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ language ‚Äì —è–∑—ã–∫ ru –∏–ª–∏ en –∏ number ‚Äì –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 12) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def get_month(language, number):

    l_ru = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
            '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
    l_en = ['january', 'february', 'march', 'april', 'may', 'june',
            'july', 'august', 'september', 'october', 'november', 'december']

    if language == 'ru':
        mounth = l_ru[number - 1]
    elif lan == 'en':
        mounth = l_en[number - 1]
    return mounth


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
lan = input()
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_month(lan, num))
# __________________________________________________________


# –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã
# 28 835
# –ú–∞–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ ‚Äì —ç—Ç–æ –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–µ–Ω—å, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü, —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ –≥–æ–¥–∞.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_magic(date), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∏ False - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_magic(date):

    l1 = date.split('.')
    return int(l1[0]) * int(l1[1]) == int(l1[2][-2:])

    # –∏–ª–∏ —Ç–∞–∫ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å
    # seq = date.split(".")
    # day, month, year = int(seq[0]), int(seq[1]), int(seq[2])
    # return day * month == year % 100


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
date = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_magic(date))
# __________________________________________________________


# –ü–∞–Ω–≥—Ä–∞–º–º—ã
# 28 443
# –ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. –û–±—ã—á–Ω–æ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_pangram(text) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª—ã.

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_pangram(text):
    text = text.lower()
    chars = list(text)
    chars.sort()
    sorted_string = ''.join(chars)
    sorted_string = sorted_string.lstrip()

    chars = []
    prev = None

    for c in sorted_string:
        if prev != c:
            chars.append(c)
            prev = c

    sort_no_dubl = ''.join(chars)

    return sort_no_dubl == 'abcdefghijklmnopqrstuvwxyz'

# 'Jackdaws love my big sphinx of quartz'


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))
# ---------------------–æ—Ç –ø—Ä–µ–ø–æ–¥–∞-----------------------------
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


def is_pangram(text):
    text = text.lower()
    for i in range(ord("a"), ord("z") + 1):
        if chr(i) not in text:
            return False

    return True


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))
# __________________________________________________________

#
#
#
# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏


def removeDuplicates(s):
    chars = []
    prev = None

    for c in s:
        if prev != c:
            chars.append(c)
            prev = c

    return ''.join(chars)


if __name__ == '__main__':

    s = 'AAABBCDDD'
    print(removeDuplicates(s))


# ---------------------------------------------------------------
#  —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å—Ç–∞–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º–∏:
#


def generate_random_int_list(items, from_number, to_number):
    rl = []

    while len(rl) < items:
        n = randint(from_number, to_number)
        if n in rl:
            continue
        else:
            rl.append(n)

    return rl


print(*generate_random_int_list(10, 1, 100), sep='\n')
# __________________________________________________________


#
#
#

num_rand = random.randint(1, 100)
print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É')

# –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞


def is_valid(num_str):
    # isdigit() –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    # –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—É—Å—Ç–æ–π –∏ —Å–æ—Å—Ç–æ–∏—Ç
    # —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

    # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ,  —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ isdigit(), —Å—Ç–æ—è–ª–∞ –≤ —É—Å–ª–æ–≤–∏–∏ –ø–µ—Ä–≤–æ–π,
    # —Ç.–∫. Python –ª–µ–Ω–∏–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∏ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏,
    # —Ç–æ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è int() –∫ –Ω–µ–π

    return s.isdigit() and 1 <= int(num_str) <= 100


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
while True:
    n = input()    # –≤–≤–æ–¥–∏–º —á–∏—Å–ª–æ

    if not (is_valid(n)):
        print('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?')
        continue
    else:
        n = int(n)
        break


left = 1
right = n
middle = (left + right) // 2


i = 1

while middle != n:

    if middle < n:
        print('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        left = middle + 1
    elif middle > n:
        print('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
        right = middle - 1

    middle = (left + right) // 2

    i += 1
print('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
print('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ =', i)
print('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É. –ï—â–µ —É–≤–∏–¥–∏–º—Å—è...')
# __________________________________________________________

# –¢–∏–º—É—Ä –∏ –µ–≥–æ —á–∏—Å–ª–∞
#
#


# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
num_rand = random.randint(1, 101)
print(num_rand)
print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É')


# –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞
def is_valid(num_str):
    # isdigit() –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    # –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—É—Å—Ç–æ–π –∏ —Å–æ—Å—Ç–æ–∏—Ç
    # —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

    # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ,  —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ isdigit(), —Å—Ç–æ—è–ª–∞ –≤ —É—Å–ª–æ–≤–∏–∏ –ø–µ—Ä–≤–æ–π,
    # —Ç.–∫. Python –ª–µ–Ω–∏–≤–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –∏ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏,
    # —Ç–æ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è int() –∫ –Ω–µ–π

    return num_str.isdigit() and 1 <= int(num_str) <= 100


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
while True:
    answer = input('–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: ')    # –≤–≤–æ–¥–∏–º —á–∏—Å–ª–æ
    if not (is_valid(answer)):
        print('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?')
        continue
    answer = int(answer)

    if answer < int(num_rand):
        print('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
    elif answer > int(num_rand):
        print('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
    else:
        print('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
        break


print('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É. –ï—â–µ —É–≤–∏–¥–∏–º—Å—è...')
# __________________________________________________________

# __________________________________________________________


# –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä 8
# 29 600
#
answers = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞', '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º',
           '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –¥–∞', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞',  '–î–∞',
           '–ü–æ–∫–∞ –Ω–µ—è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ',  '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å',
           '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º - –Ω–µ—Ç', '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']

print()
print()
print('---------------------------------------------')
print('–ü–†–ò–í–ï–¢ –ú–û–ô –î–û–†–û–ì–û–ô –î–†–£–ì, –Ø –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –®–ê–†, –ò –Ø –ó–ù–ê–Æ –û–¢–í–ï–¢ –ù–ê –õ–Æ–ë–û–ô –¢–í–û–ô –í–û–ü–†–û–°.')
print('---------------------------------------------')
name = input('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! ---> __')
print('\"–ü—Ä–∏–≤–µ—Ç, ', name, '\"', sep='')
print()

# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞


def is_valid(val_str):
    return val_str.isalpha()


# —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
while True:
    input('–í–í–ï–î–ò–¢–ï –í–ê–® –í–û–ü–†–û–°:  ')
    print()
    print(random.choice(answers))
    print()
    # –£—Ç–æ—á–Ω–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –¥–∞, —Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã!' –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.
    restart = input('–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–∞—Å? (yes(Y)/no(N): __')
    print()
    if restart in 'yY–Ω–ù':
        continue
    else:
        print()
        print('---------------------------------------------')
        print("    '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã!'")
        print('---------------------------------------------')
        print()
        print()
        print()
        print('-         __$$$$$$$$_____$$$$$$______$$$$$$')
        print('-__$$_____$_____$$____$$___$$___$$')
        print('-__$$_____$______$$____$$_$$___$$')
        print('-__$$_____$_$$$$$$$$____$$$___$$')
        print('-__$$_____$$$$$$$$$$$________$$_$$$$$$$$_')
        print('-__$$_____$$$$$__$$$$$______$$$$_______$$')
        print('-__$$_____$$$$$__$$$$$$____$$$$_____$$__$$')
        print('-__$$_____$$$$$$$$$$$_$$__$$_$$_____$$$$$$')
        print('-__$$_____$_$$$$$$$$____$$___$$______$$___')
        print('-__$$_____$____________________$$______$$$')
        print('-__$$_____$$$$$$$$$$_____________$$$$$$$$')
        print('-__$$_____________$$')
        print('-__$$$$$$$$$$$$$$$$$')

        break


# __________________________________________________________

# _______________________________________________________________________________

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
#
# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —É–º–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è, –∞ —Ç–∞–∫–∂–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –Ω–µ–≥–æ –≤–∫–ª—é—á–∏—Ç—å, –∞ –∫–∞–∫–∏–µ –∏—Å–∫–ª—é—á–∏—Ç—å.


def generate_symbols_list(is_numbers=False, is_letters=False, is_specials=False):
    numbers = [chr(i) for i in range(48, 58)]

    letters = [chr(i) for i in range(65, 91)] + \
              [chr(i) for i in range(97, 123)]

    special = [chr(i) for i in range(33, 48)] + \
              [chr(i) for i in range(58, 65)] + \
              [chr(i) for i in range(91, 97)] + \
              [chr(i) for i in range(123, 127)]

    symbols = []
    if is_numbers:
        symbols.extend(numbers)
    if is_letters:
        symbols.extend(letters)
    if is_specials:
        symbols.extend(special)

    return symbols


def generate_password(length, is_numbers=False, is_letters=False, is_specials=False):
    symbols = generate_symbols_list(is_numbers, is_letters, is_specials)
    return ''.join(choice(symbols) for _ in range(length))


def request_number(message):
    while True:
        result = input(message)

        if result.isdigit():
            result = int(result)
            break
        else:
            print('–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!')

    return result


print('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –ø–∞—Ä–æ–ª–µ–π!')

length = request_number('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: ')

is_numbers = input('–ù—É–∂–Ω—ã –ª–∏ —Ü–∏—Ñ—Ä—ã? [–¥–∞/–Ω–µ—Ç] ').lower() == '–¥–∞'
is_letters = input('–ù—É–∂–Ω—ã –ª–∏ –±—É–∫–≤—ã? [–¥–∞/–Ω–µ—Ç] ').lower() == '–¥–∞'
is_specials = input('–ù—É–∂–Ω—ã –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã? [–¥–∞/–Ω–µ—Ç] ').lower() == '–¥–∞'

print('–í–∞—à –ø–∞—Ä–æ–ª—å –≥–æ—Ç–æ–≤!')
print(generate_password(length, is_numbers, is_letters, is_specials))
# __________________________________________________________


# —à–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è
#
#

# –ë–ª–∞–∂–µ–Ω, –∫—Ç–æ –≤–µ—Ä—É–µ—Ç, —Ç–µ–ø–ª–æ –µ–º—É –Ω–∞ —Å–≤–µ—Ç–µ!

const_upper_ru = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
const_lower_ru = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'


# put your python code here
n = int(input())
s = input()
s = '–ë–ª–∞–∂–µ–Ω, –∫—Ç–æ –≤–µ—Ä—É–µ—Ç, —Ç–µ–ø–ª–æ –µ–º—É –Ω–∞ —Å–≤–µ—Ç–µ!'
s = s.lower()
# s ='–õ—Ö–∫—Ä–ø—á, —Ñ—å—à –º–ø—ä—ç–ø—å, —å–ø—â—Ö—à –ø—Ü—ç —á–∫ —ã–º–ø—å–ø!'


g = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
g1 = 'abcdefghijklmnopqrstuvwxyz'
for j in range(len(s)):
    if s[j] not in g and s[j] not in g1:
        print(s[j], end='')
    else:
        v = ord(s[j])
        v = v - n
        if v > 1103:
            v1 = 1072 + v - 1104
            print(chr(v1), end="")
        elif v < 1072:
            v1 = 1104 - 1072 + v
            print(chr(v1), end="")
        elif 1072 <= v <= 1104:
            v1 = v
            print(chr(v1), end="")
# __________________________________________________________


# __________________________________________________________


# BOH   = Binary, Octal, Hex
# 21 145
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –¥–≤–æ–∏—á–Ω—É—é,
# –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.

num = int(input())

# –ï—Å–ª–∏ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø—Ä–∏—Å—Ç–∞–≤–æ–∫ 0b, 0o, 0x, —Ç–æ –º—ã –º–æ–∂–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–º —Å—Ä–µ–∑–æ–º:
print(bin(num)[2:])
print(oct(num)[2:])
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A, B, C, D, E, F
print(hex(num)[2:].upper())


# __________________________________________________________

# –£–≥–∞–¥–∞–π–∫–∞ —Å–ª–æ–≤ (Hangman)
# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –µ–≥–æ —É–≥–∞–¥–∞—Ç—å.
# –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –±—É–∫–≤—ã —Å–ª–æ–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã. –¢–∞–∫–∂–µ —Ä–∏—Å—É–µ—Ç—Å—è –≤–∏—Å–µ–ª–∏—Ü–∞ —Å –ø–µ—Ç–ª–µ–π.
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ —Å–ª–æ–≤–æ.
# –ï—Å–ª–∏ —Ç–∞–∫–∞—è –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–≤–∏—Ç –±—É–∫–≤—É —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –æ–Ω–∞
# –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–µ. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç, –∫ –≤–∏—Å–µ–ª–∏—Ü–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–≥ –≤ –ø–µ—Ç–ª–µ,
# –∏–∑–æ–±—Ä–∞–∂–∞—é—â–∏–π –≥–æ–ª–æ–≤—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –±—É–∫–≤—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ
# –æ—Ç–≥–∞–¥–∞–µ—Ç –≤—Å—ë —Å–ª–æ–≤–æ. –ó–∞ –∫–∞–∂–¥—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –µ—â–µ –æ–¥–Ω–∞ —á–∞—Å—Ç—å —Ç—É–ª–æ–≤–∏—â–∞
# –≤–∏—Å–µ–ª—å–Ω–∏–∫–∞ (–æ–±—ã—á–Ω–æ –∏—Ö 6: –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ, 2 —Ä—É–∫–∏ –∏ 2 –Ω–æ–≥–∏.

word_list = ['—á–µ–ª–æ–≤–µ–∫', '—Ä–∞–±–æ—Ç–∞', '–≤–æ–ø—Ä–æ—Å', '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏—Å—Ç–µ–º–∞',
             '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏', '–º–∞—à–∏–Ω–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–∏—Å—Ç–æ—Ä–∏—è', '–≤–ª–∞—Å—Ç—å', '—Ç—ã—Å—è—á–∞',
             '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–æ–±–ª–∞—Å—Ç—å', '—Å—Ç–∞—Ç—å—è', '–∫–æ–º–ø–∞–Ω–∏—è', '–≥—Ä—É–ø–ø–∞', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ø—Ä–æ—Ü–µ—Å—Å', '—É—Å–ª–æ–≤–∏–µ',
             '—Å—Ä–µ–¥—Å—Ç–≤–æ', '–Ω–∞—á–∞–ª–æ', '—É—Ä–æ–≤–µ–Ω—å', '–º–∏–Ω—É—Ç–∞', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥–æ—Ä–æ–≥–∞', '–¥–µ–π—Å—Ç–≤–∏–µ', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '–ª—é–±–æ–≤—å',
             '–≤–∑–≥–ª—è–¥', '–æ–±—â–µ—Å—Ç–≤–æ', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–∫–æ–º–Ω–∞—Ç–∞', '–ø–æ—Ä—è–¥–æ–∫', '–º–æ–º–µ–Ω—Ç',
             '–ø–∏—Å—å–º–æ', '–ø–æ–º–æ—â—å', '—Å–∏—Ç—É–∞—Ü–∏—è', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–≤–Ω–∏–º–∞–Ω–∏–µ', '—Å–º–µ—Ä—Ç—å', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∑–∞–¥–∞—á–∞',
             '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '—Ä–∞–∑–≥–æ–≤–æ—Ä', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–µ—Å',
             '—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è', '–ø—Ä–∞–≤–∏–ª–æ', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä—Ç–∏—è', '—Å–µ—Ä–¥—Ü–µ', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–Ω–µ–¥–µ–ª—è',
             '—á—É–≤—Å—Ç–≤–æ', '–≥–∞–∑–µ—Ç–∞', '–ø—Ä–∏—á–∏–Ω–∞', '–æ—Å–Ω–æ–≤–∞', '—Ç–æ–≤–∞—Ä–∏—â', '–∫—É–ª—å—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', '–º–Ω–µ–Ω–∏–µ', '–¥–æ–∫—É–º–µ–Ω—Ç',
             '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–ø—Ä–æ–µ–∫—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Å–ª—É–∂–±–∞', '—Å—É–¥—å–±–∞', '–¥–µ–≤—É—à–∫–∞', '–æ—á–µ—Ä–µ–¥—å', '—Å–æ—Å—Ç–∞–≤',
             '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Å–æ–±—ã—Ç–∏–µ', '–æ–±—ä–µ–∫—Ç', '—Å–æ–∑–¥–∞–Ω–∏–µ', '–∑–Ω–∞—á–µ–Ω–∏–µ', '–ø–µ—Ä–∏–æ–¥', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ø—Ä–∏–º–µ—Ä',
             '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–ø—Ä–∏–Ω—Ü–∏–ø', '–≤–æ–∑–¥—É—Ö', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–±–æ—Ä—å–±–∞', '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
             '—Ä–∞–∑–º–µ—Ä', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–º–∞–ª—å—á–∏–∫', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '—É—á–∞—Å—Ç–∏–µ', '–¥–µ–≤–æ—á–∫–∞', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–∫–∞—Ä—Ç–∏–Ω–∞', '–¥–æ–ª–ª–∞—Ä',
             '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ä–∏—Å—É–Ω–æ–∫', '—Ç–µ—á–µ–Ω–∏–µ', '—Ü–µ—Ä–∫–æ–≤—å', '–Ω–∞—Å–µ–ª–µ–Ω–∏–µ', '–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ',
             '–º—É–∑—ã–∫–∞', '–ø—Ä–∞–≤–¥–∞', '—Å–≤–æ–±–æ–¥–∞', '–ø–∞–º—è—Ç—å', '–∫–æ–º–∞–Ω–¥–∞', '–¥–æ–≥–æ–≤–æ—Ä', '–¥–µ—Ä–µ–≤–æ', '—Ö–æ–∑—è–∏–Ω', '–ø—Ä–∏—Ä–æ–¥–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω',
             '–ø–æ–∑–∏—Ü–∏—è', '–ø–∏—Å–∞—Ç–µ–ª—å', '—Å–∞–º–æ–ª–µ—Ç', '—Å–æ–ª–Ω—Ü–µ', '—Å–ø–µ–∫—Ç–∞–∫–ª—å', '—Å–ø–æ—Å–æ–±', '–∂—É—Ä–Ω–∞–ª', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
             '–æ—Ü–µ–Ω–∫–∞', '—Ä–µ–≥–∏–æ–Ω', '–ø—Ä–æ—Ü–µ–Ω—Ç', '—Ä–æ–¥–∏—Ç–µ–ª—å', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–ø–æ–ª–æ–≤–∏–Ω–∞', '–∞–Ω–∞–ª–∏–∑', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å',
             '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–±—É–º–∞–≥–∞', '—Å—Ç–µ–ø–µ–Ω—å', '–≥–æ—Å–ø–æ–¥–∏–Ω', '–Ω–∞–¥–µ–∂–¥–∞', '–ø—Ä–µ–¥–º–µ—Ç', '–≤–∞—Ä–∏–∞–Ω—Ç', '–º–∏–Ω–∏—Å—Ç—Ä',
             '–≥—Ä–∞–Ω–∏—Ü–∞', '–º–æ–¥–µ–ª—å', '–æ–ø–µ—Ä–∞—Ü–∏—è', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Å—Ç–∞—Ä–∏–∫', '–º–∏–ª–ª–∏–æ–Ω', '—Å—á–∞—Å—Ç—å–µ', '—Ä–µ–±—è—Ç–∞', '–∫–∞–±–∏–Ω–µ—Ç',
             '–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', '–∑–Ω–∞–Ω–∏–µ', '–∑–∞—â–∏—Ç–∞', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '–ø–ª–æ—â–∞–¥—å', '—Å–æ–∑–Ω–∞–Ω–∏–µ', '–≤–æ–∑—Ä–∞—Å—Ç', '—É—á–∞—Å—Ç–Ω–∏–∫',
             '—É—á–∞—Å—Ç–æ–∫', '–∂–µ–ª–∞–Ω–∏–µ', '–¥–æ–∫—Ç–æ—Ä', '–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ–ª–¥–∞—Ç', '—Ö—É–¥–æ–∂–Ω–∏–∫', '–æ—Ä—É–∂–∏–µ',
             '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', '–ø–∞—Ä–µ–Ω—å', '–∑—Ä–µ–Ω–∏–µ', '–≥–µ–Ω–µ—Ä–∞–ª', '–ø–æ–Ω—è—Ç–∏–µ', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—É—Å–ª—É–≥–∞', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
             '—Ä–∞–¥–æ—Å—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–ø—Ä–æ–¥—É–∫—Ç', '–∫–æ–º–ø–ª–µ–∫—Å', '–±–∏–∑–Ω–µ—Å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è',
             '—Ä–µ—Ñ–æ—Ä–º–∞', '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ', '—Å–æ–±–∞–∫–∞', '–∫–∞–º–µ–Ω—å', '–±—É–¥—É—â–µ–µ', '—Ä–∞—Å—Å–∫–∞–∑', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '–ø—Ä–æ–¥—É–∫—Ü–∏—è', '—Ç–µ—Ö–Ω–∏–∫–∞',
             '–∑–¥–∞–Ω–∏–µ', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '—Ö–æ–∑—è–π—Å—Ç–≤–æ', '–±—é–¥–∂–µ—Ç', '–¥–µ—Ä–µ–≤–Ω—è', '—ç–ª–µ–º–µ–Ω—Ç',
             '–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–æ–±–µ–¥–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫', '–∑–≤–µ–∑–¥–∞', '—Å–µ—Å—Ç—Ä–∞', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ', '–∫–∞—Ä–º–∞–Ω',
             '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏—è', '–≤–æ–π—Å–∫–æ', '–∫–æ–º–∏—Å—Å–∏—è', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–∫–∞–ø–∏—Ç–∞–Ω', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
             '–æ—Ñ–∏—Ü–µ—Ä', '—Ñ–∞–º–∏–ª–∏—è', '–ø—Ä–µ–¥–µ–ª', '–≤—ã–±–æ—Ä—ã', '—É—á–µ–Ω—ã–π', '–±—É—Ç—ã–ª–∫–∞', '—Ç–µ–æ—Ä–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ª–∏—á–Ω–æ—Å—Ç—å',
             '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–≤–ª–∏—è–Ω–∏–µ', '—á–∏—Ç–∞—Ç–µ–ª—å', '—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—É—á–∏—Ç–µ–ª—å', '–º–Ω–æ–∂–µ—Å—Ç–≤–æ',
             '–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–∫–æ—Ä–∞–±–ª—å', '–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ', '—á–∞—Å—Ç–Ω–æ—Å—Ç—å', '–¥–µ—Ç—Å—Ç–≤–æ', '–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä', '–ø—Ä–æ—à–ª–æ–µ',
             '–∫–æ–º–∞–Ω–¥–∏—Ä', '–∫–æ—Ä–∏–¥–æ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–±—Ä–∞–Ω–∏–µ', '–±–æ–ª–µ–∑–Ω—å', '–∫–ª–µ—Ç–∫–∞', '–∑–∞—è–≤–ª–µ–Ω–∏–µ', '–ø–æ–ø—ã—Ç–∫–∞', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
             '—Ä–∞—Å—á–µ—Ç', '–¥–µ–ø—É—Ç–∞—Ç', '–∫–æ–º–∏—Ç–µ—Ç', '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ', '–∑–¥–æ—Ä–æ–≤—å–µ', '–¥–µ—Å—è—Ç–æ–∫', '–≥–ª—É–±–∏–Ω–∞', '—Å—Ç—É–¥–µ–Ω—Ç', '—Å–µ–∫—É–Ω–¥–∞',
             '—Å–∫–æ—Ä–æ—Å—Ç—å', '–æ—à–∏–±–∫–∞', '—Ä–µ–∂–∏—Å—Å–µ—Ä', '–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å', '–æ—â—É—â–µ–Ω–∏–µ', '—Å—Ç–∞–Ω—Ü–∏—è', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–∫–æ–ª–µ–Ω–æ',
             '–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ', '—Å—Ç–µ–∫–ª–æ', '–≤—ã—Å–æ—Ç–∞', '–±–∞–±—É—à–∫–∞', '—Ç—Ä—É–±–∫–∞', '–º–∞—Å—Ç–µ—Ä', '–ø–æ–≤–µ–¥–µ–Ω–∏–µ', '—Å—Ç–æ–ª–∏—Ü–∞', '–º–µ—Ö–∞–Ω–∏–∑–º',
             '–ø–µ—Ä–µ–¥–∞—á–∞', '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–ø–æ–¥—Ö–æ–¥', '—ç–Ω–µ—Ä–≥–∏—è', '—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ', '–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ', '—Å–æ–∂–∞–ª–µ–Ω–∏–µ', '–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å',
             '—Ä–µ—Å—É—Ä—Å', '—Ä–æ–∂–¥–µ–Ω–∏–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—É–ª—ã–±–∫–∞', '–∞—Ä—Ç–∏—Å—Ç', '—Ñ–∏–≥—É—Ä–∞', '—Å—É–±—ä–µ–∫—Ç', '—Ä–µ–∞–∫—Ü–∏—è',
             '—Å–ø–∏—Å–æ–∫', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–∂—É—Ä–Ω–∞–ª–∏—Å—Ç', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–∑–∞—Å–µ–¥–∞–Ω–∏–µ', '–±–æ–ª—å–Ω–∏—Ü–∞', '—Å—É—â–µ—Å—Ç–≤–æ', '—Å–≤–æ–π—Å—Ç–≤–æ',
             '–ø–æ–∫–æ–ª–µ–Ω–∏–µ', '–∂–∏–≤–æ—Ç–Ω–æ–µ', '—É—Å–∏–ª–∏–µ', '–æ—Ç–ª–∏—á–∏–µ', '–æ—Å—Ç—Ä–æ–≤', '–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫', '—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞',
             '—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∂–∏—Ç–µ–ª—å', '–∫—Ä–∞—Å–æ—Ç–∞', '—Ä–∞—Å—Ç–µ–Ω–∏–µ', '—è–≤–ª–µ–Ω–∏–µ', '–Ω–∞–ª–∏—á–∏–µ', '–æ–¥–µ–∂–¥–∞', '–∫—Ä–µ—Å–ª–æ', '–±–æ–ª—å–Ω–æ–π',
             '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '—Ç—Ä–∞–¥–∏—Ü–∏—è', '–¥–µ–∫–∞–±—Ä—å', '–ª–∞–¥–æ–Ω—å', '—Å–≤–µ–¥–µ–Ω–∏–µ', '—Ü–≤–µ—Ç–æ–∫', '–æ–∫—Ç—è–±—Ä—å', '–∑–∞–Ω—è—Ç–∏–µ', '—Å–µ–Ω—Ç—è–±—Ä—å',
             '–ø–æ–º–µ—â–µ–Ω–∏–µ', '—è–Ω–≤–∞—Ä—å', '–∑—Ä–∏—Ç–µ–ª—å', '—Ä–µ–¥–∞–∫—Ü–∏—è', '—Ñ–∞–∫—Ç–æ—Ä', '–∞–≤–≥—É—Å—Ç', '–∏–∑–≤–µ—Å—Ç–∏–µ', '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–æ—Ö—Ä–∞–Ω–∞',
             '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–æ—Ç–¥–µ–ª–µ–Ω–∏–µ', '—Ä–∞—Å—Ö–æ–¥', '–≤—ã—Å—Ç–∞–≤–∫–∞', '–º–∏–ª–∏—Ü–∏—è', '–ø–µ—Ä–µ—Ö–æ–¥', '–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ',
             '—Ä–æ–¥–∏–Ω–∞', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–ª–∞–≥–µ—Ä—å', '–∏–º—É—â–µ—Å—Ç–≤–æ', '–∫—Ä–æ–≤–∞—Ç—å', '–∞–ø–ø–∞—Ä–∞—Ç', '—Å–µ—Ä–µ–¥–∏–Ω–∞', '–∫–ª–∏–µ–Ω—Ç', '–æ—Ç—Ä–∞—Å–ª—å',
             '–±–µ—Å–µ–¥–∞', '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø—Ä–æ–¥–∞–∂–∞', '–ø–æ–≤—ã—à–µ–Ω–∏–µ', '–ø–æ–ª–∫–æ–≤–Ω–∏–∫', '—Å–æ–º–Ω–µ–Ω–∏–µ', '–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–∞–ø—Ä–µ–ª—å',
             '–∫–æ–¥–µ–∫—Å', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–ª–µ—Å—Ç–Ω–∏—Ü–∞', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞', '–ø–æ—è–≤–ª–µ–Ω–∏–µ', '–ø–æ–ª—É—á–µ–Ω–∏–µ',
             '–æ–±—Ä–∞–∑–µ—Ü', '–≥–ª–∞–≤–Ω–æ–µ', '–∫–æ—Å—Ç—é–º', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', '—Ç–∞–±–ª–∏—Ü–∞', '–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ª–æ—à–∞–¥—å', '–∫–æ–ª–ª–µ–≥–∞',
             '–æ—Ä–≥–∞–Ω–∏–∑–º', '—É—á–µ–Ω–∏–∫', '—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '–æ–±–æ—Ä–æ–Ω–∞', '–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
             '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞', '–ø–æ–¥—Ä—É–≥–∞', '–ø—Ä–∏–∫–∞–∑', '–∂–µ—Ä—Ç–≤–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∏–ª–æ–º–µ—Ç—Ä', '–ø—Ä–∏–∑–Ω–∞–∫',
             '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å', '–∞–º–µ—Ä–∏–∫–∞–Ω–µ—Ü', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '–≤–æ—Å—Ç–æ–∫', '–∏—Å–∫–ª—é—á–µ–Ω–∏–µ', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø–µ—Ä–µ–≤–æ–¥',
             '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '–ø–æ–ª—å–∑–∞', '–∑–≤–æ–Ω–æ–∫', '–æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞', '—á–∏–Ω–æ–≤–Ω–∏–∫', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–¥–µ—Ç–∞–ª—å', '—Ä—É—Å—Å–∫–∏–π', '—Ç–∏—à–∏–Ω–∞',
             '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–ø–æ–¥–∞—Ä–æ–∫', '—Ç—é—Ä—å–º–∞', '–∫–æ–Ω–∫—É—Ä—Å', '–∫–Ω–∏–∂–∫–∞', '–∏–∑—É—á–µ–Ω–∏–µ', '–ø—Ä–æ—Å—å–±–∞', '–ø—É–±–ª–∏–∫–∞', '—Å–æ–æ–±—â–µ–Ω–∏–µ',
             '—É–≥—Ä–æ–∑–∞', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '—Ä–µ–∫–ª–∞–º–∞', '–ø–æ—Ä—Ç—Ä–µ—Ç', '—Å—Ç–∞–∫–∞–Ω', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä',
             '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å', '–∑–Ω–∞–∫–æ–º—ã–π', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–∑–∞–ø–∏—Å—å',
             '–ø–ª–æ—â–∞–¥–∫–∞', '–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '–∑–µ—Ä–∫–∞–ª–æ', '–∞–∫–∞–¥–µ–º–∏—è', '–ø–∞–ª–∞—Ç–∞', '–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å', '–Ω–æ—è–±—Ä—å',
             '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '–ø–æ–µ–∑–¥–∫–∞', '–ø–æ—Ç–µ—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ø—Ä–∏–Ω—è—Ç–∏–µ', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–≤–µ—â–µ—Å—Ç–≤–æ',
             '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–∏–∑–¥–∞–Ω–∏–µ', '–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ', '—Ç–µ–º–Ω–æ—Ç–∞', '—á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ', '–∫–æ–ª–µ—Å–æ', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
             '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ', '–≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤', '–∫–∞–º–µ—Ä–∞', '—Å–ª–µ–¥—Å—Ç–≤–∏–µ', '–∫–∞–Ω–¥–∏–¥–∞—Ç', '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–¥–∞–≤–ª–µ–Ω–∏–µ',
             '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', '–ø–∞—Ä—Ç–Ω–µ—Ä', '–¥–≤–∏–≥–∞—Ç–µ–ª—å', '–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ', '—Å—Ç—Ä–∞—Å—Ç—å', '–∏—Å–ø—ã—Ç–∞–Ω–∏–µ', '–æ–ø–ª–∞—Ç–∞',
             '—Ä–∞–∑–Ω–∏—Ü–∞', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '—Ñ–æ—Ä–º—É–ª–∞', '–∫–∞–ø–∏—Ç–∞–ª', '–Ω–æ–≤–æ—Å—Ç—å', '—ç—Ñ—Ñ–µ–∫—Ç', '–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä', '–¥–æ–∫–ª–∞–¥',
             '—É–±–∏–π—Å—Ç–≤–æ', '—ç–∫—Å–ø–µ—Ä—Ç', '–∞–≤—Ç–æ–±—É—Å', '–ø–ª–∞—Ç—å–µ', '–æ–±—â–µ–Ω–∏–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '—Ä–∞–±–æ—á–∏–π',
             '—Ä–µ–º–æ–Ω—Ç', '–æ–±—Ä–∞—â–µ–Ω–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ', '–æ–∂–∏–¥–∞–Ω–∏–µ', '–ø–∞–º—è—Ç–Ω–∏–∫', '–∫–æ—Ä–µ–Ω—å', '–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
             '–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ', '–ø–æ—Å—Ç–µ–ª—å', '–≤–ª–∞–¥–µ–ª–µ—Ü', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω–∂–µ–Ω–µ—Ä', '—Å—Ç–∞—Ä—É—Ö–∞', '—Ä–∞–∫–µ—Ç–∞', '–≤–µ—Ä—à–∏–Ω–∞', '–≤—ã–ø—É—Å–∫',
             '—Ç–æ—Ä–≥–æ–≤–ª—è', '–º–æ–ª–æ–¥–µ–∂—å', '–∫–æ—Ä–ø—É—Å', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫', '—Å—É—â–Ω–æ—Å—Ç—å', '—Ç–∞–ª–∞–Ω—Ç', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ø–æ–ª–æ—Å–∞',
             '–æ—Å–Ω–æ–≤–Ω–æ–µ', '—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', '–¥–≤–æ—Ä–µ—Ü', '–∑–∞–±–æ—Ç–∞', '—Å—Ç–æ–ª–∏–∫',
             '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '–ø–µ—á–∞—Ç—å', '–∫–æ–ª—å—Ü–æ', '–ø–∏—Å—Ç–æ–ª–µ—Ç', '–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ', '–Ω–∞—á–∞–ª—å—Å—Ç–≤–æ', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–≤–æ—Ä–æ—Ç–∞', '–¥—Ä—É–∂–±–∞',
             '–æ–∫–æ–Ω—á–∞–Ω–∏–µ', '–≤–µ–ª–∏—á–∏–Ω–∞', '–∑–∞–ø–∏—Å–∫–∞', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞', '—Å–æ–≤–µ—Å—Ç—å', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–∫—Ä–µ–¥–∏—Ç', '–≥–æ—Å–ø–æ–¥—å',
             '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '–ø–æ—Ç–æ–ª–æ–∫', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ø–æ–º–æ—â–Ω–∏–∫', '–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '–º–µ—Ç–∞–ª–ª', '–º–æ–ª–æ–∫–æ', '–ø—Ä–æ–∫—É—Ä–æ—Ä',
             '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ø–æ—ç–∑–∏—è', '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', '–∫—Ä–∞—Å–∫–∞', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '—Å–∏–≥–Ω–∞–ª', '–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
             '–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–∏–≥–∞—Ä–µ—Ç–∞', '–≤–æ—Å—Ç–æ—Ä–≥', '–∑–æ–ª–æ—Ç–æ', '–ø—Ä–µ–º–∏—è', '–∫–æ—Ä–æ–ª—å', '–ø–æ–¥—ä–µ–∑–¥', '–∞–≤—Ç–æ–º–∞—Ç', '–º–∞–ª—å—á–∏—à–∫–∞',
             '—á—Ç–µ–Ω–∏–µ', '–ø–æ—Å–µ–ª–æ–∫', '—Å–≤–∏–¥–µ—Ç–µ–ª—å', '—Å—Ç–∞–≤–∫–∞', '—É–¥–∏–≤–ª–µ–Ω–∏–µ', '–ø–æ–≤–æ—Ä–æ—Ç', '–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ', '–º–≥–Ω–æ–≤–µ–Ω–∏–µ', '—Å—Ç–∞—Ç—É—Å',
             '–ø–∞—Ä–∞–º–µ—Ç—Ä', '—Å–∫–∞–∑–∫–∞', '—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è', '–¥—ã—Ö–∞–Ω–∏–µ', '–≤–µ—Ä—Å–∏—è', '–º–∞—Å—à—Ç–∞–±', '–º–æ–Ω–∞—Å—Ç—ã—Ä—å', '—Ö–æ–∑—è–π–∫–∞', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è',
             '–∫–æ–º–º—É–Ω–∏—Å—Ç', '–ø–µ–Ω—Å–∏—è', '–ø—Ä–∏—è—Ç–µ–ª—å', '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '–º–æ—â–Ω–æ—Å—Ç—å', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
             '–∫—Ä–∏–∑–∏—Å', '—É–∫–∞–∑–∞–Ω–∏–µ', '—è–±–ª–æ–∫–æ', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–º–æ—Å–∫–≤–∏—á', '–æ—Å—Ç–∞—Ç–æ–∫', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
             '—Å–¥–µ–ª–∫–∞', '—Å–æ—á–∏–Ω–µ–Ω–∏–µ', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '–∑–∞—Ç—Ä–∞—Ç–∞', '—Å—Ç—Ä–æ–∫–∞', '–µ–¥–∏–Ω–∏—Ü–∞', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç']

# —Ñ-—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ word_list –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.


def get_word(l_words):
    return random.choice(l_words).upper()


print(get_word(word_list))


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def display_hangman(tries):
    stages = [  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–±–µ –Ω–æ–≥–∏
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–¥–Ω–∞ –Ω–æ–≥–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—Ä—Å
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é play(), –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã.
# –§—É–Ω–∫—Ü–∏—è play() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–ª–æ–≤–æ word,
# —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–µ–π  get_word().


def play(word):
    # —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    # —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã _ –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∑–∞–¥—É–º–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    word_completion = '_' * len(word)
    guessed = False                    # —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞
    guessed_letters = []               # —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤
    guessed_words = []                 # —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    tries = 6                          # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    print('–î–∞–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π–∫—É —Å–ª–æ–≤!')
    print(display_hangman(tries))
    print(word_completion)


# __________________________________________________________


# __________________________________________________________
