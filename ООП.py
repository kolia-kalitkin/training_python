
# ████─████─████
# █──█─█──█─█──█
# █──█─█──█─█──█
# █──█─█──█─█──█
# ████─████─█──█


# Класс Circle
#  977
# Реализуйте класс Circle, описывающий круг. При создании экземпляра класс должен принимать один аргумент:
#     radius — радиус круга
# Экземпляр класса Circle должен иметь три атрибута:
#     radius — радиус круга
#     diameter — диаметр круга
#     area — площадь круга
# Примечание 1. Площадь круга вычисляется по формуле πr2πr2, где rr — радиус круга, ππ — константа, которая выражает отношение длины окружности к ее диаметру.
# Примечание 2. Импортировать константу ππ можно из модуля math:
# from math import pi
# ---------------------------------------------------------------

# import math


from typing import Self
import math
import copy


class Circle:
    def __init__(self, radius) -> None:
        self.radius = radius
        self.diameter = 2 * radius
        self.area = math.pi * radius**2


circle = Circle(5)

print(circle.radius)
print(circle.diameter)
print(circle.area)
# ---------------------------------------------------------------

# ---------------------------------------------------------------


#  Класс Bee
#
# Реализуйте класс Bee, описывающий пчелку, которая перемещается по координатной плоскости в четырех направлениях: вверх, вниз, влево и вправо. При создании экземпляра класс должен принимать два аргумента в следующем порядке:
#     x — координата пчелки по оси xx, по умолчанию имеет значение 0
#     y — координата пчелки по оси yy, по умолчанию имеет значение 0
# Экземпляр класса Bee должен иметь два атрибута:
#     x — координата пчелки по оси xx
#     y — координата пчелки по оси yy
# Класс Bee должен иметь четыре метода экземпляра:
#     move_up() — метод, принимающий в качестве аргумента целое число n и увеличивающий координату пчелки по оси yy на n
#     move_down() — метод, принимающий в качестве аргумента целое число n и уменьшающий координату пчелки по оси yy на n
#     move_right() — метод, принимающий в качестве аргумента целое число n и увеличивающий координату пчелки по оси xx на n
#     move_left() — метод, принимающий в качестве аргумента целое число n и уменьшающий координату пчелки по оси xx на n
# ---------------------------------------------------------------
class Bee:
    def __init__(self, x=0, y=0) -> None:
        self.x = x
        self.y = y

    def move_up(self, n):
        self.y += n

    def move_down(self, n):
        self.y -= n

    def move_right(self, n):
        self.x += n

    def move_left(self, n):
        self.x -= n


bee = Bee()

bee.move_right(2)
bee.move_right(2)
bee.move_up(3)
bee.move_left(1)
bee.move_down(1)

print(bee.x, bee.y)
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Gun
# 979
# Реализуйте класс Gun, описывающий ружье. При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Gun должен иметь один метод экземпляра:
#     shoot() — метод, при первом вызове которого выводится строка pif, при втором — paf, при третьем — pif, при четвертом — paf, и так далее
# ---------------------------------------------------------------
class Gun:
    def __init__(self) -> None:
        self.pif = 'pif'
        self.paf = 'paf'
        self.cnt = 0

    def shoot(self):
        if self.cnt % 2 == 0:
            print(self.pif)
        else:
            print(self.paf)
        self.cnt += 1


gun = Gun()

gun.shoot()
gun.shoot()
gun.shoot()
gun.shoot()

# ---------------------------------------------------------------


class Gun:
    def __init__(self):
        self.shoots = 0

    def shoot(self):
        self.shoots += 1
        print(('paf', 'pif')[self.shoots % 2])
# ---------------------------------------------------------------

# from itertools import cycle


# class Gun:
#     def __init__(self):
#         self.sounds = cycle(('pif', 'paf'))

#     def shoot(self):
#         print(next(self.sounds))


# Класс Gun2
# 973
# Реализуйте класс Gun, описывающий ружье. При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Gun должен иметь три метода экземпляра:
#     shoot() — метод, при первом вызове которого выводится строка pif, при втором — paf, при третьем — pif, при четвертом — paf, и так далее
#     shots_count() — метод, возвращающий актуальное количество вызовов метода shoot()
#     shots_reset() — метод, сбрасывающий количество вызовов метода shoot() до нуля
# ---------------------------------------------------------------
class Gun:
    def __init__(self) -> None:
        self.cnt_call_method_shoot = 0

    def shoot(self):
        self.cnt_call_method_shoot += 1
        # print(('paf', 'pif')[self.cnt_call_method_shoot % 2])
        print('pif' if self.cnt_call_method_shoot % 2 else 'paf')

    def shots_count(self):
        return self.cnt_call_method_shoot

    def shots_reset(self):
        self.cnt_call_method_shoot = 0
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Scales
# 970
# Реализуйте класс Scales, описывающий весы с двумя чашами. При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Scales должен иметь три метода экземпляра:
#     add_right() — метод, принимающий в качестве аргумента массу груза в килограммах и добавляющий на правую чашу весов этот груз
#     add_left() — метод, принимающий в качестве аргумента массу груза в килограммах и добавляющий на левую чашу весов этот груз
#     get_result() — метод, возвращающий строку Весы в равновесии, если массы грузов на чашах совпадают, Правая чаша тяжелее — если правая чаша тяжелее, Левая чаша тяжелее — если левая чаша тяжелее
# Примечание 1. Пустые весы всегда находятся в равновесии.
# ---------------------------------------------------------------
class Scales:
    def __init__(self) -> None:
        self.cap_right = 0
        self.cap_left = 0

    def add_right(self, cargo_mass_right):
        self.cap_right += cargo_mass_right

    def add_left(self, cargo_mass_left):
        self.cap_left += cargo_mass_left

    def get_result(self):
        if self.cap_left == self.cap_right:
            message = 'Весы в равновесии'
        elif self.cap_left < self.cap_right:
            message = 'Правая чаша тяжелее'
        elif self.cap_left > self.cap_right:
            message = 'Левая чаша тяжелее'

        return message
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Vector
# 964
# Реализуйте класс Vector, описывающий вектор на плоскости. При создании экземпляра класс должен принимать два аргумента в следующем порядке:
#     x — координата вектора по оси xx, по умолчанию имеет значение 0
#     y — координата вектора по оси yy, по умолчанию имеет значение 0
# Экземпляр класса Vector должен иметь два атрибута:
#     x — координата вектора по оси xx
#     y — координата вектора по оси yy
# Класс Vector должен иметь один метод экземпляра:
#     abs() — метод, возвращающий модуль вектора
# Примечание 1. Модуль вектора с координатами (x,y)(x,y) вычисляется по формуле x2+y2x2+y2
# ---------------------------------------------------------------
class Vector:
    def __init__(self, x=0, y=0) -> None:
        self.x = x
        self.y = y

    def abs(self):
        return (self.x**2 + self.y**2)**0.5
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# Класс Numbers
# 963
# Реализуйте класс Numbers, описывающий изначально пустой расширяемый набор целых чисел. При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Numbers должен иметь три метода экземпляра:
#     add_number() — метод, принимающий в качестве аргумента целое число и добавляющий его в набор
#     get_even() — метод, возвращающий список всех четных чисел из набора
#     get_odd() — метод, возвращающий список всех нечетных чисел из набора
# Примечание 1. Числа в списках, возвращаемых методами get_even() и get_odd(), должны располагаться в том порядке, в котором они были добавлены в набор.
# ---------------------------------------------------------------


class Numbers:
    def __init__(self) -> None:
        self.lst = []

    def add_number(self, num):
        self.lst.append(num)

    def get_even(self):
        return list(filter(lambda x: x % 2, self.lst))

    def get_odd(self):
        return list(filter(lambda x: not x % 2, self.lst))


numbers = Numbers()

numbers.add_number(1)
numbers.add_number(3)
numbers.add_number(1)

print(numbers.get_even())
print(numbers.get_odd())
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс TextHandler
# 944
# Будем называть словом любую последовательность из одной или более букв. Текстом будем считать набор слов, разделенных пробельными символами.
# Реализуйте класс TextHandler, описывающий изначально пустой расширяемый набор слов. При создании экземпляра класс не должен принимать никаких аргументов.
# Экземпляр класса TextHandler должен иметь три метода:
#     add_words() — метод, принимающий в качестве аргумента текст и добавляющий слова из данного текста в набор
#     get_shortest_words() — метод, возвращающий актуальный список самых коротких слов в наборе
#     get_longest_words() — метод, возвращающий актуальный список самых длинных слов в наборе
# Примечание 1. Слова в списках, возвращаемых методами get_shortest_words() и get_longest_words(), должны располагаться в том порядке, в котором они были добавлены в набор.
# ---------------------------------------------------------------
class TextHandler:
    def __init__(self) -> None:
        self.words = []

    def add_words(self, text):
        for word in text.split():
            self.words.append(word)

    def get_shortest_words(self):
        short = min(self.words, key=len, default=None)

        if short:
            return list(filter(lambda x: len(x) == len(short), self.words))
        return []

    def get_longest_words(self):
        long = max(self.words, key=len, default=None)

        if long:
            return list(filter(lambda x: len(x) == len(long), self.words))
        return []
# -------------------ПРЕПОД--------------------------------------


class TextHandler:
    def __init__(self):
        self.words = []
        self.shortest = 0
        self.longest = 0

    def add_words(self, words):
        words = words.split()
        self.words.extend(words)
        self.shortest = min(map(len, self.words))
        self.longest = max(map(len, self.words))

    def get_shortest_words(self):
        return [w for w in self.words if len(w) == self.shortest]

    def get_longest_words(self):
        return [w for w in self.words if len(w) == self.longest]
# ---------------------------------------------------------------


# Класс Todo
# 941
# Реализуйте класс Todo, описывающий список дел. При создании экземпляра класс не должен принимать никаких аргументов.
# Экземпляр класса Todo должен иметь один атрибут:
#     things — изначально пустой список дел, которые нужно выполнить
# Класс Todo должен иметь четыре метода экземпляра:
#     add() — метод, принимающий название дела и его приоритет (целое число) и добавляющий данное дело в список дел в виде кортежа:
#     (<название дела>, <приоритет>)
#     get_by_priority() — метод, принимающий в качестве аргумента целое число n и возвращающий список названий дел, имеющих приоритет n
#     get_low_priority() — метод, возвращающий список названий дел, имеющих самый низкий приоритет
#     get_high_priority() — метод, возвращающий список названий дел, имеющих самый высокий приоритет
# Примечание 1. Названия дел в списках, возвращаемых методами get_by_priority(), get_low_priority() и get_high_priority(), должны располагаться в том порядке, в котором они были добавлены в список.
# ---------------------------------------------------------------
class Todo:
    def __init__(self) -> None:
        self.things = []
        self.priority_lst = []

    def add(self, case_name, priority):
        self.things.append((case_name, priority))
        self.priority_lst.append(priority)

    def get_by_priority(self, n):
        self.priority_lst.append(n)
        return [w[0] for w in self.things if w[1] == n]

    def get_low_priority(self):
        low_low_priority = min(self.priority_lst, default=None)
        l1 = filter(lambda x: x[1] == low_low_priority, self.things)
        l1 = map(lambda x: x[0], l1)
        return list(l1)

    def get_high_priority(self):
        high_priority = max(self.priority_lst, default=None)
        l1 = filter(lambda x: x[1] == high_priority, self.things)
        l1 = map(lambda x: x[0], l1)
        return list(l1)


todo = Todo()

todo.add('Ответить на вопросы', 5)
todo.add('Сделать картинки', 1)
todo.add('Доделать задачи', 4)
todo.add('Дописать конспект', 5)

print(todo.get_low_priority())
print(todo.get_high_priority())
print(todo.get_by_priority(3))
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Postman
# 910
# Реализуйте класс Postman, описывающий почтальона. При создании экземпляра класс не должен принимать никаких аргументов.
# Экземпляр класса Postman должен иметь один атрибут:
#     delivery_data — изначально пустой список адресов, по которым следует доставить письма
# Экземпляр класса Postman должен иметь три метода экземпляра:
#     add_delivery() — метод, принимающий в качестве аргументов улицу, дом и квартиру, и добавляющий в список адресов эти данные в виде кортежа:
#     (<улица>, <дом>, <квартира>)
#     get_houses_for_street() — метод, принимающий в качестве аргумента улицу и возвращающий список всех домов на этой улице, в которые требуется доставить письма
#     get_flats_for_house() — метод, принимающий в качестве аргументов улицу и дом и возвращающий список всех квартир в этом доме, в которые требуется доставить письма
# Примечание 1. Дома и квартиры в списках, возвращаемых методами get_houses_for_street() и get_flats_for_house(), должны располагаться в том порядке, в котором они были добавлены.
# ---------------------------------------------------------------

class Postman:
    def __init__(self) -> None:
        # '''изначально пустой список адресов, по которым следует доставить письма'''
        self.delivery_data = []

    def add_delivery(self, street, house, flat):
        '''метод, принимающий в качестве аргументов улицу, дом и квартиру, и добавляющий в список адресов эти данные в виде кортежа:  '''
        self.delivery_data.append((street, house, flat))

    def get_houses_for_street(self, street):
        '''метод, принимающий в качестве аргумента улицу и возвращающий список всех домов на этой улице, в которые требуется доставить письма'''
        gen1 = (i[1] for i in self.delivery_data if i[0] == street)
        # удаляет дубликат списка
        l1 = []
        for i in gen1:
            if i not in l1:
                l1.append(i)
        # sorted(set(x), key=lambda d: x.index(d))
        # функцию drop_duplicates из пандаса
        # збавиться от дубликатов, сохранив порядок можно через словарь
        return l1

    def get_flats_for_house(self, street, house):
        '''метод, принимающий в качестве аргументов улицу и дом и возвращающий список всех квартир в этом доме, в которые требуется доставить письма'''
        gen1 = (i[2] for i in self.delivery_data if i[0]
                == street and i[1] == house)
        l1 = []
        for i in gen1:
            if i not in l1:
                l1.append(i)

        return l1
# ---------------------препод--через словарь---------------------------------


class Postman:
    def __init__(self):
        self.delivery_data = []

    def add_delivery(self, street, house, apartment):
        self.delivery_data.append((street, house, apartment))

    def get_houses_for_street(self, street):
        return list({h: None for s, h, _ in self.delivery_data if s == street})

    def get_flats_for_house(self, street, house):
        return list({a: None for s, h, a in self.delivery_data if s == street and h == house})
# ---------------------------------------------------------------


#  Класс Wordplay
# 850
# Будем называть словом любую последовательность из одной или более латинских букв.
# Реализуйте класс Wordplay, описывающий расширяемый набор слов. При создании экземпляра класс должен принимать один аргумент:
#     words — список, определяющий начальный набор слов. Если не передан, начальный набор слов считается пустым
# Экземпляр класса Wordplay должен иметь один атрибут:
#     words — список, содержащий набор слов
# Класс Wordplay должен иметь четыре метода экземпляра:
#     add_word() — метод, принимающий в качестве аргумента слово и добавляющий его в набор. Если слово уже есть в наборе, метод ничего не должен делать
#     words_with_length() — метод, принимающий в качестве аргумента натуральное число n и возвращающий список слов из набора, длина которых равна n
#     only() — метод, принимающий произвольное количество аргументов — букв, и возвращающий все слова из набора, которые включают в себя только переданные буквы
#     avoid() — метод, принимающий произвольное количество аргументов — букв, и возвращающий все слова из списка words, которые не содержат ни одну из этих букв
# Примечание 1. Слова в списках, возвращаемых методами words_with_length(), only() и avoid(), должны располагаться в том порядке, в котором они были добавлены.
# Примечание 2. Экземпляр класса Wordplay не должен зависеть от списка, на основе которого он был создан. Другими словами, если исходный список изменится, то экземпляр класса Wordplay измениться не должен.
# ---------------------------------------------------------------


class Wordplay:
    def __init__(self, words=None) -> None:
        if words is None:
            words = []
        words2 = copy.copy(words)
        self.words = words2

    def add_word(self, new_word):
        if new_word not in self.words:
            self.words.append(new_word)

    def words_with_length(self, n):
        return [word for word in self.words if len(word) == n]

    def only(self, *args):
        return [word for word in self.words if set(args) >= set(word)]

    def avoid(self, *args):
        return [word for word in self.words if set(args).isdisjoint(set(word))]


words = ['Лейбниц', 'Бэббидж', 'Нейман', 'Джобс', 'да_Винчи', 'Касперский']
wordplay = Wordplay(words)

words.extend(['Гуев', 'Харисов', 'Светкин'])
print(words)
print(wordplay.words)

# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Knight ♞
#
# Реализуйте класс Knight, описывающий шахматного коня. При создании экземпляра класс должен принимать три аргумента в следующем порядке:
#     horizontal — координата коня по горизонтальной оси, представленная латинской буквой от a до h
#     vertical — координата коня по вертикальной оси, представленная целым числом от 1 до 8 включительно
#     color — цвет коня (black или white)
# Экземпляр класса Knight должен иметь три атрибута:
#     horizontal — координата коня на шахматной доске по горизонтальной оси
#     vertical — координата коня на шахматной доске по вертикальной оси
#     color — цвет коня
# Класс Knight должен иметь четыре метода экземпляра:
#     get_char() — метод, возвращающий символ N
#     can_move() — метод, принимающий в качестве аргументов координаты клетки по горизонтальной и по вертикальной осям и возвращающий True, если конь может переместиться на клетку с данными координатами, или False в противном случае
#     move_to() — метод, принимающий в качестве аргументов координаты клетки по горизонтальной и по вертикальной осям и заменяющий текущие координаты коня на переданные. Если конь из текущей клетки не может переместиться на клетку с указанными координатами, его координаты должны остаться неизменными
#     draw_board() — метод, печатающий шахматное поле, отмечающий на этом поле коня и клетки, на которые может переместиться конь. Пустые клетки должны быть отображены символом ., конь — символом N, клетки, на которые может переместиться конь, — символом *
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Circle
#
# Реализуйте класс Circle, описывающий круг. При создании экземпляра класс должен принимать один аргумент:

#     radius — радиус круга

# Экземпляр класса Circle должен иметь три атрибута:

#     _radius — радиус круга
#     _diameter — диаметр круга
#     _area — площадь круга

# Класс Circle должен иметь три метода экземпляра:

#     get_radius() — метод, возвращающий радиус круга
#     get_diameter() — метод, возвращающий диаметр круга
#     get_area() — метод, возвращающий площадь круга

# Примечание 1. Площадь круга вычисляется по формуле πr2πr2, где rr — радиус круга, ππ — константа, которая выражает отношение длины окружности к ее диаметру.

# Примечание 2. Импортировать константу ππ можно из модуля math:

# ---------------------------------------------------------------


class Circle:
    def __init__(self, radius: int) -> None:
        self._radius = radius
        self._diameter = 2 * radius
        self._area = math.pi * radius**2

    def get_radius(self) -> int:
        '''метод, возвращающий радиус круга'''
        return self._radius

    def get_diameter(self) -> int:
        '''метод, возвращающий диаметр круга'''
        return self._diameter

    def get_area(self) -> int:
        '''метод, возвращающий площадь круга'''
        return self._area
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс BankAccount
# 949
# Реализуйте класс BankAccount, описывающий банковский счет. При создании экземпляра класс должен принимать один аргумент:
#     balance — баланс счета, по умолчанию имеет значение 0
# Экземпляр класса BankAccount должен иметь один атрибут:
#     _balance — баланс счета
# Класс BankAccount должен иметь четыре метода экземпляра:
#     get_balance() — метод, возвращающий актуальный баланс счета
#     deposit() — метод, принимающий в качестве аргумента число amount и увеличивающий баланс счета на amount
#     withdraw() — метод, принимающий в качестве аргумента число amount и уменьшающий баланс счета на amount. Если amount превышает количество средств на балансе счета, должно быть возбуждено исключение ValueError с сообщением:
#     На счете недостаточно средств
#     transfer() — метод, принимающий в качестве аргументов банковский счет account и число amount. Метод должен уменьшать баланс текущего счета на amount и увеличивать баланс счета account на amount. Если amount превышает количество средств на балансе текущего счета, должно быть возбуждено исключение ValueError с сообщением:
#     На счете недостаточно средств
# Примечание 1. Числами будем считать экземпляры классов int и float.
# Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный класс используется только с корректными данными.
# ---------------------------------------------------------------

# from typing import Self

# class BankAccount:
#     def __init__(self, balance=0: int | float) -> None:
#         self._balance = balance

#     def get_balance(self) -> int | float:
#         '''метод, возвращающий актуальный баланс счета'''
#         return self._balance

#     def deposit(self, amount: int | float):
#         '''метод, принимающий в качестве аргумента число amount и увеличивающий баланс счета на amount'''
#         self._balance += amount

#     def withdraw(self, amount: int | float):
#         '''метод, принимающий в качестве аргумента число amount и уменьшающий баланс счета на amount. Если amount превышает количество средств на балансе счета, должно быть возбуждено исключение ValueError с сообщением: На счете недостаточно средств'''
#         if self._balance > amount:
#             self._balance -= amount
#         else:
#             print('На счете недостаточно средств')
#             raise ValueError

#     # def transfer(self: Self, account: Self, amount: int) -> None:
#     def transfer(self: 'BankAccount', account: 'BankAccount', amount: int) -> None:
#         '''метод, принимающий в качестве аргументов банковский счет account и число amount. Метод должен уменьшать баланс текущего счета на amount и увеличивать баланс счета account на amount. Если amount превышает количество средств на балансе текущего счета, должно быть возбуждено исключение ValueError с сообщением: '''
#         self.withdraw(amount)        
#         self.account = account
#         self.account.deposit(amount)       
  


# account1 = BankAccount(100)
# account2 = BankAccount(200)

# account1.transfer(account2, 50)
# print(account1.get_balance())
# print(account2.get_balance())
# ---------------------------------------------------------------
    # def transfer(self: 'BankAccount', account: 'BankAccount', amount: int) -> None:
    #     '''метод, принимающий в качестве аргументов банковский счет account и число amount. Метод должен уменьшать баланс текущего счета на amount и увеличивать баланс счета account на amount. Если amount превышает количество средств на балансе текущего счета, должно быть возбуждено исключение ValueError с сообщением: '''
    #     self.withdraw(amount)        
    #     self.account = account
    #     self.account.deposit(amount)    
# ---------------------------------------------------------------


# Класс User
# 937
# Реализуйте класс User, описывающий интернет-пользователя. При создании экземпляра класс должен принимать два аргумента в следующем порядке:
#     name — имя пользователя. Если name не является непустой строкой, состоящей только из букв, должно быть возбуждено исключение ValueError с текстом:
#     Некорректное имя
#     age — возраст пользователя. Если age не является целым числом, принадлежащим отрезку [0; 110], должно быть возбуждено исключение ValueError с текстом:
#     Некорректный возраст
# Экземпляр класса User должен иметь два атрибута:
#     _name — имя пользователя
#     _age — возраст пользователя
# Класс User должен иметь четыре метода экземпляра:
#     get_name() — метод, возвращающий имя пользователя
#     set_name() — метод, принимающий в качестве аргумента значение new_name и изменяющий имя пользователя на new_name. Если new_name не является непустой строкой, состоящей только из букв, должно быть возбуждено исключение ValueError с текстом:
#     Некорректное имя
#     get_age() — метод, возвращающий возраст пользователя
#     set_age() — метод, принимающий в качестве аргумента значение new_age и изменяющий возраст пользователя на new_age. Если new_age не является целым числом, принадлежащим отрезку [0; 110], должно быть возбуждено исключение ValueError с текстом:
#     Некорректный возраст
# Примечание 1. Если при создании экземпляра класса User имя и возраст одновременно являются некорректными, должно быть возбуждено исключение, связанное с именем.
# ---------------------------------------------------------------
class User:
    def __init__(self, name: str, age: int) -> None:        
        
        # класс — это единая сущность, внутри можно обращаться к любому методу, даже тому, который определён позже. 
        self.set_name(name)
        self.set_age(age)
        
        self._name = name
        self._age = age


    def get_name(self):
        '''метод, возвращающий имя пользователя'''
        return self._name

    def get_age(self):
        '''метод, возвращающий возраст пользователя'''
        return self._age



    # Сеттер1
    def set_name(self, new_name: str):
        '''метод, принимающий в качестве аргумента значение new_name и изменяющий имя пользователя на new_name. Если new_name не является непустой строкой, состоящей только из букв, должно быть возбуждено исключение ValueError с текстом: '''
        if isinstance(new_name, str) and new_name.isalpha():
            self._name = new_name
        else:
            raise ValueError('Некорректное имя')
    

    # Сеттер2
    def set_age(self, new_age: int): 
        '''метод, принимающий в качестве аргумента значение new_age и изменяющий возраст пользователя на new_age. Если new_age не является целым числом, принадлежащим отрезку [0; 110], должно быть возбуждено исключение ValueError с текстом: '''
        if isinstance(new_age, int) and 0 <=new_age <=110:
            self._age = new_age
        else:            
            raise ValueError('Некорректный возраст')
# ---------------------------------------------------------------

# ---------------------------------------------------------------


# Класс Rectangle
# 949
# Реализуйте класс Rectangle, описывающий прямоугольник. При создании экземпляра класс должен принимать два аргумента в следующем порядке:
#     length — длина прямоугольника
#     width — ширина прямоугольника
# Экземпляр класса Rectangle должен иметь два атрибута:
#     length — длина прямоугольника
#     width — ширина прямоугольника
# Класс Rectangle должен иметь два свойства:
#     perimeter — свойство, доступное только для чтения, возвращающее периметр прямоугольника
#     area — свойство, доступное только для чтения, возвращающее площадь прямоугольника
# Примечание 1. При изменении сторон прямоугольника должны изменяться его периметр и площадь.
# ---------------------------------------------------------------
class Rectangle:
    def __init__(self, length, width):
        self._length = length
        self._width = width

    # --------------------------------------------------------
    def get_length(self):
        '''геттер - возвращает значение длины'''
        return self._length

    def set_length(self, length):
        '''сеттер - меняет значение длины'''
        self._length = length

    # --------------------------------------------------------
    def get_width(self):
        '''геттер -  возвращает значение ширины'''
        return self._width

    def set_width(self, width):
        '''сеттер - меняет значение ширины'''
        self._width = width

    # --------------------------------------------------------
    def get_perimeter(self):
        '''геттер - возвращает значение периметра'''
        return 2 * (self._length + self._width)    

    # --------------------------------------------------------
    def get_area(self):
        '''геттер -  возвращает значение площади'''
        return self._length * self._width     
    # --------------------------------------------------------


    length = property(get_length, set_length)
    width = property(get_width, set_width)
    perimeter = property(get_perimeter)
    area = property(get_area)


rectangle = Rectangle(4, 5)

print(rectangle.length)
print(rectangle.width)
print(rectangle.perimeter)
print(rectangle.area)



# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------
   

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


#
#
#
# ---------------------------------------------------------------

# ---------------------------------------------------------------

# ---------------------------------------------------------------


# ---------------------------------------------------------------
